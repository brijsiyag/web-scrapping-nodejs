[
  {
    "name": "Jeopardy of Dropped Balls",
    "question_id": "jeopardy-of-dropped-balls",
    "question": "Mr. Chanek has a new game called Dropping Balls. Initially, Mr. Chanek has a grid a of size n * mEach cell (x,y) contains an integer a_{x,y} denoting the direction of how the ball will move.  a_{x,y}=1 — the ball will move to the right (the next cell is (x, y + 1));  a_{x,y}=2 — the ball will move to the bottom (the next cell is (x + 1, y));  a_{x,y}=3 — the ball will move to the left (the next cell is (x, y - 1)). Every time a ball leaves a cell (x,y), the integer a_{x,y} will change to 2. Mr. Chanek will drop k balls sequentially, each starting from the first row, and on the c_1, c_2, ..., c_k-th (1 <= c_i <= m) columns.Determine in which column each ball will end up in (position of the ball after leaving the grid).",
    "input_details": "The first line contains three integers n, m, and k (1 <= n, m <= 1000, 1 <= k <= 10^5) — the size of the grid and the number of balls dropped by Mr. Chanek.The i-th of the next n lines contains m integers a_{i,1},a_{i,2},....,a_{i,m} (1 <= a_{i,j} <= 3). It will satisfy a_{i, 1} \n 3 and a_{i, m} \n 1.The next line contains k integers c_1, c_2, ...., c_k (1 <= c_i <= m) — the balls' column positions dropped by Mr. Chanek sequentially.",
    "output_details": "Output k integers — the i-th integer denoting the column where the i-th ball will end.",
    "sample_input": "5 5 3\n1 2 3 3 3\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n1 2 1",
    "sample_output": "2 2 1",
    "tags": ["binary search", "brute force", "dsu", "implementation", "*1500"]
  },
  {
    "name": "Illusions of the Desert",
    "question_id": "illusions-of-the-desert",
    "question": "Chanek Jones is back, helping his long-lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions.The map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them such that it is possible to travel between each pair of rooms through several tunnels.The i-th room (1 <= i <= n) has a_i illusion rate. To go from the x-th room to the y-th room, there must exist a tunnel between x and y, and it takes \\max(|a_x + a_y|, |a_x - a_y|) energy. |z| denotes the absolute value of z.To prevent grave robbers, the maze can change the illusion rate of any room in it. Chanek and Indiana would ask q queries.There are two types of queries to be done:  1\\ u\\ c — The illusion rate of the x-th room is changed to c (1 <= u <= n, 0 <= |c| <= 10^9).  2\\ u\\ v — Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 <= u, v <= n). Help them, so you can get a portion of the treasure!",
    "input_details": "The first line contains two integers n and q (2 <= n <= 10^5, 1 <= q <= 10^5) — the number of rooms in the maze and the number of queries.The second line contains n integers a_1, a_2, ...., a_n (0 <= |a_i| <= 10^9) — inital illusion rate of each room.The i-th of the next n-1 lines contains two integers s_i and t_i (1 <= s_i, t_i <= n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.The next q lines contain the query as described. The given queries are valid.",
    "output_details": "For each type 2 query, output a line containing an integer — the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.",
    "sample_input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3",
    "sample_output": "39\n32\n0",
    "tags": ["data structures", "trees", "*2300"]
  },
  {
    "name": "Holiday Wall Ornaments",
    "question_id": "holiday-wall-ornaments",
    "question": "The Winter holiday will be here soon. Mr. Chanek wants to decorate his house's wall with ornaments. The wall can be represented as a binary string a of length n. His favorite nephew has another binary string b of length m (m <= n).Mr. Chanek's nephew loves the non-negative integer k. His nephew wants exactly k occurrences of b as substrings in a. However, Mr. Chanek does not know the value of k. So, for each k (0 <= k <= n - m + 1), find the minimum number of elements in a that have to be changed such that there are exactly k occurrences of b in a.A string s occurs exactly k times in t if there are exactly k different pairs (p,q) such that we can obtain s by deleting p characters from the beginning and q characters from the end of t.",
    "input_details": "The first line contains two integers n and m (1 <= m <= n <= 500) — size of the binary string a and b respectively.The second line contains a binary string a of length n.The third line contains a binary string b of length m.",
    "output_details": "Output n - m + 2 integers — the (k+1)-th integer denotes the minimal number of elements in a that have to be changed so there are exactly k occurrences of b as a substring in a.",
    "sample_input": "9 3\n100101011\n101",
    "sample_output": "1 1 0 1 6 -1 -1 -1",
    "tags": ["dp", "strings", "*2200"]
  },
  {
    "name": "GCD Festival",
    "question_id": "gcd-festival",
    "question": "Mr. Chanek has an array a of n integers. The prettiness value of a is denoted as:\\sum_{i=1}^{n} {\\sum_{j=1}^{n} {gcd(a_i, a_j) . gcd(i, j)}}where gcd(x, y) denotes the greatest common divisor (GCD) of integers x and y.In other words, the prettiness value of an array a is the total sum of gcd(a_i, a_j) . gcd(i, j) for all pairs (i, j).Help Mr. Chanek find the prettiness value of a, and output the result modulo 10^9 + 7!",
    "input_details": "The first line contains an integer n (2 <= n <= 10^5).The second line contains n integers a_1, a_2, ...., a_n (1 <= a_i <= 10^5).",
    "output_details": "Output an integer denoting the prettiness value of a modulo 10^9 + 7.",
    "sample_input": "5\n3 6 2 1 4",
    "sample_output": "77",
    "tags": ["math", "number theory", "*2200"]
  },
  {
    "name": "Finding Expected Value",
    "question_id": "finding-expected-value",
    "question": "Mr. Chanek opened a letter from his fellow, who is currently studying at Singanesia. Here is what it says.Define an array b (0 <= b_i < k) with n integers. While there exists a pair (i, j) such that b_i \n b_j, do the following operation:  Randomly pick a number i satisfying 0 <= i < n. Note that each number i has a probability of \\frac{1}{n} to be picked.  Randomly Pick a number j satisfying 0 <= j < k.  Change the value of b_i to j. It is possible for b_i to be changed to the same value. Denote f(b) as the expected number of operations done to b until all elements of b are equal. You are given two integers n and k, and an array a (-1 <= a_i < k) of n integers. For every index i with a_i = -1, replace a_i with a random number j satisfying 0 <= j < k. Let c be the number of occurrences of -1 in a. There are k^c possibilites of a after the replacement, each with equal probability of being the final array.Find the expected value of f(a) modulo 10^9 + 7. Formally, let M = 10^9 + 7. It can be shown that the answer can be expressed as an irreducible fraction \\frac{p}{q}, where p and q are integers and q ! = 0 mod{M}. Output the integer equal to p . q^{-1} mod M. In other words, output such an integer x that 0 <= x < M and x . q = p mod{M}.After reading the letter, Mr. Chanek gave the task to you. Solve it for the sake of their friendship!",
    "input_details": "The first line contains two integers n and k (2 <= n <= 10^5, 2 <= k <= 10^9). The second line contains n integers a_1, a_2, ...., a_n (-1 <= a_i < k).",
    "output_details": "Output an integer denoting the expected value of f(a) modulo 10^9 + 7.",
    "sample_input": "2 2\n0 1",
    "sample_output": "2",
    "tags": ["math", "*2900"]
  },
  {
    "name": "Eye-Pleasing City Park Tour",
    "question_id": "eye-pleasing-city-park-tour",
    "question": "There is a city park represented as a tree with n attractions as its vertices and n - 1 rails as its edges. The i-th attraction has happiness value a_i.Each rail has a color. It is either black if t_i = 0, or white if t_i = 1. Black trains only operate on a black rail track, and white trains only operate on a white rail track. If you are previously on a black train and want to ride a white train, or you are previously on a white train and want to ride a black train, you need to use 1 ticket.The path of a tour must be a simple path — it must not visit an attraction more than once. You do not need a ticket the first time you board a train. You only have k tickets, meaning you can only switch train types at most k times. In particular, you do not need a ticket to go through a path consisting of one rail color.Define f(u, v) as the sum of happiness values of the attractions in the tour (u, v), which is a simple path that starts at the u-th attraction and ends at the v-th attraction. Find the sum of f(u,v) for all valid tours (u, v) (1 <= u <= v <= n) that does not need more than k tickets, modulo 10^9 + 7.",
    "input_details": "The first line contains two integers n and k (2 <= n <= 2 . 10^5, 0 <= k <= n-1) — the number of attractions in the city park and the number of tickets you have.The second line contains n integers a_1, a_2,...., a_n (0 <= a_i <= 10^9) — the happiness value of each attraction.The i-th of the next n - 1 lines contains three integers u_i, v_i, and t_i (1 <= u_i, v_i <= n, 0 <= t_i <= 1) — an edge between vertices u_i and v_i with color t_i. The given edges form a tree.",
    "output_details": "Output an integer denoting the total happiness value for all valid tours (u, v) (1 <= u <= v <= n), modulo 10^9 + 7.",
    "sample_input": "5 0\n1 3 2 6 4\n1 2 1\n1 4 0\n3 2 1\n2 5 0",
    "sample_output": "45",
    "tags": ["data structures", "trees", "*2600"]
  },
  {
    "name": "Divisible by Twenty-Five",
    "question_id": "divisible-by-twenty-five",
    "question": "Mr. Chanek has an integer represented by a string s. Zero or more digits have been erased and are denoted by the character _. There are also zero or more digits marked by the character X, meaning they're the same digit.Mr. Chanek wants to count the number of possible integer s, where s is divisible by 25. Of course, s must not contain any leading zero. He can replace the character _ with any digit. He can also replace the character X with any digit, but it must be the same for every character X.As a note, a leading zero is any 0 digit that comes before the first nonzero digit in a number string in positional notation. For example, 0025 has two leading zeroes. An exception is the integer zero, (0 has no leading zero, but 0000 has three leading zeroes).",
    "input_details": "One line containing the string s (1 <= |s| <= 8). The string s consists of the characters 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, _, and X.",
    "output_details": "Output an integer denoting the number of possible integer s.",
    "sample_input": "25",
    "sample_output": "1",
    "tags": ["brute force", "dfs and similar", "dp", "*1800"]
  },
  {
    "name": "Cyclic Sum",
    "question_id": "cyclic-sum",
    "question": "Denote a cyclic sequence of size n as an array s such that s_n is adjacent to s_1. The segment s[r, l] where l < r is the concatenation of s[r, n] and s[1, l].You are given an array a consisting of n integers. Define b as the cyclic sequence obtained from concatenating m copies of a. Note that b has size n . m.You are given an integer k where k = 1 or k is a prime number. Find the number of different segments in b where the sum of elements in the segment is divisible by k.Two segments are considered different if the set of indices of the segments are different. For example, when n = 3 and m = 2, the set of indices for segment s[2, 5] is \\{2, 3, 4, 5\\}, and for segment s[5, 2] is \\{5, 6, 1, 2\\}. In particular, the segments s[1, 6], s[2,1], ...., s[6, 5] are considered as the same segment.Output the answer modulo 10^9 + 7.",
    "input_details": "The first line contains three integers n, m, and k (1 <= n, m, k <= 2 . 10^5, k = 1 or k is a prime number).The second line contains n integers a_1, a_2, ...., a_n (0 <= a_i <= 2 . 10^5).",
    "output_details": "Output an integer denoting the number of different segments in b where the sum of elements in the segment is divisible by k, modulo 10^9 + 7.",
    "sample_input": "5 1 5\n1 2 3 4 3",
    "sample_output": "4",
    "tags": ["data structures", "fft", "number theory", "*3000"]
  },
  {
    "name": "Building an Amusement Park",
    "question_id": "building-an-amusement-park",
    "question": "Mr. Chanek lives in a city represented as a plane. He wants to build an amusement park in the shape of a circle of radius r. The circle must touch the origin (point (0, 0)).There are n bird habitats that can be a photo spot for the tourists in the park. The i-th bird habitat is at point p_i = (x_i, y_i). Find the minimum radius r of a park with at least k bird habitats inside. A point is considered to be inside the park if and only if the distance between p_i and the center of the park is less than or equal to the radius of the park. Note that the center and the radius of the park do not need to be integers.In this problem, it is guaranteed that the given input always has a solution with r <= 2 . 10^5.",
    "input_details": "The first line contains two integers n and k (1 <= n <= 10^5, 1 <= k <= n) — the number of bird habitats in the city and the number of bird habitats required to be inside the park.The i-th of the next n lines contains two integers x_i and y_i (0 <= |x_i|, |y_i| <= 10^5) — the position of the i-th bird habitat.",
    "output_details": "Output a single real number r denoting the minimum radius of a park with at least k bird habitats inside. It is guaranteed that the given input always has a solution with r <= 2 . 10^5.Your answer is considered correct if its absolute or relative error does not exceed 10^{-4}.Formally, let your answer be a, and the jury's answer be b. Your answer is accepted if and only if \\frac{|a - b|}{\\max{(1, |b|)}} <= 10^{-4}.",
    "sample_input": "8 4\n-3 1\n-4 4\n1 5\n2 2\n2 -2\n-2 -4\n-1 -1\n-6 0",
    "sample_output": "3.1622776589",
    "tags": ["binary search", "geometry", "*2300"]
  },
  {
    "name": "Another Sorting Problem",
    "question_id": "another-sorting-problem",
    "question": "Andi and Budi were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title — a string s_i numbered from 1 to n, each with length m. Andi really wants to sort the book lexicographically ascending, while Budi wants to sort it lexicographically descending.Settling their fight, they decided to combine their idea and sort it asc-desc-endingly, where the odd-indexed characters will be compared ascendingly, and the even-indexed characters will be compared descendingly.A string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds:  if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b;  if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. ",
    "input_details": "The first line contains two integers n and m (1 <= n . m <= 10^6).The i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters — the book title. The strings are pairwise distinct.",
    "output_details": "Output n integers — the indices of the strings after they are sorted asc-desc-endingly.",
    "sample_input": "5 2\nAA\nAB\nBB\nBA\nAZ",
    "sample_output": "5 2 1 3 4",
    "tags": ["data structures", "sortings", "strings", "*1100"]
  },
  {
    "name": "Occurrences",
    "question_id": "occurrences",
    "question": "A subarray of array a from index l to the index r is the array [a_l, a_{l+1}, ..., a_{r}]. The number of occurrences of the array b in the array a is the number of subarrays of a such that they are equal to b.You are given n arrays A_1, A_2, ..., A_n; the elements of these arrays are integers from 1 to k. You have to build an array a consisting of m integers from 1 to k in such a way that, for every given subarray A_i, the number of occurrences of A_i in the array a is not less than the number of occurrences of each non-empty subarray of A_i in a. Note that if A_i doesn't occur in a, and no subarray of A_i occurs in a, this condition is still met for A_i.Your task is to calculate the number of different arrays a you can build, and print it modulo 998244353.",
    "input_details": "The first line contains three integers n, m and k (1 <= n, m, k <= 3 . 10^5) — the number of the given arrays, the desired length of the array a, and the upper bound on the values in the arrays.Then n lines follow. The i-th line represents the array A_i. The first integer in the i-th line is c_i (1 <= c_i <= m) — the number of elements in A_i; then, c_i integers from 1 to k follow — the elements of the array A_i.Additional constraint on the input: \\sum\\limits_{i=1}^n c_i <= 3 . 10^5; i. e., the number of elements in the given arrays in total does not exceed 3 . 10^5.",
    "output_details": "Print one integer — the number of different arrays a you can build, taken modulo 998244353.",
    "sample_input": "2 4 3\n2 1 2\n1 3",
    "sample_output": "5",
    "tags": [
      "combinatorics",
      "dfs and similar",
      "dp",
      "dsu",
      "fft",
      "graphs",
      "*2700"
    ]
  },
  {
    "name": "Coloring",
    "question_id": "coloring",
    "question": "A matrix of size n * m, such that each cell of it contains either 0 or 1, is considered beautiful if the sum in every contiguous submatrix of size 2 * 2 is exactly 2, i. e. every \"square\" of size 2 * 2 contains exactly two 1's and exactly two 0's.You are given a matrix of size n * m. Initially each cell of this matrix is empty. Let's denote the cell on the intersection of the x-th row and the y-th column as (x, y). You have to process the queries of three types:  x y -1 — clear the cell (x, y), if there was a number in it;  x y 0 — write the number 0 in the cell (x, y), overwriting the number that was there previously (if any);  x y 1 — write the number 1 in the cell (x, y), overwriting the number that was there previously (if any). After each query, print the number of ways to fill the empty cells of the matrix so that the resulting matrix is beautiful. Since the answers can be large, print them modulo 998244353.",
    "input_details": "The first line contains three integers n, m and k (2 <= n, m <= 10^6; 1 <= k <= 3 . 10^5) — the number of rows in the matrix, the number of columns, and the number of queries, respectively.Then k lines follow, the i-th of them contains three integers x_i, y_i, t_i (1 <= x_i <= n; 1 <= y_i <= m; -1 <= t_i <= 1) — the parameters for the i-th query.",
    "output_details": "For each query, print one integer — the number of ways to fill the empty cells of the matrix after the respective query, taken modulo 998244353.",
    "sample_input": "2 2 7\n1 1 1\n1 2 1\n2 1 1\n1 1 0\n1 2 -1\n2 1 -1\n1 1 -1",
    "sample_output": "3\n1\n0\n1\n2\n3\n6",
    "tags": [
      "combinatorics",
      "constructive algorithms",
      "implementation",
      "math",
      "*2500"
    ]
  },
  {
    "name": "The Strongest Build",
    "question_id": "the-strongest-build",
    "question": "Ivan is playing yet another roguelike computer game. He controls a single hero in the game. The hero has n equipment slots. There is a list of c_i items for the i-th slot, the j-th of them increases the hero strength by a_{i,j}. The items for each slot are pairwise distinct and are listed in the increasing order of their strength increase. So, a_{i,1} < a_{i,2} < ... < a_{i,c_i}.For each slot Ivan chooses exactly one item. Let the chosen item for the i-th slot be the b_i-th item in the corresponding list. The sequence of choices [b_1, b_2, ..., b_n] is called a build.The strength of a build is the sum of the strength increases of the items in it. Some builds are banned from the game. There is a list of m pairwise distinct banned builds. It's guaranteed that there's at least one build that's not banned.What is the build with the maximum strength that is not banned from the game? If there are multiple builds with maximum strength, print any of them.",
    "input_details": "The first line contains a single integer n (1 <= n <= 10) — the number of equipment slots.The i-th of the next n lines contains the description of the items for the i-th slot. First, one integer c_i (1 <= c_i <= 2 . 10^5) — the number of items for the i-th slot. Then c_i integers a_{i,1}, a_{i,2}, ..., a_{i,c_i} (1 <= a_{i,1} < a_{i,2} < ... < a_{i,c_i} <= 10^8).The sum of c_i doesn't exceed 2 . 10^5.The next line contains a single integer m (0 <= m <= 10^5) — the number of banned builds.Each of the next m lines contains a description of a banned build — a sequence of n integers b_1, b_2, ..., b_n (1 <= b_i <= c_i).The builds are pairwise distinct, and there's at least one build that's not banned.",
    "output_details": "Print the build with the maximum strength that is not banned from the game. If there are multiple builds with maximum strength, print any of them.",
    "sample_input": "3\n3 1 2 3\n2 1 5\n3 2 4 6\n2\n3 2 3\n3 2 2",
    "sample_output": "2 2 3",
    "tags": [
      "binary search",
      "brute force",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "hashing",
      "implementation",
      "*2000"
    ]
  },
  {
    "name": "Slay the Dragon",
    "question_id": "slay-the-dragon",
    "question": "Recently, Petya learned about a new game \"Slay the Dragon\". As the name suggests, the player will have to fight with dragons. To defeat a dragon, you have to kill it and defend your castle. To do this, the player has a squad of n heroes, the strength of the i-th hero is equal to a_i.According to the rules of the game, exactly one hero should go kill the dragon, all the others will defend the castle. If the dragon's defense is equal to x, then you have to send a hero with a strength of at least x to kill it. If the dragon's attack power is y, then the total strength of the heroes defending the castle should be at least y.The player can increase the strength of any hero by 1 for one gold coin. This operation can be done any number of times.There are m dragons in the game, the i-th of them has defense equal to x_i and attack power equal to y_i. Petya was wondering what is the minimum number of coins he needs to spend to defeat the i-th dragon.Note that the task is solved independently for each dragon (improvements are not saved).",
    "input_details": "The first line contains a single integer n (2 <= n <= 2 . 10^5) — number of heroes.The second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^{12}), where a_i is the strength of the i-th hero.The third line contains a single integer m (1 <= m <= 2 . 10^5) — the number of dragons.The next m lines contain two integers each, x_i and y_i (1 <= x_i <= 10^{12}; 1 <= y_i <= 10^{18}) — defense and attack power of the i-th dragon.",
    "output_details": "Print m lines, i-th of which contains a single integer — the minimum number of coins that should be spent to defeat the i-th dragon.",
    "sample_input": "4\n3 6 2 3\n5\n3 12\n7 9\n4 14\n1 10\n8 7",
    "sample_output": "1\n2\n4\n0\n2",
    "tags": ["binary search", "greedy", "sortings", "ternary search", "*1300"]
  },
  {
    "name": "Combinatorics Homework",
    "question_id": "combinatorics-homework",
    "question": "You are given four integer values a, b, c and m.Check if there exists a string that contains:   a letters 'A';  b letters 'B';  c letters 'C';  no other letters;  exactly m pairs of adjacent equal letters (exactly m such positions i that the i-th letter is equal to the (i+1)-th one). ",
    "input_details": "The first line contains a single integer t (1 <= t <= 10^4) — the number of testcases.Each of the next t lines contains the description of the testcase — four integers a, b, c and m (1 <= a, b, c <= 10^8; 0 <= m <= 10^8).",
    "output_details": "For each testcase print \"YES\" if there exists a string that satisfies all the requirements. Print \"NO\" if there are no such strings.You may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer).",
    "sample_input": "3\n2 2 1 0\n1 1 1 1\n1 2 3 2",
    "sample_output": "YES\nNO\nYES",
    "tags": ["combinatorics", "greedy", "math", "*1100"]
  },
  {
    "name": "Regular Bracket Sequences",
    "question_id": "regular-bracket-sequences",
    "question": "A bracket sequence is a string containing only characters \"(\" and \")\". A regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \"1\" and \"+\" between the original characters of the sequence. For example, bracket sequences \"()()\" and \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and \"((1+1)+1)\"), and \")(\", \"(\" and \")\" are not.You are given an integer n. Your goal is to construct and print exactly n different regular bracket sequences of length 2n.",
    "input_details": "The first line contains one integer t (1 <= t <= 50) — the number of test cases.Each test case consists of one line containing one integer n (1 <= n <= 50).",
    "output_details": "For each test case, print n lines, each containing a regular bracket sequence of length exactly 2n. All bracket sequences you output for a testcase should be different (though they may repeat in different test cases). If there are multiple answers, print any of them. It can be shown that it's always possible.",
    "sample_input": "3\n3\n1\n3",
    "sample_output": "()()()\n((()))\n(()())\n()\n((()))\n(())()\n()(())",
    "tags": ["constructive algorithms", "*800"]
  },
  {
    "name": "Swaps",
    "question_id": "swaps",
    "question": "You are given two arrays a and b of length n. Array a contains each odd integer from 1 to 2n in an arbitrary order, and array b contains each even integer from 1 to 2n in an arbitrary order.You can perform the following operation on those arrays:   choose one of the two arrays  pick an index i from 1 to n-1  swap the i-th and the (i+1)-th elements of the chosen array  Compute the minimum number of operations needed to make array a lexicographically smaller than array b.For two different arrays x and y of the same length n, we say that x is lexicographically smaller than y if in the first position where x and y differ, the array x has a smaller element than the corresponding element in y.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases t (1 <= t <= 10^4).The first line of each test case contains a single integer n (1 <= n <= 10^5) — the length of the arrays.The second line of each test case contains n integers a_1, a_2, ...., a_n (1 <= a_i <= 2n, all a_i are odd and pairwise distinct) — array a.The third line of each test case contains n integers b_1, b_2, ...., b_n (1 <= b_i <= 2n, all b_i are even and pairwise distinct) — array b.It is guaranteed that the sum of n over all test cases does not exceed 10^5.",
    "output_details": "For each test case, print one integer: the minimum number of operations needed to make array a lexicographically smaller than array b.We can show that an answer always exists.",
    "sample_input": "3\n2\n3 1\n4 2\n3\n5 3 1\n2 4 6\n5\n7 5 9 1 3\n2 4 6 10 8",
    "sample_output": "0\n2\n3",
    "tags": ["greedy", "math", "sortings", "*1400"]
  },
  {
    "name": "Countdown",
    "question_id": "countdown",
    "question": "You are given a digital clock with n digits. Each digit shows an integer from 0 to 9, so the whole clock shows an integer from 0 to 10^n-1. The clock will show leading zeroes if the number is smaller than 10^{n-1}.You want the clock to show 0 with as few operations as possible. In an operation, you can do one of the following:   decrease the number on the clock by 1, or  swap two digits (you can choose which digits to swap, and they don't have to be adjacent). Your task is to determine the minimum number of operations needed to make the clock show 0.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases t (1 <= t <= 10^3).The first line of each test case contains a single integer n (1 <= n <= 100) — number of digits on the clock.The second line of each test case contains a string of n digits s_1, s_2, ...., s_n (0 <= s_1, s_2, ...., s_n <= 9) — the number on the clock.Note: If the number is smaller than 10^{n-1} the clock will show leading zeroes.",
    "output_details": "For each test case, print one integer: the minimum number of operations needed to make the clock show 0.",
    "sample_input": "7\n3\n007\n4\n1000\n5\n00000\n3\n103\n4\n2020\n9\n123456789\n30\n001678294039710047203946100020",
    "sample_output": "7\n2\n0\n5\n6\n53\n115",
    "tags": ["greedy", "*800"]
  },
  {
    "name": "Stations",
    "question_id": "stations",
    "question": "There are n cities in a row numbered from 1 to n.The cities will be building broadcasting stations. The station in the i-th city has height h_i and range w_i. It can broadcast information to city j if the following constraints are met:   i <= j <= w_i, and  for each k such that i < k <= j, the following condition holds: h_k < h_i.  In other words, the station in city i can broadcast information to city j if j \\ge i, j is in the range of i-th station, and i is strictly highest on the range from i to j (including city j).At the beginning, for every city i, h_i = 0 and w_i = i.Then q events will take place. During i-th event one of the following will happen:   City c_i will rebuild its station so that its height will be strictly highest among all stations and w_{c_i} will be set to g_i.  Let b_j be the number of stations that can broadcast information to city j. Print the sum of b_j over all j satisfying l_i <= j <= r_i. Your task is to react to all events and print answers to all queries.",
    "input_details": "The first line contains two integers n and q (1 <= n, q <= 2.10^5) — number of cities and number of events.Then q lines follow. The i-th line begins with an integer p_i (p_i = 1 or p_i = 2).If p_i = 1 a station will be rebuilt. Then two integers c_i and g_i (1 <= c_i <= g_i <= n) follow — the city in which the station is rebuilt and its new broadcasting range.If p_i = 2 you are given a query. Then two integers l_i and r_i (1 <= l_i <= r_i <= n) follow — the range of cities in the query.",
    "output_details": "For each query, print in a single line the sum of b_j over the given interval.",
    "sample_input": "1 3\n2 1 1\n1 1 1\n2 1 1",
    "sample_output": "1\n1",
    "tags": ["data structures", "*3400"]
  },
  {
    "name": "Polygon",
    "question_id": "polygon",
    "question": "You are given a strictly convex polygon with n vertices.You will make k cuts that meet the following conditions:   each cut is a segment that connects two different nonadjacent vertices;  two cuts can intersect only at vertices of the polygon. Your task is to maximize the area of the smallest region that will be formed by the polygon and those k cuts.",
    "input_details": "The first line contains two integers n, k (3 <= n <= 200, 0 <= k <= n-3).The following n lines describe vertices of the polygon in anticlockwise direction. The i-th line contains two integers x_i, y_i (|x_i|, |y_i| <= 10^8) — the coordinates of the i-th vertex.It is guaranteed that the polygon is convex and that no two adjacent sides are parallel.",
    "output_details": "Print one integer: the maximum possible area of the smallest region after making k cuts multiplied by 2.",
    "sample_input": "8 4\n-2 -4\n2 -2\n4 2\n1 5\n0 5\n-4 4\n-5 0\n-5 -1",
    "sample_output": "11",
    "tags": ["binary search", "dp", "geometry", "*3000"]
  },
  {
    "name": "Bridge Club",
    "question_id": "bridge-club",
    "question": "There are currently n hot topics numbered from 0 to n-1 at your local bridge club and 2^n players numbered from 0 to 2^n-1. Each player holds a different set of views on those n topics, more specifically, the i-th player holds a positive view on the j-th topic if i\\ \\&\\ 2^j > 0, and a negative view otherwise. Here \\& denotes the bitwise AND operation.You are going to organize a bridge tournament capable of accommodating at most k pairs of players (bridge is played in teams of two people). You can select teams arbitrarily while each player is in at most one team, but there is one catch: two players cannot be in the same pair if they disagree on 2 or more of those n topics, as they would argue too much during the play.You know that the i-th player will pay you a_i dollars if they play in this tournament. Compute the maximum amount of money that you can earn if you pair the players in your club optimally.",
    "input_details": "The first line contains two integers n, k (1 <= n <= 20, 1 <= k <= 200) — the number of hot topics and the number of pairs of players that your tournament can accommodate.The second line contains 2^n integers a_0, a_1, ..., a_{2^n-1} (0 <= a_i <= 10^6) — the amounts of money that the players will pay to play in the tournament.",
    "output_details": "Print one integer: the maximum amount of money that you can earn if you pair the players in your club optimally under the above conditions.",
    "sample_input": "3 1\n8 3 5 7 1 10 3 2",
    "sample_output": "13",
    "tags": ["flows", "graph matchings", "graphs", "greedy", "*2800"]
  },
  {
    "name": "Paint",
    "question_id": "paint",
    "question": "You are given a 1 by n pixel image. The i-th pixel of the image has color a_i. For each color, the number of pixels of that color is at most 20.You can perform the following operation, which works like the bucket tool in paint programs, on this image:   pick a color — an integer from 1 to n;  choose a pixel in the image;  for all pixels connected to the selected pixel, change their colors to the selected color (two pixels of the same color are considered connected if all the pixels between them have the same color as those two pixels). Compute the minimum number of operations needed to make all the pixels in the image have the same color.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases t (1 <= t <= 10^3).The first line of each test case contains a single integer n (1 <= n <= 3.10^3) — the number of pixels in the image.The second line of each test case contains n integers a_1, a_2, ...., a_n (1 <= a_i <= n) — the colors of the pixels in the image.Note: for each color, the number of pixels of that color is at most 20.It is guaranteed that the sum of n over all test cases does not exceed 3.10^3.",
    "output_details": "For each test case, print one integer: the minimum number of operations needed to make all the pixels in the image have the same color.",
    "sample_input": "3\n5\n1 2 3 2 1\n4\n1 1 2 2\n5\n1 2 1 4 2",
    "sample_output": "2\n1\n3",
    "tags": ["dp", "greedy", "*2700"]
  },
  {
    "name": "Xor of 3",
    "question_id": "xor-of-3",
    "question": "You are given a sequence a of length n consisting of 0s and 1s.You can perform the following operation on this sequence:   Pick an index i from 1 to n-2 (inclusive).  Change all of a_{i}, a_{i+1}, a_{i+2} to a_{i} \\oplus a_{i+1} \\oplus a_{i+2} simultaneously, where \\oplus denotes the bitwise XOR operation  Find a sequence of at most n operations that changes all elements of a to 0s or report that it's impossible.We can prove that if there exists a sequence of operations of any length that changes all elements of a to 0s, then there is also such a sequence of length not greater than n.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases t (1 <= t <= 10^4).The first line of each test case contains a single integer n (3 <= n <= 2.10^5) — the length of a.The second line of each test case contains n integers a_1, a_2, ...., a_n (a_i = 0 or a_i = 1) — elements of a.It is guaranteed that the sum of n over all test cases does not exceed 2.10^5.",
    "output_details": "For each test case, do the following:   if there is no way of making all the elements of a equal to 0 after performing the above operation some number of times, print \"NO\".  otherwise, in the first line print \"YES\", in the second line print k (0 <= k <= n) — the number of operations that you want to perform on a, and in the third line print a sequence b_1, b_2, ..., b_k (1 <= b_i <= n - 2) — the indices on which the operation should be applied. If there are multiple solutions, you may print any.",
    "sample_input": "3\n3\n0 0 0\n5\n1 1 1 1 0\n4\n1 0 0 1",
    "sample_output": "YES\n0\nYES\n2\n3 1\nNO",
    "tags": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "two pointers",
      "*2500"
    ]
  },
  {
    "name": "Book",
    "question_id": "book",
    "question": "You are given a book with n chapters.Each chapter has a specified list of other chapters that need to be understood in order to understand this chapter. To understand a chapter, you must read it after you understand every chapter on its required list.Currently you don't understand any of the chapters. You are going to read the book from the beginning till the end repeatedly until you understand the whole book. Note that if you read a chapter at a moment when you don't understand some of the required chapters, you don't understand this chapter.Determine how many times you will read the book to understand every chapter, or determine that you will never understand every chapter no matter how many times you read the book.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases t (1 <= t <= 2.10^4).The first line of each test case contains a single integer n (1 <= n <= 2.10^5) — number of chapters.Then n lines follow. The i-th line begins with an integer k_i (0 <= k_i <= n-1) — number of chapters required to understand the i-th chapter. Then k_i integers a_{i,1}, a_{i,2}, ..., a_{i, k_i} (1 <= a_{i, j} <= n, a_{i, j} \n i, a_{i, j} \n a_{i, l} for j \n l) follow — the chapters required to understand the i-th chapter.It is guaranteed that the sum of n and sum of k_i over all testcases do not exceed 2.10^5.",
    "output_details": "For each test case, if the entire book can be understood, print how many times you will read it, otherwise print -1.",
    "sample_input": "5\n4\n1 2\n0\n2 1 4\n1 2\n5\n1 5\n1 1\n1 2\n1 3\n1 4\n5\n0\n0\n2 1 2\n1 2\n2 2 1\n4\n2 2 3\n0\n0\n2 3 2\n5\n1 2\n1 3\n1 4\n1 5\n0",
    "sample_output": "2\n-1\n1\n2\n5",
    "tags": [
      "binary search",
      "brute force",
      "data structures",
      "dp",
      "graphs",
      "implementation",
      "sortings",
      "*1800"
    ]
  },
  {
    "name": "Two Railroads",
    "question_id": "two-railroads",
    "question": "There are n cities in Berland, and they are connected by two railroads — the Main railroad and the Auxiliary railroad. Each city has two railway stations, one connected to the Main railroad (called the Main station), and the other connected to the Auxiliary railroad.The railroads are identical in their structure. The Main railroad consists of n-1 railroad segments; the i-th railroad segment connects the Main station of the city i with the Main station of the city i+1. Similarly, the Auxiliary railroad consists of n-1 railroad segments; the i-th railroad segment connects the Auxiliary station of the city i with the Auxiliary station of the city i+1.These railroads are used to transfer different goods and resources from one city to another. In particular, the Ministry of Energetics is interested in using these railroads to transfer coal.The Ministry has estimated the following capabilities of the railroads:  for every i \\in [1, n-1], at most a_i tons of coal per day can be transferred from the Main station i to the Main station i+1 (only in this direction);  for every i \\in [1, n-1], at most b_i tons of coal per day can be transferred from the Auxiliary station i to the Auxiliary station i+1 (only in this direction);  for every i \\in [1, n], at most c_i tons of coal per day can be transferred from the Main station i to the Auxiliary station i, or in the opposite direction. To analyze the capacity of the whole railroad network, the Ministry requires a software that would process and answer queries of the following format:  calculate the maximum number of tons of coal that can be transferred per day from the Main station l_i to the Main station r_i. Your task is to implement this software.",
    "input_details": "The first line contains one integer n (2 <= n <= 3 . 10^5) — the number of cities.The second line contains n-1 integers a_1, a_2, ..., a_{n-1} (1 <= a_i <= 10^9).The third line contains n-1 integers b_1, b_2, ..., b_{n-1} (1 <= b_i <= 10^9).The fourth line contains n integers c_1, c_2, ..., c_{n} (1 <= c_i <= 10^9).The fifth line contains one integer q (1 <= q <= 3 . 10^5) — the number of queries.Then q lines follow, the i-th line contains two integers l_i and r_i (1 <= l_i < r_i <= n) — the parameters of the i-th query.",
    "output_details": "Print q integers, where the i-th integer should be the answer to the i-th query, i. e. the maximum number of tons of coal that can be transferred per day from the Main station l_i to the Main station r_i.",
    "sample_input": "5\n3 4 7 4\n8 5 3 5\n10 5 3 4 10\n4\n1 4\n1 2\n3 4\n2 4",
    "sample_output": "9 8 10 9",
    "tags": ["*special problem"]
  },
  {
    "name": "Physical Examination",
    "question_id": "physical-examination",
    "question": "Polycarp plans to undergo a full physical examination at his local clinic. There are n doctors, numbered from 1 to n. The i-th doctor takes patients from minute L_i to minute R_i, so Polycarp can visit him at any minute in this range. It takes each doctor exactly one minute to examine Polycarp's health.Polycarp wants to arrive at the clinic at some minute x and visit all n doctors in some order without waiting or visiting any doctor several times.More formally, he chooses an integer x and a permutation p_1, p_2, ..., p_n (a sequence of n integers from 1 to n such that each integer appears exactly once), then proceeds to visit:   doctor p_1 at minute x;  doctor p_2 at minute x+1;  ...  doctor p_n at minute x+n-1. The p_i-th doctor should be able to take patients at minute x+i-1, so the following should hold: L[p_i] <= x + i - 1 <= R[p_i].Determine if it's possible for Polycarp to choose such a minute x and a permutation p that he'll be able to visit all n doctors in without waiting or visiting any doctor several times. If there are multiple answers, print any of them.",
    "input_details": "The first line contains a single integer t (1 <= t <= 100) — the number of testcases.Then the descriptions of t testcases follow.The first line of the testcase contains a single integer n (1 <= n <= 10^5) — the number of doctors.The second line of the testcase contains n integers L_1, L_2, ... L_n (1 <= L_i <= 10^9).The third line of the testcase contains n integers R_1, R_2, ... R_n (L_i <= R_i <= 10^9).The sum of n over all testcases doesn't exceed 10^5.",
    "output_details": "For each testcase print an answer.If there exists such a minute x and a permutation p that Polycarp is able to visit all n doctors without waiting or visiting any doctor several times, then print x in the first line and a permutation p in the second line. If there are multiple answers, print any of them.Otherwise, print -1 in the only line.",
    "sample_input": "5\n3\n2 3 1\n3 3 2\n8\n6 6 5 4 9 4 3 6\n7 6 10 6 9 6 6 8\n2\n4 2\n4 2\n3\n2 2 2\n3 3 3\n1\n5\n10",
    "sample_output": "1\n3 1 2 \n3\n7 4 6 2 1 8 5 3 \n-1\n-1\n7\n1",
    "tags": ["*special problem", "binary search", "data structures"]
  },
  {
    "name": "Laser Beams",
    "question_id": "laser-beams",
    "question": "Ira is developing a computer game. This game features randomized generation and difficulty of levels. To achieve randomized difficulty, some enemies in each level are randomly replaced with stronger ones.To describe how do the levels in the game look, let's introduce a coordinate system in such a way that Ox axis goes from left to right, and Oy axis goes from bottom to top. A level is a rectangle with opposite corners in points (0, 0) and (a, b). Each enemy's position is a point in this rectangle.As for now, Ira has implemented one type of enemy in the game, in two different versions — basic and upgraded. Both versions of enemies Ira has implemented fire laser rays in several directions:  basic enemies fire four laser rays in four directions: to the right (in the same direction as the vector (1, 0)), to the left (in the same direction as the vector (-1, 0)), up (in the same direction as the vector (0, 1)), and down (in the same direction as the vector (0, -1));  upgraded enemies fire eight laser rays in eight directions: four directions listed for basic enemies, and four directions corresponding to vectors (1, 1), (1, -1), (-1, 1), (-1, -1). Laser rays pass through enemies and are blocked only by the borders of the level (sides of the rectangle that denotes the level). Enemies are unaffected by lasers.The level Ira is working on has n enemies. The i-th enemy is in the point (x_i, y_i), and it has a probability of p_i to be upgraded (it's either upgraded with probability p_i, or basic with probability 1-p_i). All these events are independent.Ira wants to estimate the expected difficulty. She considers that a good way to evaluate the difficulty of the level is to count the number of parts in which the level is divided by the laser rays. So, she wants to calculate the expected number of these parts.Help her to do the evaluation of the level!",
    "input_details": "The first line contains three integers n, a and b (1 <= n <= 100; 2 <= a, b <= 100) — the number of enemies in the level and the dimensions of the level.Then n lines follow, the i-th of them contains three integers x_i, y_i and p'_i (1 <= x_i <= a - 1; 1 <= y_i <= b - 1; 1 <= p'_i <= 999999), meaning that the i-th enemy is located at (x_i, y_i) and has a probability of \\frac{p'_i}{10^6} to be upgraded.No two enemies are located in the same point.",
    "output_details": "Print one integer — the expected number of parts in which the lasers divide the level, taken modulo 998244353 (i. e. let the expected number of parts be \\frac{x}{y} as an irreducible fraction; you have to print x . y^{-1} mod 998244353, where y^{-1} is a number such that y . y^{-1} mod 998244353 = 1).",
    "sample_input": "1 2 2\n1 1 500000",
    "sample_output": "6",
    "tags": ["*special problem", "geometry", "probabilities"]
  },
  {
    "name": "A Battle Against a Dragon",
    "question_id": "a-battle-against-a-dragon",
    "question": "A squad of n warriors is defending a castle from a dragon attack. There are m barricades between the castle and the dragon.The warriors are numbered from 1 to n. The i-th warrior knows k_i attacks: the j-th of them deals a_{i,j} damage to the dragon and can only be applied if there are exactly b_{i,j} barricades between the castle and the dragon.The warriors make turns one after another, starting from warrior 1. After warrior n makes his turn, the total damage to the dragon is calculated. The i-th warrior performs exactly one of three possible moves in his turn:  destroys one barricade (if there are any left);  deploys one of his k_i attacks;  skips a turn. The total damage is the sum of damages dealt by the warriors who chose to deploy their attacks in their turn. What is the maximum total damage the warriors can deal to the dragon?",
    "input_details": "The first line contains two integers n and m (1 <= n, m <= 3 . 10^5) — the number of warriors and the initial number of barricades.Then the descriptions of attacks for each warrior follow. The i-th description consists of three lines.The first line contains a single integer k_i (1 <= k_i <= m + 1) — the number of attacks the i-th warrior knows.The second line contains k_i integers a_{i,1}, a_{i,2}, ..., a_{i,k_i} (1 <= a_{i,j} <= 10^9) — the damage of each attack.The third line contains k_i integers b_{i,1}, b_{i,2}, ..., b_{i,k_i} (0 <= b_{i,j} <= m) — the required number of barricades for each attack. b_{i,j} for the i-th warrior are pairwise distinct. The attacks are listed in the increasing order of the barricades requirement, so b_{i,1} < b_{i,2} < ... < b_{i,k_i}.The sum of k_i over all warriors doesn't exceed 3 . 10^5.",
    "output_details": "Print a single integer — the maximum total damage the warriors can deal to the dragon.",
    "sample_input": "2 4\n1\n2\n4\n2\n10 5\n3 4",
    "sample_output": "10",
    "tags": ["*special problem", "data structures", "dp"]
  },
  {
    "name": "Kotlinforces",
    "question_id": "kotlinforces",
    "question": "Kotlinforces is a web platfrom that hosts programming competitions.The staff of Kotlinforces is asked to schedule n programming competitions on the next m days. Each competition is held in multiple stages; the regulations of the i-th competition state that this competition should consist of exactly k_i stages, and each stage, starting from the second one, should be scheduled exactly t_i days after the previous stage. In other words, if the first stage of the i-th competition is scheduled on day x, the second stage should be scheduled on day x+t_i, the third stage — on day x+2t_i, ..., the k_i-th stage (which is the last one) — on day x+(k_i-1)t_i.All n competitions should be scheduled in such a way that they start and finish during the next m days, and on any of these m days, at most one stage of one competition is held (two stages of different competitions should not be scheduled on the same day).Is it possible to schedule all n competitions to meet these constraints?",
    "input_details": "The first line contains two integers n and m (1 <= n, m <= 5000) — the number of competitions and the number of days, respectively.Then n lines follow, each describing a competition which should be scheduled. The i-th line contains two integers k_i and t_i (2 <= k_i <= 5000; 1 <= t_i <= 2) — the parameters of the i-th competition.",
    "output_details": "If it is impossible to schedule all n competitions on the next m days so that there is at most one stage during each day, print -1.Otherwise, print n integers. The i-th integer should represent the day when the first stage of the i-th competition is scheduled; days are numbered from 1 to m. If there are multiple answers, print any of them.",
    "sample_input": "3 7\n3 2\n2 2\n2 2",
    "sample_output": "2 5 1",
    "tags": ["*special problem", "constructive algorithms", "dp"]
  },
  {
    "name": "Fix the String",
    "question_id": "fix-the-string",
    "question": "A regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \"1\" and \"+\" between the original characters of the sequence. For example:  bracket sequences \"()()\" and \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and \"((1+1)+1)\");  bracket sequences \")(\", \"(\" and \")\" are not. You are given two strings s and a, the string s has length n, the string a has length n - 3. The string s is a bracket sequence (i. e. each element of this string is either an opening bracket character or a closing bracket character). The string a is a binary string (i. e. each element of this string is either 1 or 0).The string a imposes some constraints on the string s: for every i such that a_i is 1, the string s_i s_{i+1} s_{i+2} s_{i+3} should be a regular bracket sequence. Characters of a equal to 0 don't impose any constraints.Initially, the string s may or may not meet these constraints. You can perform the following operation any number of times: replace some character of s with its inverse (i. e. you can replace an opening bracket with a closing bracket, or vice versa).Determine if it is possible to change some characters in s so that it meets all of the constraints, and if it is possible, calculate the minimum number of characters to be changed.",
    "input_details": "The first line contains one integer t (1 <= t <= 10^4) — the number of test cases.Each test case consists of three lines. The first line contains one integer n (4 <= n <= 2 . 10^5). The second line contains the string s, consisting of exactly n characters; each character of s is either '(' or ')'. The third line contains the string a, consisting of exactly n - 3 characters; each character of a is either '1' or '0'.Additional constraint on the input: the sum of n over all test cases does not exceed 2 . 10^5.",
    "output_details": "For each test case, print one integer: the minimum number of characters that need to be changed in s, or -1 if it is impossible.",
    "sample_input": "6\n4\n))((\n1\n4\n))((\n0\n4\n()()\n0\n6\n))(()(\n101\n6\n))(()(\n001\n5\n(((((\n11",
    "sample_output": "2\n0\n0\n4\n1\n-1",
    "tags": ["*special problem", "bitmasks", "dp", "greedy"]
  },
  {
    "name": "Sweepstake",
    "question_id": "sweepstake",
    "question": "Kotlin Heroes competition is nearing completion. This time n programmers took part in the competition. Now organizers are thinking how to entertain spectators as well. One of the possibilities is holding sweepstakes. So for now they decided to conduct a survey among spectators.In total, organizers asked m viewers two questions:   Who will take the first place?  Who will take the last place? After receiving answers, organizers ranked all spectators based on the number of programmers they guessed right. Suppose, there are c_2 viewers who guessed right both first and last place, c_1 viewers who guessed either first or last place right and c_0 viewers who didn't guess at all. All c_2 viewers will get rank 1, all viewers with one right answer will get rank c_2 + 1 and all remaining viewers — rank c_2 + c_1 + 1.You were one of the interviewed spectators. Also, as one of the organizers, you have access to survey results, but not to competition results. Calculate, what is the worst rank you can possibly get according to organizers' ranking system?",
    "input_details": "The first line contains two integers n and m (2 <= n <= 1000; 1 <= m <= 2 . 10^5) — the number of programmers participating in the competition and the number of surveyed spectators.Next m lines contain answers of spectators. The i-th line contains two integers f_i and l_i (1 <= f_i, l_i <= n; f_i \n l_i) — the indices of programmers who will take the first and last places in opinion of the i-th viewer.For simplicity, you are the first among spectators, so your answers are f_1 and l_1.",
    "output_details": "Print the single integer — the worst rank among spectators you can possibly get according to organizers' ranking system (bigger rank — worse, of course).",
    "sample_input": "2 3\n1 2\n2 1\n2 1",
    "sample_output": "3",
    "tags": [
      "*special problem",
      "brute force",
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "name": "Rhyme",
    "question_id": "rhyme",
    "question": "Let's say that two strings s and t rhyme if both strings have length at least k, and their last k characters are equal. For example, if k = 3, the strings abcd and cebcd rhyme, the strings ab and ab don't rhyme, the strings aaaa and aaaaa rhyme, the strings abcd and abce don't rhyme.You have n pairs of strings (s_i, t_i), and for each pair of strings you know, should they rhyme or should not.Find all possible non-negative integer values for k such that pairs that have to rhyme, rhyme and pairs that must not rhyme, don't rhyme.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases t (1 <= t <= 1000). Description of the test cases follows.The first line of each test case contains a single integer n (1 <= n <= 10^5) — the number of string pairs.Next n lines contains descriptions of pairs — one per line. The i-th line contains space-separated strings s_i and t_i and marker r_i. Strings are non-empty, consist of lowercase Latin letters and each have length at most 2 . 10^5. The marker r_i equals to 1 if strings have to rhyme, or 0 if they must not rhyme.It's guaranteed that for each test case there is at least one pair with r_i equal to 1 and that the total length of all strings over all test cases doesn't exceed 4 . 10^5.",
    "output_details": "For each test case, firstly print integer m — the number of possible non-negative integer values of k such that pairs that have to rhyme, rhyme and pairs that must not rhyme, don't rhyme. Next, print all these values of k (without repetitions). You can print them in any order.",
    "sample_input": "3\n1\nkotlin heroes 1\n2\njoin kotlin 1\nepisode eight 0\n4\nabc abcdef 0\nxyz zzz 1\naaa bba 0\nc d 0",
    "sample_output": "1\n0\n2\n1 2\n0",
    "tags": ["*special problem", "implementation"]
  },
  {
    "name": "Epic Novel",
    "question_id": "epic-novel",
    "question": "Alex has bought a new novel that was published in n volumes. He has read these volumes one by one, and each volume has taken him several (maybe one) full days to read. So, on the first day, he was reading the first volume, and on each of the following days, he was reading either the same volume he had been reading on the previous day, or the next volume.Let v_i be the number of the volume Alex was reading on the i-th day. Here are some examples:  one of the possible situations is v_1 = 1, v_2 = 1, v_3 = 2, v_4 = 3, v_5 = 3 — this situation means that Alex has spent two days (1-st and 2-nd) on the first volume, one day (3-rd) on the second volume, and two days (4-th and 5-th) on the third volume;  a situation v_1 = 2, v_2 = 2, v_3 = 3 is impossible, since Alex started with the first volume (so v_1 cannot be anything but 1);  a situation v_1 = 1, v_2 = 2, v_3 = 3, v_4 = 1 is impossible, since Alex won't return to the first volume after reading the third one;  a situation v_1 = 1, v_2 = 3 is impossible, since Alex doesn't skip volumes. You know that Alex was reading the volume v_a on the day a, and the volume v_c on the day c. Now you want to guess which volume was he reading on the day b, which is between the days a and c (so a < b < c). There may be some ambiguity, so you want to make any valid guess (i. e. choose some volume number v_b so it's possible that Alex was reading volume v_a on day a, volume v_b on day b, and volume v_c on day c).",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases t (1 <= t <= 100). Description of the test cases follows.The first line of each test case contains a single integer n (1 <= n <= 100) — the number of volumes the novel consists of.The second line of each test case contains two integers a and v_a (1 <= a <= 98; 1 <= v_a <= a) denoting that Alex was reading volume v_a at day a.The third line of each test case contains two integers c and v_c (a + 2 <= c <= 100; v_a <= v_c <= c) denoting that Alex was reading volume v_c at day c.The fourth line of each test case contains one integer b (a < b < c) — the day you are interested in.It's guaranteed that the input is not controversial, in other words, Alex could read volume v_a at day a and volume v_c at day c.",
    "output_details": "For each test case, print the possible index of volume Alex could read at day b. If there are multiple answers, print any.",
    "sample_input": "4\n1\n1 1\n100 1\n99\n4\n10 1\n20 4\n16\n100\n1 1\n100 100\n42\n100\n1 1\n100 2\n99",
    "sample_output": "1\n2\n42\n1",
    "tags": ["*special problem", "math"]
  },
  {
    "name": "Sequence of Comparisons",
    "question_id": "sequence-of-comparisons",
    "question": "Once upon a time, Petya had an array of integers a of length n. But over time, the array itself was lost, and only n-1 results of comparisons of neighboring array elements remained. In other words, for every i from 1 to n-1, Petya knows exactly one of these three facts:  a_i < a_{i+1};  a_i = a_{i+1};  a_i > a_{i+1}. Petya wonders if it is possible to uniquely determine the result of comparing a_1 and a_n.You have to help Petya determine the result of comparing a_1 and a_n or report that the result cannot be determined unambiguously.",
    "input_details": "The first line contains a single integer t (1 <= t <= 500) — the number of test cases.The only line of the test case contains the string s (1 <= |s| <= 100), where s_i is:  <, if a_i < a_{i + 1};  >, if a_i > a_{i + 1};  =, if a_i = a_{i + 1}. ",
    "output_details": "For each test case, print a single string equal to:  <, if a_1 < a_n;  >, if a_1 > a_n;  =, if a_1 = a_n;  ?, if it is impossible to uniquely determine the result of the comparison. ",
    "sample_input": "4\n>>>\n<><=<\n=\n<<==",
    "sample_output": ">\n?\n=\n<",
    "tags": ["*special problem"]
  },
  {
    "name": "Minimum Difference",
    "question_id": "minimum-difference",
    "question": "You are given an integer array a of size n.You have to perform m queries. Each query has one of two types:   \"1 l r k\" — calculate the minimum value dif such that there are exist k distinct integers x_1, x_2, ..., x_k such that cnt_i > 0 (for every i \\in [1, k]) and |cnt_i - cnt_j| <= dif (for every i \\in [1, k], j \\in [1, k]), where cnt_i is the number of occurrences of x_i in the subarray a[l..r]. If it is impossible to choose k integers, report it;  \"2 p x\" — assign a_{p} := x. ",
    "input_details": "The first line contains two integers n and m (1 <= n, m <= 10^5) — the size of the array a and the number of queries.The second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^5).Next m lines contain queries (one per line). Each query has one of two types:   \"1 l r k\" (1 <= l <= r <= n; 1 <= k <= 10^5)  \"2 p x\" (1 <= p <= n; 1 <= x <= 10^5). It's guaranteed that there is at least one query of the first type.",
    "output_details": "For each query of the first type, print the minimum value of dif that satisfies all required conditions, or -1 if it is impossible to choose k distinct integers.",
    "sample_input": "12 11\n2 1 1 2 1 1 3 2 1 1 3 3\n1 2 10 3\n1 2 11 3\n2 7 2\n1 3 9 2\n1 1 12 1\n1 1 12 4\n2 12 4\n1 1 12 4\n2 1 5\n1 3 12 2\n1 1 4 3",
    "sample_output": "5\n4\n1\n0\n-1\n5\n0\n1",
    "tags": ["*special problem"]
  },
  {
    "name": "Chainword",
    "question_id": "chainword",
    "question": "A chainword is a special type of crossword. As most of the crosswords do, it has cells that you put the letters in and some sort of hints to what these letters should be.The letter cells in a chainword are put in a single row. We will consider chainwords of length m in this task.A hint to a chainword is a sequence of segments such that the segments don't intersect with each other and cover all m letter cells. Each segment contains a description of the word in the corresponding cells.The twist is that there are actually two hints: one sequence is the row above the letter cells and the other sequence is the row below the letter cells. When the sequences are different, they provide a way to resolve the ambiguity in the answers.You are provided with a dictionary of n words, each word consists of lowercase Latin letters. All words are pairwise distinct.An instance of a chainword is the following triple:   a string of m lowercase Latin letters;  the first hint: a sequence of segments such that the letters that correspond to each segment spell a word from the dictionary;  the second hint: another sequence of segments such that the letters that correspond to each segment spell a word from the dictionary. Note that the sequences of segments don't necessarily have to be distinct.Two instances of chainwords are considered different if they have different strings, different first hints or different second hints.Count the number of different instances of chainwords. Since the number might be pretty large, output it modulo 998\\,244\\,353.",
    "input_details": "The first line contains two integers n and m (1 <= n <= 8, 1 <= m <= 10^9) — the number of words in the dictionary and the number of letter cells.Each of the next n lines contains a word — a non-empty string of no more than 5 lowercase Latin letters. All words are pairwise distinct. ",
    "output_details": "Print a single integer — the number of different instances of chainwords of length m for the given dictionary modulo 998\\,244\\,353.",
    "sample_input": "3 5\nababa\nab\na",
    "sample_output": "11",
    "tags": ["*special problem", "data structures", "strings"]
  },
  {
    "name": "XOR Guessing",
    "question_id": "xor-guessing",
    "question": "This is an interactive problem. Remember to flush your output while communicating with the testing program. You may use fflush(stdout) in C++, system.out.flush() in Java, stdout.flush() in Python or flush(output) in Pascal to flush the output. If you use some other programming language, consult its documentation. You may also refer to the guide on interactive problems: https://codeforces.com/blog/entry/45307.The jury picked an integer x not less than 0 and not greater than 2^{14} - 1. You have to guess this integer.To do so, you may ask no more than 2 queries. Each query should consist of 100 integer numbers a_1, a_2, ..., a_{100} (each integer should be not less than 0 and not greater than 2^{14} - 1). In response to your query, the jury will pick one integer i (1 <= i <= 100) and tell you the value of a_i \\oplus x (the bitwise XOR of a_i and x). There is an additional constraint on the queries: all 200 integers you use in the queries should be distinct.It is guaranteed that the value of x is fixed beforehand in each test, but the choice of i in every query may depend on the integers you send.",
    "input_details": "tTo give the answer, your program should print one line ! x with a line break in the end. After that, it should flush the output and terminate gracefully.",
    "output_details": "ctionBefore giving the answer, you may submit no more than 2 queries. To ask a query, print one line in the following format: ? a_1 a_2 ... a_{100}, where every a_j should be an integer from the range [0, 2^{14} - 1]. The line should be ended with a line break character. After submitting a query, flush the output and read the answer to your query — the value of a_i \\oplus x for some i \\in [1, 100]. No integer can be used in queries more than once.If you submit an incorrect query (or ask more than 2 queries), the answer to it will be one integer -1. After receiving such an answer, your program should terminate immediately — otherwise you may receive verdict \"Runtime error\", \"Time limit exceeded\" or some other verdict instead of \"Wrong answer\".",
    "sample_input": "0\n32",
    "sample_output": "? 3 5 6\n? 32 24 37\n! 5",
    "tags": ["*special problem", "interactive"]
  },
  {
    "name": "Square Filling",
    "question_id": "square-filling",
    "question": "You are given two matrices A and B. Each matrix contains exactly n rows and m columns. Each element of A is either 0 or 1; each element of B is initially 0.You may perform some operations with matrix B. During each operation, you choose any submatrix of B having size 2 * 2, and replace every element in the chosen submatrix with 1. In other words, you choose two integers x and y such that 1 <= x < n and 1 <= y < m, and then set B_{x, y}, B_{x, y + 1}, B_{x + 1, y} and B_{x + 1, y + 1} to 1.Your goal is to make matrix B equal to matrix A. Two matrices A and B are equal if and only if every element of matrix A is equal to the corresponding element of matrix B.Is it possible to make these matrices equal? If it is, you have to come up with a sequence of operations that makes B equal to A. Note that you don't have to minimize the number of operations.",
    "input_details": "The first line contains two integers n and m (2 <= n, m <= 50).Then n lines follow, each containing m integers. The j-th integer in the i-th line is A_{i, j}. Each integer is either 0 or 1.",
    "output_details": "If it is impossible to make B equal to A, print one integer -1.Otherwise, print any sequence of operations that transforms B into A in the following format: the first line should contain one integer k — the number of operations, and then k lines should follow, each line containing two integers x and y for the corresponding operation (set B_{x, y}, B_{x, y + 1}, B_{x + 1, y} and B_{x + 1, y + 1} to 1). The condition 0 <= k <= 2500 should hold.",
    "sample_input": "3 3\n1 1 1\n1 1 1\n0 1 1",
    "sample_output": "3\n1 1\n1 2\n2 2",
    "tags": ["*special problem"]
  },
  {
    "name": "Erasing Zeroes",
    "question_id": "erasing-zeroes",
    "question": "You are given a string s. Each character is either 0 or 1.You want all 1's in the string to form a contiguous subsegment. For example, if the string is 0, 1, 00111 or 01111100, then all 1's form a contiguous subsegment, and if the string is 0101, 100001 or 11111111111101, then this condition is not met.You may erase some (possibly none) 0's from the string. What is the minimum number of 0's that you have to erase?",
    "input_details": "The first line contains one integer t (1 <= t <= 100) — the number of test cases.Then t lines follow, each representing a test case. Each line contains one string s (1 <= |s| <= 100); each character of s is either 0 or 1.",
    "output_details": "Print t integers, where the i-th integer is the answer to the i-th testcase (the minimum number of 0's that you have to erase from s).",
    "sample_input": "3\n010011\n0\n1111000",
    "sample_output": "2\n0\n0",
    "tags": ["*special problem", "strings"]
  },
  {
    "name": "Reachable Numbers",
    "question_id": "reachable-numbers",
    "question": "Let's denote a function f(x) in such a way: we add 1 to x, then, while there is at least one trailing zero in the resulting number, we remove that zero. For example,   f(599) = 6: 599 + 1 = 600 \\rightarrow 60 \\rightarrow 6;  f(7) = 8: 7 + 1 = 8;  f(9) = 1: 9 + 1 = 10 \\rightarrow 1;  f(10099) = 101: 10099 + 1 = 10100 \\rightarrow 1010 \\rightarrow 101. We say that some number y is reachable from x if we can apply function f to x some (possibly zero) times so that we get y as a result. For example, 102 is reachable from 10098 because f(f(f(10098))) = f(f(10099)) = f(101) = 102; and any number is reachable from itself.You are given a number n; your task is to count how many different numbers are reachable from n.",
    "input_details": "The first line contains one integer n (1 <= n <= 10^9).",
    "output_details": "Print one integer: the number of different numbers that are reachable from n.",
    "sample_input": "1098",
    "sample_output": "20",
    "tags": ["*special problem", "implementation"]
  },
  {
    "name": "Shooting",
    "question_id": "shooting",
    "question": "Recently Vasya decided to improve his pistol shooting skills. Today his coach offered him the following exercise. He placed n cans in a row on a table. Cans are numbered from left to right from 1 to n. Vasya has to knock down each can exactly once to finish the exercise. He is allowed to choose the order in which he will knock the cans down.Vasya knows that the durability of the i-th can is a_i. It means that if Vasya has already knocked x cans down and is now about to start shooting the i-th one, he will need (a_i . x + 1) shots to knock it down. You can assume that if Vasya starts shooting the i-th can, he will be shooting it until he knocks it down.Your task is to choose such an order of shooting so that the number of shots required to knock each of the n given cans down exactly once is minimum possible.",
    "input_details": "The first line of the input contains one integer n (2 <= n <= 1\\,000) — the number of cans.The second line of the input contains the sequence a_1, a_2, ..., a_n (1 <= a_i <= 1\\,000), where a_i is the durability of the i-th can.",
    "output_details": "In the first line print the minimum number of shots required to knock each of the n given cans down exactly once.In the second line print the sequence consisting of n distinct integers from 1 to n — the order of indices of cans that minimizes the number of shots required. If there are several answers, you can print any of them.",
    "sample_input": "3\n20 10 20",
    "sample_output": "43\n1 3 2",
    "tags": ["*special problem", "greedy", "implementation"]
  },
  {
    "name": "Yellow Cards",
    "question_id": "yellow-cards",
    "question": "The final match of the Berland Football Cup has been held recently. The referee has shown n yellow cards throughout the match. At the beginning of the match there were a_1 players in the first team and a_2 players in the second team.The rules of sending players off the game are a bit different in Berland football. If a player from the first team receives k_1 yellow cards throughout the match, he can no longer participate in the match — he's sent off. And if a player from the second team receives k_2 yellow cards, he's sent off. After a player leaves the match, he can no longer receive any yellow cards. Each of n yellow cards was shown to exactly one player. Even if all players from one team (or even from both teams) leave the match, the game still continues.The referee has lost his records on who has received each yellow card. Help him to determine the minimum and the maximum number of players that could have been thrown out of the game.",
    "input_details": "The first line contains one integer a_1 (1 <= a_1 <= 1\\,000) — the number of players in the first team.The second line contains one integer a_2 (1 <= a_2 <= 1\\,000) — the number of players in the second team.The third line contains one integer k_1 (1 <= k_1 <= 1\\,000) — the maximum number of yellow cards a player from the first team can receive (after receiving that many yellow cards, he leaves the game).The fourth line contains one integer k_2 (1 <= k_2 <= 1\\,000) — the maximum number of yellow cards a player from the second team can receive (after receiving that many yellow cards, he leaves the game).The fifth line contains one integer n (1 <= n <= a_1 . k_1 + a_2 . k_2) — the number of yellow cards that have been shown during the match.",
    "output_details": "Print two integers — the minimum and the maximum number of players that could have been thrown out of the game.",
    "sample_input": "2\n3\n5\n1\n8",
    "sample_output": "0 4",
    "tags": ["*special problem", "math"]
  },
  {
    "name": "A+B (Trial Problem)",
    "question_id": "a-b-trial-problem",
    "question": "You are given two integers a and b. Print a+b.",
    "input_details": "The first line contains an integer t (1 <= t <= 10^4) — the number of test cases in the input. Then t test cases follow.Each test case is given as a line of two integers a and b (-1000 <= a, b <= 1000).",
    "output_details": "Print t integers — the required numbers a+b.",
    "sample_input": "4\n1 5\n314 15\n-99 99\n123 987",
    "sample_output": "6\n329\n0\n1110",
    "tags": ["*special problem"]
  },
  {
    "name": "Palindromic Hamiltonian Path",
    "question_id": "palindromic-hamiltonian-path",
    "question": "You are given a simple undirected graph with n vertices, n is even. You are going to write a letter on each vertex. Each letter should be one of the first k letters of the Latin alphabet.A path in the graph is called Hamiltonian if it visits each vertex exactly once. A string is called palindromic if it reads the same from left to right and from right to left. A path in the graph is called palindromic if the letters on the vertices in it spell a palindromic string without changing the order.A string of length n is good if:   each letter is one of the first k lowercase Latin letters;  if you write the i-th letter of the string on the i-th vertex of the graph, there will exist a palindromic Hamiltonian path in the graph. Note that the path doesn't necesserily go through the vertices in order 1, 2, ..., n.Count the number of good strings.",
    "input_details": "The first line contains three integers n, m and k (2 <= n <= 12; n is even; 0 <= m <= \\frac{n . (n-1)}{2}; 1 <= k <= 12) — the number of vertices in the graph, the number of edges in the graph and the number of first letters of the Latin alphabet that can be used.Each of the next m lines contains two integers v and u (1 <= v, u <= n; v \nq u) — the edges of the graph. The graph doesn't contain multiple edges and self-loops.",
    "output_details": "Print a single integer — number of good strings.",
    "sample_input": "4 3 3\n1 2\n2 3\n3 4",
    "sample_output": "9",
    "tags": [
      "brute force",
      "dfs and similar",
      "dp",
      "graphs",
      "hashing",
      "*3000"
    ]
  },
  {
    "name": "Playoff Restoration",
    "question_id": "playoff-restoration",
    "question": "2^k teams participate in a playoff tournament. The tournament consists of 2^k - 1 games. They are held as follows: first of all, the teams are split into pairs: team 1 plays against team 2, team 3 plays against team 4 (exactly in this order), and so on (so, 2^{k-1} games are played in that phase). When a team loses a game, it is eliminated, and each game results in elimination of one team (there are no ties). After that, only 2^{k-1} teams remain. If only one team remains, it is declared the champion; otherwise, 2^{k-2} games are played: in the first one of them, the winner of the game \"1 vs 2\" plays against the winner of the game \"3 vs 4\", then the winner of the game \"5 vs 6\" plays against the winner of the game \"7 vs 8\", and so on. This process repeats until only one team remains.After the tournament ends, the teams are assigned places according to the tournament phase when they were eliminated. In particular:  the winner of the tournament gets place 1;  the team eliminated in the finals gets place 2;  both teams eliminated in the semifinals get place 3;  all teams eliminated in the quarterfinals get place 5;  all teams eliminated in the 1/8 finals get place 9, and so on. For example, this picture describes one of the possible ways the tournament can go with k = 3, and the resulting places of the teams:  After a tournament which was conducted by the aforementioned rules ended, its results were encoded in the following way. Let p_i be the place of the i-th team in the tournament. The hash value of the tournament h is calculated as h = (\\sum \\limits_{i=1}^{2^k} i . A^{p_i}) mod 998244353, where A is some given integer.Unfortunately, due to a system crash, almost all tournament-related data was lost. The only pieces of data that remain are the values of k, A and h. You are asked to restore the resulting placing of the teams in the tournament, if it is possible at all.",
    "input_details": "The only line contains three integers k, A and h (1 <= k <= 5; 100 <= A <= 10^8; 0 <= h <= 998244352).",
    "output_details": "If it is impossible to find any placing of the teams that is consistent with the data you have, print one integer -1.Otherwise, print 2^k integers, where i-th integer should be equal to p_i (the place of the i-th team). Note that your answer should be consistent with one of the possible ways the tournament could go, and note that the initial structure of the tournament is fixed (for example, teams 1 and 2 always play in the first phase of the tournament against each other). If there are multiple ways to restore the places of the teams which are consistent with the data you have, print any of them.",
    "sample_input": "3 1337 75275197",
    "sample_output": "5 3 5 2 1 5 5 3",
    "tags": [
      "bitmasks",
      "brute force",
      "hashing",
      "implementation",
      "meet-in-the-middle",
      "*2600"
    ]
  },
  {
    "name": "Inconvenient Pairs",
    "question_id": "inconvenient-pairs",
    "question": "There is a city that can be represented as a square grid with corner points in (0, 0) and (10^6, 10^6).The city has n vertical and m horizontal streets that goes across the whole city, i. e. the i-th vertical streets goes from (x_i, 0) to (x_i, 10^6) and the j-th horizontal street goes from (0, y_j) to (10^6, y_j). All streets are bidirectional. Borders of the city are streets as well.There are k persons staying on the streets: the p-th person at point (x_p, y_p) (so either x_p equal to some x_i or y_p equal to some y_j, or both).Let's say that a pair of persons form an inconvenient pair if the shortest path from one person to another going only by streets is strictly greater than the Manhattan distance between them.Calculate the number of inconvenient pairs of persons (pairs (x, y) and (y, x) are the same pair).Let's recall that Manhattan distance between points (x_1, y_1) and (x_2, y_2) is |x_1 - x_2| + |y_1 - y_2|.",
    "input_details": "The first line contains a single integer t (1 <= t <= 1000) — the number of test cases.The first line of each test case contains three integers n, m and k (2 <= n, m <= 2 . 10^5; 2 <= k <= 3 . 10^5) — the number of vertical and horizontal streets and the number of persons.The second line of each test case contains n integers x_1, x_2, ..., x_n (0 = x_1 < x_2 < ... < x_{n - 1} < x_n = 10^6) — the x-coordinates of vertical streets.The third line contains m integers y_1, y_2, ..., y_m (0 = y_1 < y_2 < ... < y_{m - 1} < y_m = 10^6) — the y-coordinates of horizontal streets.Next k lines contains description of people. The p-th line contains two integers x_p and y_p (0 <= x_p, y_p <= 10^6; x_p \\in \\{x_1, ..., x_n\\} or y_p \\in \\{y_1, ..., y_m\\}) — the coordinates of the p-th person. All points are distinct.It guaranteed that sum of n doesn't exceed 2 . 10^5, sum of m doesn't exceed 2 . 10^5 and sum of k doesn't exceed 3 . 10^5.",
    "output_details": "For each test case, print the number of inconvenient pairs.",
    "sample_input": "2\n2 2 4\n0 1000000\n0 1000000\n1 0\n1000000 1\n999999 1000000\n0 999999\n5 4 9\n0 1 2 6 1000000\n0 4 8 1000000\n4 4\n2 5\n2 2\n6 3\n1000000 1\n3 8\n5 8\n8 8\n6 8",
    "sample_output": "2\n5",
    "tags": [
      "binary search",
      "data structures",
      "implementation",
      "sortings",
      "two pointers",
      "*1900"
    ]
  },
  {
    "name": "Jury Meeting",
    "question_id": "jury-meeting",
    "question": "n people gathered to hold a jury meeting of the upcoming competition, the i-th member of the jury came up with a_i tasks, which they want to share with each other.First, the jury decides on the order which they will follow while describing the tasks. Let that be a permutation p of numbers from 1 to n (an array of size n where each integer from 1 to n occurs exactly once).Then the discussion goes as follows:  If a jury member p_1 has some tasks left to tell, then they tell one task to others. Otherwise, they are skipped.  If a jury member p_2 has some tasks left to tell, then they tell one task to others. Otherwise, they are skipped.  ...  If a jury member p_n has some tasks left to tell, then they tell one task to others. Otherwise, they are skipped.  If there are still members with tasks left, then the process repeats from the start. Otherwise, the discussion ends. A permutation p is nice if none of the jury members tell two or more of their own tasks in a row. Count the number of nice permutations. The answer may be really large, so print it modulo 998\\,244\\,353.",
    "input_details": "The first line contains a single integer t (1 <= t <= 10^4) — the number of test cases.The first line of the test case contains a single integer n (2 <= n <= 2 . 10^5) — number of jury members.The second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9) — the number of problems that the i-th member of the jury came up with.The sum of n over all test cases does not exceed 2 . 10^5.",
    "output_details": "For each test case, print one integer — the number of nice permutations, taken modulo 998\\,244\\,353.",
    "sample_input": "4\n2\n1 2\n3\n5 5 5\n4\n1 3 3 7\n6\n3 4 2 1 3 3",
    "sample_output": "1\n6\n0\n540",
    "tags": ["combinatorics", "math", "*1500"]
  },
  {
    "name": "Chess Tournament",
    "question_id": "chess-tournament",
    "question": "A chess tournament will be held soon, where n chess players will take part. Every participant will play one game against every other participant. Each game ends in either a win for one player and a loss for another player, or a draw for both players.Each of the players has their own expectations about the tournament, they can be one of two types:  a player wants not to lose any game (i. e. finish the tournament with zero losses);  a player wants to win at least one game. You have to determine if there exists an outcome for all the matches such that all the players meet their expectations. If there are several possible outcomes, print any of them. If there are none, report that it's impossible.",
    "input_details": "The first line contains a single integer t (1 <= t <= 200) — the number of test cases.The first line of each test case contains one integer n (2 <= n <= 50) — the number of chess players.The second line contains the string s (|s| = n; s_i \\in \\{1, 2\\}). If s_i = 1, then the i-th player has expectations of the first type, otherwise of the second type.",
    "output_details": "For each test case, print the answer in the following format:In the first line, print NO if it is impossible to meet the expectations of all players.Otherwise, print YES, and the matrix of size n * n in the next n lines.The matrix element in the i-th row and j-th column should be equal to:  +, if the i-th player won in a game against the j-th player;  -, if the i-th player lost in a game against the j-th player;  =, if the i-th and j-th players' game resulted in a draw;  X, if i = j. ",
    "sample_input": "3\n3\n111\n2\n21\n4\n2122",
    "sample_output": "YES\nX==\n=X=\n==X\nNO\nYES\nX--+\n+X++\n+-X-\n--+X",
    "tags": ["constructive algorithms", "*1000"]
  },
  {
    "name": "Balanced Substring",
    "question_id": "balanced-substring",
    "question": "You are given a string s, consisting of n letters, each letter is either 'a' or 'b'. The letters in the string are numbered from 1 to n.s[l; r] is a continuous substring of letters from index l to r of the string inclusive. A string is called balanced if the number of letters 'a' in it is equal to the number of letters 'b'. For example, strings \"baba\" and \"aabbab\" are balanced and strings \"aaab\" and \"b\" are not.Find any non-empty balanced substring s[l; r] of string s. Print its l and r (1 <= l <= r <= n). If there is no such substring, then print -1 -1.",
    "input_details": "The first line contains a single integer t (1 <= t <= 1000) — the number of testcases.Then the descriptions of t testcases follow.The first line of the testcase contains a single integer n (1 <= n <= 50) — the length of the string.The second line of the testcase contains a string s, consisting of n letters, each letter is either 'a' or 'b'.",
    "output_details": "For each testcase print two integers. If there exists a non-empty balanced substring s[l; r], then print l r (1 <= l <= r <= n). Otherwise, print -1 -1.",
    "sample_input": "4\n1\na\n6\nabbaba\n6\nabbaba\n9\nbabbabbaa",
    "sample_output": "-1 -1\n1 6\n3 6\n2 5",
    "tags": ["implementation", "*800"]
  },
  {
    "name": "One-Four Overload",
    "question_id": "one-four-overload",
    "question": "Alice has an empty grid with n rows and m columns. Some of the cells are marked, and no marked cells are adjacent to the edge of the grid. (Two squares are adjacent if they share a side.) Alice wants to fill each cell with a number such that the following statements are true:   every unmarked cell contains either the number 1 or 4;  every marked cell contains the sum of the numbers in all unmarked cells adjacent to it (if a marked cell is not adjacent to any unmarked cell, this sum is 0);  every marked cell contains a multiple of 5.  Alice couldn't figure it out, so she asks Bob to help her. Help Bob find any such grid, or state that no such grid exists.",
    "input_details": "The first line of input contains two integers n and m (1 <= n, m <= 500) — the number of rows and the number of columns in the grid, respectively.Then n lines follow, each containing m characters. Each of these characters is either '.' or 'X' — an unmarked and a marked cell, respectively. No marked cells are adjacent to the edge of the grid.",
    "output_details": "Output \"'NO\" if no suitable grid exists. Otherwise, output \"'YES\"'. Then output n lines of m space-separated integers — the integers in the grid.",
    "sample_input": "5 5\n.....\n.XXX.\n.X.X.\n.XXX.\n.....",
    "sample_output": "YES\n4 1 4 4 1\n4 5 5 5 1\n4 5 1 5 4\n1 5 5 5 4\n1 4 4 1 4",
    "tags": [
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "implementation",
      "*2700"
    ]
  },
  {
    "name": "Non-Decreasing Dilemma",
    "question_id": "non-decreasing-dilemma",
    "question": "Alice has recently received an array a_1, a_2, ..., a_n for her birthday! She is very proud of her array, and when she showed her friend Bob the array, he was very happy with her present too!However, soon Bob became curious, and as any sane friend would do, asked Alice to perform q operations of two types on her array:  1 x y: update the element a_x to y (set a_x = y).  2 l r: calculate how many non-decreasing subarrays exist within the subarray [a_l, a_{l+1}, ..., a_r]. More formally, count the number of pairs of integers (p,q) such that l <= p <= q <= r and a_p <= a_{p+1} <= ... <= a_{q-1} <= a_q. Help Alice answer Bob's queries!",
    "input_details": "The first line contains two integers n and q (1 <= n, q <= 2 . 10^5) — the size of the array, and the number of queries, respectively.The second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9) — the elements of Alice's array.The next q lines consist of three integers each. The first integer of the i-th line is t_i, the operation being performed on the i-th step (t_i = 1 or t_i = 2).If t_i = 1, the next two integers are x_i and y_i (1 <= x_i <= n; 1 <= y_i <= 10^9), updating the element at position x_i to y_i (setting a_{x_i} = y_i).If t_i = 2, the next two integers are l_i and r_i (1 <= l_i <= r_i <= n), the two indices Bob asks Alice about for the i-th query.It's guaranteed that there is at least one operation of the second type.",
    "output_details": "For each query of type 2, print a single integer, the answer to the query.",
    "sample_input": "5 6\n3 1 4 1 5\n2 2 5\n2 1 3\n1 4 4\n2 2 5\n1 2 6\n2 2 5",
    "sample_output": "6\n4\n10\n7",
    "tags": ["data structures", "divide and conquer", "math", "*2200"]
  },
  {
    "name": "Expression Evaluation Error",
    "question_id": "expression-evaluation-error",
    "question": "On the board, Bob wrote n positive integers in base 10 with sum s (i. e. in decimal numeral system). Alice sees the board, but accidentally interprets the numbers on the board as base-11 integers and adds them up (in base 11).What numbers should Bob write on the board, so Alice's sum is as large as possible?",
    "input_details": "The input consists of multiple test cases. The first line contains an integer t (1 <= t <= 100) — the number of test cases. The description of the test cases follows.The only line of each test case contains two integers s and n (1 <= s <= 10^9; 1 <= n <= \\min(100, s)) — the sum and amount of numbers on the board, respectively. Numbers s and n are given in decimal notation (base 10).",
    "output_details": "For each test case, output n positive integers — the numbers Bob should write on the board, so Alice's sum is as large as possible. If there are multiple answers, print any of them.",
    "sample_input": "6\n97 2\n17 1\n111 4\n100 2\n10 9\n999999 3",
    "sample_output": "70 27 \n17 \n3 4 100 4\n10 90\n1 1 2 1 1 1 1 1 1 \n999900 90 9",
    "tags": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math",
      "*2000"
    ]
  },
  {
    "name": "Carrying Conundrum",
    "question_id": "carrying-conundrum",
    "question": "Alice has just learned addition. However, she hasn't learned the concept of \"carrying\" fully — instead of carrying to the next column, she carries to the column two columns to the left.For example, the regular way to evaluate the sum 2039 + 2976 would be as shown:   However, Alice evaluates it as shown:   In particular, this is what she does:   add 9 and 6 to make 15, and carry the 1 to the column two columns to the left, i. e. to the column \"0 9\";  add 3 and 7 to make 10 and carry the 1 to the column two columns to the left, i. e. to the column \"2 2\";  add 1, 0, and 9 to make 10 and carry the 1 to the column two columns to the left, i. e. to the column above the plus sign;  add 1, 2 and 2 to make 5;  add 1 to make 1.  Thus, she ends up with the incorrect result of 15005.Alice comes up to Bob and says that she has added two numbers to get a result of n. However, Bob knows that Alice adds in her own way. Help Bob find the number of ordered pairs of positive integers such that when Alice adds them, she will get a result of n. Note that pairs (a, b) and (b, a) are considered different if a \n b.",
    "input_details": "The input consists of multiple test cases. The first line contains an integer t (1 <= t <= 1000) — the number of test cases. The description of the test cases follows.The only line of each test case contains an integer n (2 <= n <= 10^9) — the number Alice shows Bob.",
    "output_details": "For each test case, output one integer — the number of ordered pairs of positive integers such that when Alice adds them, she will get a result of n. ",
    "sample_input": "5\n100\n12\n8\n2021\n10000",
    "sample_output": "9\n4\n7\n44\n99",
    "tags": ["bitmasks", "combinatorics", "dp", "math", "*1600"]
  },
  {
    "name": "MEXor Mixup",
    "question_id": "me-xor-mixup",
    "question": "Alice gave Bob two integers a and b (a > 0 and b \\ge 0). Being a curious boy, Bob wrote down an array of non-negative integers with \\operatorname{MEX} value of all elements equal to a and \\operatorname{XOR} value of all elements equal to b.What is the shortest possible length of the array Bob wrote?Recall that the \\operatorname{MEX} (Minimum EXcluded) of an array is the minimum non-negative integer that does not belong to the array and the \\operatorname{XOR} of an array is the bitwise XOR of all the elements of the array.",
    "input_details": "The input consists of multiple test cases. The first line contains an integer t (1 <= t <= 5 . 10^4) — the number of test cases. The description of the test cases follows.The only line of each test case contains two integers a and b (1 <= a <= 3 . 10^5; 0 <= b <= 3 . 10^5) — the \\operatorname{MEX} and \\operatorname{XOR} of the array, respectively.",
    "output_details": "For each test case, output one (positive) integer — the length of the shortest array with \\operatorname{MEX} a and \\operatorname{XOR} b. We can show that such an array always exists.",
    "sample_input": "5\n1 1\n2 1\n2 0\n1 10000\n2 10000",
    "sample_output": "3\n2\n3\n2\n3",
    "tags": ["bitmasks", "greedy", "*1000"]
  },
  {
    "name": "Domino Disaster",
    "question_id": "domino-disaster",
    "question": "Alice has a grid with 2 rows and n columns. She fully covers the grid using n dominoes of size 1 * 2 — Alice may place them vertically or horizontally, and each cell should be covered by exactly one domino.Now, she decided to show one row of the grid to Bob. Help Bob and figure out what the other row of the grid looks like!",
    "input_details": "The input consists of multiple test cases. The first line contains an integer t (1 <= t <= 5000) — the number of test cases. The description of the test cases follows.The first line of each test case contains an integer n (1 <= n <= 100) — the width of the grid.The second line of each test case contains a string s consisting of n characters, each of which is either L, R, U, or D, representing the left, right, top, or bottom half of a domino, respectively (see notes for better understanding). This string represents one of the rows of the grid. Additional constraint on the input: each input corresponds to at least one valid tiling.",
    "output_details": "For each test case, output one string — the other row of the grid, using the same format as the input string. If there are multiple answers, print any.",
    "sample_input": "4\n1\nU\n2\nLR\n5\nLRDLR\n6\nUUUUUU",
    "sample_output": "D\nLR\nLRULR\nDDDDDD",
    "tags": ["implementation", "strings", "*800"]
  },
  {
    "name": "Xor-quiz",
    "question_id": "xor-quiz",
    "question": "This is an interactive problem.You are given two integers c and n. The jury has a randomly generated set A of distinct positive integers not greater than c (it is generated from all such possible sets with equal probability). The size of A is equal to n.Your task is to guess the set A. In order to guess it, you can ask at most \\lceil 0.65 . c \\rceil queries.In each query, you choose a single integer 1 <= x <= c. As the answer to this query you will be given the bitwise xor sum of all y, such that y \\in A and gcd(x, y) = 1 (i.e. x and y are coprime). If there is no such y this xor sum is equal to 0.You can ask all queries at the beginning and you will receive the answers to all your queries. After that, you won't have the possibility to ask queries.You should find any set A', such that |A'| = n and A' and A have the same answers for all c possible queries.",
    "input_details": "Firstly you are given two integers c and n (100 <= c <= 10^6, 0 <= n <= c).",
    "output_details": "ctionIn the first line you should print an integer q (0 <= q <= \\lceil 0.65 . c \\rceil) — the number of queries you want to ask. After that in the same line print q integers x_1, x_2, ...., x_q (1 <= x_i <= c) — the queries.For these queries you should read q integers, i-th of them is the answer to the described query for x = x_i.After that you should print n distinct integers A'_1, A'_2, ...., A'_n — the set A' you found.If there are different sets A' that have the same answers for all possible queries, print any of them.If you will ask more than \\lceil 0.65 . c \\rceil queries or if the queries will be invalid, the interactor will terminate immediately and your program will receive verdict Wrong Answer.After printing the queries and answers do not forget to output end of line and flush the output buffer. Otherwise, you will get the Idleness limit exceeded verdict. To do flush use:  fflush(stdout) or cout.flush() in C++;  System.out.flush() in Java;  flush(output) in Pascal;  stdout.flush() in Python;  Read documentation for other languages. HacksYou cannot make hacks in this problem.",
    "sample_input": "10 6\n\n1 4 2 11 4 4 4",
    "sample_output": "7 10 2 3 5 7 1 6\n\n1 4 5 6 8 10",
    "tags": [
      "constructive algorithms",
      "dp",
      "interactive",
      "math",
      "number theory",
      "*3200"
    ]
  },
  {
    "name": "Four Vertices",
    "question_id": "four-vertices",
    "question": "You are given an undirected weighted graph, consisting of n vertices and m edges.Some queries happen with this graph:  Delete an existing edge from the graph.  Add a non-existing edge to the graph. At the beginning and after each query, you should find four different vertices a, b, c, d such that there exists a path between a and b, there exists a path between c and d, and the sum of lengths of two shortest paths from a to b and from c to d is minimal. The answer to the query is the sum of the lengths of these two shortest paths. The length of the path is equal to the sum of weights of edges in this path.",
    "input_details": "The first line contains two integers n and m (4 <= n, m <= 10^5) — the number of vertices and edges in the graph respectively.Each of the next m lines contain three integers v, u, w (1 <= v, u <= n, v \nq u, 1 <= w <= 10^9) — this triple means that there is an edge between vertices v and u with weight w.The next line contains a single integer q (0 <= q <= 10^5) — the number of queries.The next q lines contain the queries of two types:  0 v u — this query means deleting an edge between v and u (1 <= v, u <= n, v \nq u). It is guaranteed that such edge exists in the graph.  1 v u w — this query means adding an edge between vertices v and u with weight w (1 <= v, u <= n, v \nq u, 1 <= w <= 10^9). It is guaranteed that there was no such edge in the graph. It is guaranteed that the initial graph does not contain multiple edges.At the beginning and after each query, the graph doesn't need to be connected.It is guaranteed that at each moment the number of edges will be at least 4. It can be proven, that at each moment there exist some four vertices a, b, c, d such that there exists a path between vertices a and b, and there exists a path between vertices c and d.",
    "output_details": "Print q + 1 integers — the minimal sum of lengths of shortest paths between chosen pairs of vertices before the queries and after each of them.",
    "sample_input": "6 6\n1 3 6\n4 3 1\n1 4 1\n2 6 4\n2 4 2\n5 4 3\n4\n1 2 5 2\n0 1 4\n0 3 4\n1 6 1 3",
    "sample_output": "4\n3\n3\n7\n5",
    "tags": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "greedy",
      "implementation",
      "shortest paths",
      "*3100"
    ]
  },
  {
    "name": "Points Movement",
    "question_id": "points-movement",
    "question": "There are n points and m segments on the coordinate line. The initial coordinate of the i-th point is a_i. The endpoints of the j-th segment are l_j and r_j — left and right endpoints, respectively.You can move the points. In one move you can move any point from its current coordinate x to the coordinate x - 1 or the coordinate x + 1. The cost of this move is 1.You should move the points in such a way that each segment is visited by at least one point. A point visits the segment [l, r] if there is a moment when its coordinate was on the segment [l, r] (including endpoints).You should find the minimal possible total cost of all moves such that all segments are visited.",
    "input_details": "The input consists of multiple test cases. The first line contains a single integer t (1 <= t <= 10^4) — the number of test cases. Description of the test cases follows.The first line of each test case contains two integers n and m (1 <= n, m <= 2 . 10^5) — the number of points and segments respectively.The next line contains n distinct integers a_1, a_2, ...., a_n (-10^9 <= a_i <= 10^9) — the initial coordinates of the points.Each of the next m lines contains two integers l_j, r_j (-10^9 <= l_j <= r_j <= 10^9) — the left and the right endpoints of the j-th segment.It's guaranteed that the sum of n and the sum of m over all test cases does not exceed 2 . 10^5.",
    "output_details": "For each test case print a single integer — the minimal total cost of all moves such that all segments are visited.",
    "sample_input": "2\n4 11\n2 6 14 18\n0 3\n4 5\n11 15\n3 5\n10 13\n16 16\n1 4\n8 12\n17 19\n7 13\n14 19\n4 12\n-9 -16 12 3\n-20 -18\n-14 -13\n-10 -7\n-3 -1\n0 4\n6 11\n7 9\n8 10\n13 15\n14 18\n16 17\n18 19",
    "sample_output": "5\n22",
    "tags": [
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "sortings",
      "*2600"
    ]
  },
  {
    "name": "Buds Re-hanging",
    "question_id": "buds-re-hanging",
    "question": "A tree is a connected graph without cycles. A rooted tree has a special vertex called the root. The parent of a vertex v (different from root) is the previous to v vertex on the shortest path from the root to the vertex v. Children of the vertex v are all vertices for which v is the parent.A vertex is a leaf if it has no children. We call a vertex a bud, if the following three conditions are satisfied:   it is not a root,  it has at least one child, and  all its children are leaves. You are given a rooted tree with n vertices. The vertex 1 is the root. In one operation you can choose any bud with all its children (they are leaves) and re-hang them to any other vertex of the tree. By doing that you delete the edge connecting the bud and its parent and add an edge between the bud and the chosen vertex of the tree. The chosen vertex cannot be the bud itself or any of its children. All children of the bud stay connected to the bud.What is the minimum number of leaves it is possible to get if you can make any number of the above-mentioned operations (possibly zero)?",
    "input_details": "The input consists of multiple test cases. The first line contains a single integer t (1 <= t <= 10^4) — the number of test cases. Description of the test cases follows.The first line of each test case contains a single integer n (2 <= n <= 2 . 10^5) — the number of the vertices in the given tree.Each of the next n-1 lines contains two integers u and v (1 <= u, v <= n, u \nq v) meaning that there is an edge between vertices u and v in the tree.It is guaranteed that the given graph is a tree.It is guaranteed that the sum of n over all test cases doesn't exceed 2 . 10^5.",
    "output_details": "For each test case print a single integer — the minimal number of leaves that is possible to get after some operations.",
    "sample_input": "5\n7\n1 2\n1 3\n1 4\n2 5\n2 6\n4 7\n6\n1 2\n1 3\n2 4\n2 5\n3 6\n2\n1 2\n7\n7 3\n1 5\n1 3\n4 6\n4 7\n2 1\n6\n2 1\n2 3\n4 5\n3 4\n3 6",
    "sample_output": "2\n2\n1\n2\n1",
    "tags": [
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "greedy",
      "trees",
      "*2000"
    ]
  },
  {
    "name": " Seating Arrangements (hard version) ",
    "question_id": "seating-arrangements-hard-version",
    "question": "It is the hard version of the problem. The only difference is that in this version 1 <= n <= 300.In the cinema seats can be represented as the table with n rows and m columns. The rows are numbered with integers from 1 to n. The seats in each row are numbered with consecutive integers from left to right: in the k-th row from m (k - 1) + 1 to m k for all rows 1 <= k <= n. 12.sm - 1mm + 1m + 2.s2 m - 12 m2m + 12m + 2.s3 m - 13 m\\vdots\\vdots\\ddots\\vdots\\vdotsm (n - 1) + 1m (n - 1) + 2.sn m - 1n m The table with seats indices There are nm people who want to go to the cinema to watch a new film. They are numbered with integers from 1 to nm. You should give exactly one seat to each person.It is known, that in this cinema as lower seat index you have as better you can see everything happening on the screen. i-th person has the level of sight a_i. Let's define s_i as the seat index, that will be given to i-th person. You want to give better places for people with lower sight levels, so for any two people i, j such that a_i < a_j it should be satisfied that s_i < s_j.After you will give seats to all people they will start coming to their seats. In the order from 1 to nm, each person will enter the hall and sit in their seat. To get to their place, the person will go to their seat's row and start moving from the first seat in this row to theirs from left to right. While moving some places will be free, some will be occupied with people already seated. The inconvenience of the person is equal to the number of occupied seats he or she will go through.Let's consider an example: m = 5, the person has the seat 4 in the first row, the seats 1, 3, 5 in the first row are already occupied, the seats 2 and 4 are free. The inconvenience of this person will be 2, because he will go through occupied seats 1 and 3.Find the minimal total inconvenience (the sum of inconveniences of all people), that is possible to have by giving places for all people (all conditions should be satisfied).",
    "input_details": "The input consists of multiple test cases. The first line contains a single integer t (1 <= t <= 100) — the number of test cases. Description of the test cases follows.The first line of each test case contains two integers n and m (1 <= n, m <= 300) — the number of rows and places in each row respectively.The second line of each test case contains n . m integers a_1, a_2, ...., a_{n . m} (1 <= a_i <= 10^9), where a_i is the sight level of i-th person.It's guaranteed that the sum of n . m over all test cases does not exceed 10^5.",
    "output_details": "For each test case print a single integer — the minimal total inconvenience that can be achieved.",
    "sample_input": "7\n1 2\n1 2\n3 2\n1 1 2 2 3 3\n3 3\n3 4 4 1 1 1 1 1 2\n2 2\n1 1 2 1\n4 2\n50 50 50 50 3 50 50 50\n4 2\n6 6 6 6 2 2 9 6\n2 9\n1 3 3 3 3 3 1 1 3 1 3 1 1 3 3 1 1 3",
    "sample_output": "1\n0\n4\n0\n0\n0\n1",
    "tags": [
      "data structures",
      "greedy",
      "implementation",
      "sortings",
      "two pointers",
      "*1600"
    ]
  },
  {
    "name": " Seating Arrangements (easy version) ",
    "question_id": "seating-arrangements-easy-version",
    "question": "It is the easy version of the problem. The only difference is that in this version n = 1.In the cinema seats can be represented as the table with n rows and m columns. The rows are numbered with integers from 1 to n. The seats in each row are numbered with consecutive integers from left to right: in the k-th row from m (k - 1) + 1 to m k for all rows 1 <= k <= n. 12.sm - 1mm + 1m + 2.s2 m - 12 m2m + 12m + 2.s3 m - 13 m\\vdots\\vdots\\ddots\\vdots\\vdotsm (n - 1) + 1m (n - 1) + 2.sn m - 1n m The table with seats indices There are nm people who want to go to the cinema to watch a new film. They are numbered with integers from 1 to nm. You should give exactly one seat to each person.It is known, that in this cinema as lower seat index you have as better you can see everything happening on the screen. i-th person has the level of sight a_i. Let's define s_i as the seat index, that will be given to i-th person. You want to give better places for people with lower sight levels, so for any two people i, j such that a_i < a_j it should be satisfied that s_i < s_j.After you will give seats to all people they will start coming to their seats. In the order from 1 to nm, each person will enter the hall and sit in their seat. To get to their place, the person will go to their seat's row and start moving from the first seat in this row to theirs from left to right. While moving some places will be free, some will be occupied with people already seated. The inconvenience of the person is equal to the number of occupied seats he or she will go through.Let's consider an example: m = 5, the person has the seat 4 in the first row, the seats 1, 3, 5 in the first row are already occupied, the seats 2 and 4 are free. The inconvenience of this person will be 2, because he will go through occupied seats 1 and 3.Find the minimal total inconvenience (the sum of inconveniences of all people), that is possible to have by giving places for all people (all conditions should be satisfied).",
    "input_details": "The input consists of multiple test cases. The first line contains a single integer t (1 <= t <= 100) — the number of test cases. Description of the test cases follows.The first line of each test case contains two integers n and m (n = 1, 1 <= m <= 300) — the number of rows and places in each row respectively.The second line of each test case contains n . m integers a_1, a_2, ...., a_{n . m} (1 <= a_i <= 10^9), where a_i is the sight level of i-th person.It's guaranteed that the sum of n . m over all test cases does not exceed 10^5.",
    "output_details": "For each test case print a single integer — the minimal total inconvenience that can be achieved.",
    "sample_input": "4\n1 3\n1 2 3\n1 5\n2 1 5 3 3\n1 2\n2 1\n1 6\n2 3 2 1 1 1",
    "sample_output": "3\n6\n0\n1",
    "tags": ["data structures", "greedy", "sortings", "*1100"]
  },
  {
    "name": "MAX-MEX Cut",
    "question_id": "max-mex-cut",
    "question": "A binary string is a string that consists of characters 0 and 1. A bi-table is a table that has exactly two rows of equal length, each being a binary string.Let \\operatorname{MEX} of a bi-table be the smallest digit among 0, 1, or 2 that does not occur in the bi-table. For example, \\operatorname{MEX} for \\begin{bmatrix} 0011\\\\ 1010 \\end{bmatrix} is 2, because 0 and 1 occur in the bi-table at least once. \\operatorname{MEX} for \\begin{bmatrix} 111\\\\ 111 \\end{bmatrix} is 0, because 0 and 2 do not occur in the bi-table, and 0 < 2.You are given a bi-table with n columns. You should cut it into any number of bi-tables (each consisting of consecutive columns) so that each column is in exactly one bi-table. It is possible to cut the bi-table into a single bi-table — the whole bi-table.What is the maximal sum of \\operatorname{MEX} of all resulting bi-tables can be?",
    "input_details": "The input consists of multiple test cases. The first line contains a single integer t (1 <= t <= 10^4) — the number of test cases. Description of the test cases follows.The first line of the description of each test case contains a single integer n (1 <= n <= 10^5) — the number of columns in the bi-table.Each of the next two lines contains a binary string of length n — the rows of the bi-table.It's guaranteed that the sum of n over all test cases does not exceed 10^5.",
    "output_details": "For each test case print a single integer — the maximal sum of \\operatorname{MEX} of all bi-tables that it is possible to get by cutting the given bi-table optimally.",
    "sample_input": "4\n7\n0101000\n1101100\n5\n01100\n10101\n2\n01\n01\n6\n000000\n111111",
    "sample_output": "8\n8\n2\n12",
    "tags": ["bitmasks", "constructive algorithms", "dp", "greedy", "*1000"]
  },
  {
    "name": "MIN-MEX Cut",
    "question_id": "min-mex-cut",
    "question": "A binary string is a string that consists of characters 0 and 1.Let \\operatorname{MEX} of a binary string be the smallest digit among 0, 1, or 2 that does not occur in the string. For example, \\operatorname{MEX} of 001011 is 2, because 0 and 1 occur in the string at least once, \\operatorname{MEX} of 1111 is 0, because 0 and 2 do not occur in the string and 0 < 2.A binary string s is given. You should cut it into any number of substrings such that each character is in exactly one substring. It is possible to cut the string into a single substring — the whole string.A string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.What is the minimal sum of \\operatorname{MEX} of all substrings pieces can be?",
    "input_details": "The input consists of multiple test cases. The first line contains a single integer t (1 <= t <= 10^4) — the number of test cases. Description of the test cases follows.Each test case contains a single binary string s (1 <= |s| <= 10^5).It's guaranteed that the sum of lengths of s over all test cases does not exceed 10^5.",
    "output_details": "For each test case print a single integer — the minimal sum of \\operatorname{MEX} of all substrings that it is possible to get by cutting s optimally.",
    "sample_input": "6\n01\n1111\n01100\n101\n0000\n01010",
    "sample_output": "1\n0\n2\n1\n1\n2",
    "tags": ["bitmasks", "constructive algorithms", "dp", "greedy", "*800"]
  },
  {
    "name": "Median Maximization",
    "question_id": "median-maximization",
    "question": "You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.A median of an array of integers of length m is the number standing on the \\lceil {\\frac{m}{2}} \\rceil-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \\lceil \\frac{m}{2} \\rceil-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.",
    "input_details": "The input consists of multiple test cases. The first line contains a single integer t (1 <= t <= 10^4) — the number of test cases. Description of the test cases follows.Each test case contains a single line with two integers n and s (1 <= n, s <= 10^9) — the length of the array and the required sum of the elements.",
    "output_details": "For each test case print a single integer — the maximum possible median.",
    "sample_input": "8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1",
    "sample_output": "5\n2\n2\n0\n4\n4\n1000000000\n0",
    "tags": ["binary search", "greedy", "math", "*800"]
  },
  {
    "name": "Tubular Bells",
    "question_id": "tubular-bells",
    "question": "Do you know what tubular bells are? They are a musical instrument made up of cylindrical metal tubes. In an orchestra, tubular bells are used to mimic the ringing of bells.Mike has tubular bells, too! They consist of n tubes, and each of the tubes has a length that can be expressed by a integer from l to r inclusive. It is clear that the lengths of all the tubes are different (it makes no sense to make the same tubes). It is also known that r-l+1 = n.Formally, we can say that Mike's tubular bells are described by a permutation a of length n that contains all numbers from l to r inclusive, with a_i denoting the length of the i-th tube.You are offered an interesting task: to guess what Mike's instrument looks like. Simply, you must guess the permutation.Mike won't tell you l or r. He will only tell you n, and will allow you to ask no more than n + 5000 queries.In each query, you name two positive integers x, y such that 1 <= x, y <= n, x \nq y. In response to this query, the program written by Mike will give you \\mathrm{lcm}(a_x, a_y), where \\mathrm{lcm}(c,d) denotes the least common multiple of c and d.Solve Mike's problem!",
    "input_details": "Each test contains multiple test cases.The first line contains one positive integer t (1 <= t <= 20), denoting the number of test cases. Description of the test cases follows.The single line of each test case contains one positive integer n (3 <= n <= 10^5) — number of tubes in Mike's tubular bells. Also 1 <= l <= r <= 2 . 10^5, i.e. the lengths of the tubes do not exceed 2 . 10^5.It is guaranteed that the sum of maximal number of queries (i.e. n + 5000) over all test cases does not exceed 10^5 + 5000. It means that sum of n does not exceed 10^5 + 5000 - t . 5000.",
    "output_details": "ctionFor each set of input data, read one integer n. You are allowed to make no more than n + 5000 queries.If you want to make a query, output it in the format \"? x y\", where x and y — the numbers of tubes for which you learn the lcm (least common multiple) of their lengths. Note that 1 <= x, y <= n, x \nq y must be satisfied. The interactor will return a single integer —the answer to your query.If you are ready to print the answer, print it in the format \"! a_1 a_2 ... a_n\". The output of the answer is not considered a query and is not included in the number of queries.After each query and answer output, don't forget to output the line translation and reset the output buffer. Otherwise you will get the verdict \"Idleness limit exceeded\". To reset the buffer use:  fflush(stdout) or cout.flush() in C++;  System.out.flush() in Java;  flush(output) in Pascal;  stdout.flush() in Python;  see documentation for other languages. Note that the interactor is not adaptive. That is, the original permutation is fixed in the beginning and don't depend on your queries.Hacks:Use the following format for hacks:The first line contains a single positive integer t (1 <= t <= 20) — the number of input datasets. A description of the input data sets is given below.The first line of each test case contains one positive integer n (3 <= n <= 10^5) —the number of tubes. It is known that 1 <= l <= r <= 2 . 10^5, i.e. the lengths of the tubes do not exceed 2 . 10^5.The second line of each test case contains an array a of n positive integers — the lengths of the tubes in each input dataset. Remember that l <= a_i <= r and r-l+1 = n, and that all a_i are different.",
    "sample_input": "3\n5\n8 10 7 6 9\n5\n24 25 28 27 26\n7\n1 2 3 4 5 6 7",
    "sample_output": "? 1 2\n40\n? 2 5\n90\n? 3 1\n56\n? 4 5\n18\n! 8 10 7 6 9\n? 1 5\n312\n? 2 4\n675\n! 24 25 28 27 26\n? 1 4\n4\n? 2 5\n10\n? 3 7\n21\n? 6 2\n6\n? 2 5\n10\n? 1 2\n2\n? 1 2\n2\n? 1 2\n2\n? 1 2\n2\n? 1 2\n2\n! 1 2 3 4 5 6 7",
    "tags": ["interactive", "math", "number theory", "probabilities", "*2900"]
  },
  {
    "name": "Rescue Niwen!",
    "question_id": "rescue-niwen",
    "question": " Morning desert sun horizonRise above the sands of time...Fates Warning, \"Exodus\"After crossing the Windswept Wastes, Ori has finally reached the Windtorn Ruins to find the Heart of the Forest! However, the ancient repository containing this priceless Willow light did not want to open!Ori was taken aback, but the Voice of the Forest explained to him that the cunning Gorleks had decided to add protection to the repository.The Gorleks were very fond of the \"string expansion\" operation. They were also very fond of increasing subsequences.Suppose a string s_1s_2s_3 .... s_n is given. Then its \"expansion\" is defined as the sequence of strings s_1, s_1 s_2, ..., s_1 s_2 .... s_n, s_2, s_2 s_3, ..., s_2 s_3 .... s_n, s_3, s_3 s_4, ..., s_{n-1} s_n, s_n. For example, the \"expansion\" the string 'abcd' will be the following sequence of strings: 'a', 'ab', 'abc', 'abcd', 'b', 'bc', 'bcd', 'c', 'cd', 'd'. To open the ancient repository, Ori must find the size of the largest increasing subsequence of the \"expansion\" of the string s. Here, strings are compared lexicographically.Help Ori with this task!A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b, but a \n b; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b.",
    "input_details": "ing desert sun horizonRise above the sands of time...Fates Warning, \"Exodus\"",
    "output_details": "Warning, \"Exodus\"",
    "sample_input": "leInput7\n5\nacbac\n8\nacabacba\n12\naaaaaaaaaaaa\n10\nabacabadac\n8\ndcbaabcd\n3\ncba\n6\nsparky\nOutput9\n17\n12\n29\n14\n3\n9",
    "sample_output": "5\nacbac\n8\nacabacba\n12\naaaaaaaaaaaa\n10\nabacabadac\n8\ndcbaabcd\n3\ncba\n6\nsparky\nOutput9\n17\n12\n29\n14\n3\n9",
    "tags": ["dp", "greedy", "string suffix structures", "strings", "*2500"]
  },
  {
    "name": " Two Hundred Twenty One (hard version)",
    "question_id": "two-hundred-twenty-one-hard-version",
    "question": "This is the hard version of the problem. The difference between the versions is that the hard version does require you to output the numbers of the rods to be removed. You can make hacks only if all versions of the problem are solved.Stitch likes experimenting with different machines with his friend Sparky. Today they built another machine.The main element of this machine are n rods arranged along one straight line and numbered from 1 to n inclusive. Each of these rods must carry an electric charge quantitatively equal to either 1 or -1 (otherwise the machine will not work). Another condition for this machine to work is that the sign-variable sum of the charge on all rods must be zero.More formally, the rods can be represented as an array of n numbers characterizing the charge: either 1 or -1. Then the condition must hold: a_1 - a_2 + a_3 - a_4 + .... = 0, or \\sum\\limits_{i=1}^n (-1)^{i-1} . a_i = 0.Sparky charged all n rods with an electric current, but unfortunately it happened that the rods were not charged correctly (the sign-variable sum of the charge is not zero). The friends decided to leave only some of the rods in the machine. Sparky has q questions. In the ith question Sparky asks: if the machine consisted only of rods with numbers l_i to r_i inclusive, what minimal number of rods could be removed from the machine so that the sign-variable sum of charges on the remaining ones would be zero? Also Sparky wants to know the numbers of these rods. Perhaps the friends got something wrong, and the sign-variable sum is already zero. In that case, you don't have to remove the rods at all.If the number of rods is zero, we will assume that the sign-variable sum of charges is zero, that is, we can always remove all rods.Help your friends and answer all of Sparky's questions!",
    "input_details": "Each test contains multiple test cases.The first line contains one positive integer t (1 <= t <= 10^3), denoting the number of test cases. Description of the test cases follows.The first line of each test case contains two positive integers n and q (1 <= n, q <= 3 . 10^5) — the number of rods and the number of questions.The second line of each test case contains a non-empty string s of length n, where the charge of the i-th rod is 1 if s_i is the \"+\" symbol, or -1 if s_i is the \"-\" symbol.Each next line from the next q lines contains two positive integers l_i ans r_i (1 <= l_i <= r_i <= n) — numbers, describing Sparky's questions.It is guaranteed that the sum of n over all test cases does not exceed 3 . 10^5, and the sum of q over all test cases does not exceed 3 . 10^5.It is guaranteed that the sum of the answers (minimal number of rods that can be removed) over all test cases does not exceed 10^6.",
    "output_details": "For each test case, print the answer in the following format:In the first line print a single integer k — the minimal number of rods that can be removed.In the second line print k numbers separated by a space — the numbers of rods to be removed.If there is more than one correct answer, you can print any.",
    "sample_input": "3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n6 12\n3 10\n4 10\n+-+-\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4",
    "sample_output": "2\n5 8\n2\n1 11\n1\n9\n0\n1\n1\n2\n1 2\n1\n2\n2\n1 3\n1\n2\n2\n2 3\n1\n3\n1\n3\n2\n3 4\n1\n4",
    "tags": ["data structures", "math", "*2200"]
  },
  {
    "name": " Two Hundred Twenty One (easy version)",
    "question_id": "two-hundred-twenty-one-easy-version",
    "question": "This is the easy version of the problem. The difference between the versions is that the easy version does not require you to output the numbers of the rods to be removed. You can make hacks only if all versions of the problem are solved.Stitch likes experimenting with different machines with his friend Sparky. Today they built another machine.The main element of this machine are n rods arranged along one straight line and numbered from 1 to n inclusive. Each of these rods must carry an electric charge quantitatively equal to either 1 or -1 (otherwise the machine will not work). Another condition for this machine to work is that the sign-variable sum of the charge on all rods must be zero.More formally, the rods can be represented as an array of n numbers characterizing the charge: either 1 or -1. Then the condition must hold: a_1 - a_2 + a_3 - a_4 + .... = 0, or \\sum\\limits_{i=1}^n (-1)^{i-1} . a_i = 0.Sparky charged all n rods with an electric current, but unfortunately it happened that the rods were not charged correctly (the sign-variable sum of the charge is not zero). The friends decided to leave only some of the rods in the machine. Sparky has q questions. In the ith question Sparky asks: if the machine consisted only of rods with numbers l_i to r_i inclusive, what minimal number of rods could be removed from the machine so that the sign-variable sum of charges on the remaining ones would be zero? Perhaps the friends got something wrong, and the sign-variable sum is already zero. In that case, you don't have to remove the rods at all.If the number of rods is zero, we will assume that the sign-variable sum of charges is zero, that is, we can always remove all rods.Help your friends and answer all of Sparky's questions!",
    "input_details": "Each test contains multiple test cases.The first line contains one positive integer t (1 <= t <= 10^3), denoting the number of test cases. Description of the test cases follows.The first line of each test case contains two positive integers n and q (1 <= n, q <= 3 . 10^5) — the number of rods and the number of questions.The second line of each test case contains a non-empty string s of length n, where the charge of the i-th rod is 1 if s_i is the \"+\" symbol, or -1 if s_i is the \"-\" symbol.Each next line from the next q lines contains two positive integers l_i ans r_i (1 <= l_i <= r_i <= n) — numbers, describing Sparky's questions.It is guaranteed that the sum of n over all test cases does not exceed 3 . 10^5, and the sum of q over all test cases does not exceed 3 . 10^5.",
    "output_details": "For each test case, print a single integer — the minimal number of rods that can be removed.",
    "sample_input": "3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n6 12\n3 10\n4 10\n+-+-\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4",
    "sample_output": "2\n2\n1\n0\n1\n2\n1\n2\n1\n2\n1\n1\n2\n1",
    "tags": ["data structures", "dp", "math", "*1700"]
  },
  {
    "name": "Rings",
    "question_id": "rings",
    "question": " Frodo was caught by Saruman. He tore a pouch from Frodo's neck, shook out its contents —there was a pile of different rings: gold and silver...\"How am I to tell which is the One?!\" the mage howled.\"Throw them one by one into the Cracks of Doom and watch when Mordor falls!\" Somewhere in a parallel Middle-earth, when Saruman caught Frodo, he only found n rings. And the i-th ring was either gold or silver. For convenience Saruman wrote down a binary string s of n characters, where the i-th character was 0 if the i-th ring was gold, and 1 if it was silver.Saruman has a magic function f, which takes a binary string and returns a number obtained by converting the string into a binary number and then converting the binary number into a decimal number. For example, f(001010) = 10, f(111) = 7, f(11011101) = 221.Saruman, however, thinks that the order of the rings plays some important role. He wants to find 2 pairs of integers (l_1, r_1), (l_2, r_2), such that: 1 <= l_1 <= n, 1 <= r_1 <= n, r_1-l_1+1\\ge \\lfloor \\frac{n}{2} \\rfloor  1 <= l_2 <= n, 1 <= r_2 <= n, r_2-l_2+1\\ge \\lfloor \\frac{n}{2} \\rfloor  Pairs (l_1, r_1) and (l_2, r_2) are distinct. That is, at least one of l_1 \nq l_2 and r_1 \nq r_2 must hold. Let t be the substring s[l_1:r_1] of s, and w be the substring s[l_2:r_2] of s. Then there exists non-negative integer k, such that f(t) = f(w) . k.Here substring s[l:r] denotes s_ls_{l+1}.... s_{r-1}s_r, and \\lfloor x \\rfloor denotes rounding the number down to the nearest integer.Help Saruman solve this problem! It is guaranteed that under the constraints of the problem at least one solution exists.",
    "input_details": "o was caught by Saruman. He tore a pouch from Frodo's neck, shook out its contents —there was a pile of different rings: gold and silver...\"How am I to tell which is the One?!\" the mage howled.\"Throw them one by one into the Cracks of Doom and watch when Mordor falls!\" ",
    "output_details": "ach test contains multiple test cases.The first line contains one positive integer t (1 <= t <= 10^3), denoting the number of test cases. Description of the test cases follows.The first line of each test case contains one positive integer n (2 <= n <= 2 . 10^4) — length of the string.The second line of each test case contains a non-empty binary string of length n.It is guaranteed that the sum of n over all test cases does not exceed 10^5.",
    "sample_input": "le",
    "sample_output": "6\n101111\n9\n111000111\n8\n10000000\n5\n11011\n6\n001111\n3\n101\n30\n100000000000000100000000000000",
    "tags": ["constructive algorithms", "math", "*1500"]
  },
  {
    "name": "Scenes From a Memory",
    "question_id": "scenes-from-a-memory",
    "question": "During the hypnosis session, Nicholas suddenly remembered a positive integer n, which doesn't contain zeros in decimal notation. Soon, when he returned home, he got curious: what is the maximum number of digits that can be removed from the number so that the number becomes not prime, that is, either composite or equal to one?For some numbers doing so is impossible: for example, for number 53 it's impossible to delete some of its digits to obtain a not prime integer. However, for all n in the test cases of this problem, it's guaranteed that it's possible to delete some of their digits to obtain a not prime number.Note that you cannot remove all the digits from the number.A prime number is a number that has no divisors except one and itself. A composite is a number that has more than two divisors. 1 is neither a prime nor a composite number.",
    "input_details": "Each test contains multiple test cases.The first line contains one positive integer t (1 <= t <= 10^3), denoting the number of test cases. Description of the test cases follows.The first line of each test case contains one positive integer k (1 <= k <= 50) — the number of digits in the number.The second line of each test case contains a positive integer n, which doesn't contain zeros in decimal notation (10^{k-1} <= n < 10^{k}). It is guaranteed that it is always possible to remove less than k digits to make the number not prime.It is guaranteed that the sum of k over all test cases does not exceed 10^4.",
    "output_details": "For every test case, print two numbers in two lines. In the first line print the number of digits, that you have left in the number. In the second line print the digits left after all delitions. If there are multiple solutions, print any.",
    "sample_input": "7\n3\n237\n5\n44444\n3\n221\n2\n35\n3\n773\n1\n4\n30\n626221626221626221626221626221",
    "sample_output": "2\n27\n1\n4\n1\n1\n2\n35\n2\n77\n1\n4\n1\n6",
    "tags": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "math",
      "number theory",
      "*1000"
    ]
  },
  {
    "name": "The Miracle and the Sleeper",
    "question_id": "the-miracle-and-the-sleeper",
    "question": "You are given two integers l and r, l<= r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\\ge a \\ge b \\ge l.As a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.",
    "input_details": "Each test contains multiple test cases.The first line contains one positive integer t (1<= t<= 10^4), denoting the number of test cases. Description of the test cases follows.The only line of each test case contains two integers l, r (1<= l <= r <= 10^9).",
    "output_details": "For every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\\ge a \\ge b \\ge l.",
    "sample_input": "4\n1 1\n999999999 1000000000\n8 26\n1 999999999",
    "sample_output": "0\n1\n12\n499999999",
    "tags": ["greedy", "math", "*800"]
  },
  {
    "name": " Up the Strip (simplified version)",
    "question_id": "up-the-strip-simplified-version",
    "question": "This version of the problem differs from the next one only in the constraint on n.Note that the memory limit in this problem is lower than in others.You have a vertical strip with n cells, numbered consecutively from 1 to n from top to bottom.You also have a token that is initially placed in cell n. You will move the token up until it arrives at cell 1.Let the token be in cell x > 1 at some moment. One shift of the token can have either of the following kinds:   Subtraction: you choose an integer y between 1 and x-1, inclusive, and move the token from cell x to cell x - y.  Floored division: you choose an integer z between 2 and x, inclusive, and move the token from cell x to cell \\lfloor \\frac{x}{z} \\rfloor (x divided by z rounded down). Find the number of ways to move the token from cell n to cell 1 using one or more shifts, and print it modulo m. Note that if there are several ways to move the token from one cell to another in one shift, all these ways are considered distinct (check example explanation for a better understanding).",
    "input_details": "The only line contains two integers n and m (2 <= n <= 2 . 10^5; 10^8 < m < 10^9; m is a prime number) — the length of the strip and the modulo.",
    "output_details": "Print the number of ways to move the token from cell n to cell 1, modulo m.",
    "sample_input": "3 998244353",
    "sample_output": "5",
    "tags": [
      "brute force",
      "data structures",
      "dp",
      "math",
      "number theory",
      "*1700"
    ]
  },
  {
    "name": "Deep Down Below",
    "question_id": "deep-down-below",
    "question": "In a certain video game, the player controls a hero characterized by a single integer value: power. The hero will have to beat monsters that are also characterized by a single integer value: armor.On the current level, the hero is facing n caves. To pass the level, the hero must enter all the caves in some order, each cave exactly once, and exit every cave safe and sound. When the hero enters cave i, he will have to fight k_i monsters in a row: first a monster with armor a_{i, 1}, then a monster with armor a_{i, 2} and so on, finally, a monster with armor a_{i, k_i}.The hero can beat a monster if and only if the hero's power is strictly greater than the monster's armor. If the hero can't beat the monster he's fighting, the game ends and the player loses. Note that once the hero enters a cave, he can't exit it before he fights all the monsters in it, strictly in the given order.Each time the hero beats a monster, the hero's power increases by 1.Find the smallest possible power the hero must start the level with to be able to enter all the caves in some order and beat all the monsters.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases t (1 <= t <= 10^5). Description of the test cases follows.The first line of each test case contains a single integer n (1 <= n <= 10^5) — the number of caves.The i-th of the next n lines contains an integer k_i (1 <= k_i <= 10^5) — the number of monsters in the i-th cave, followed by k_i integers a_{i, 1}, a_{i, 2}, ...., a_{i, k_i} (1 <= a_{i, j} <= 10^9) — armor levels of the monsters in cave i in order the hero has to fight them.It is guaranteed that the sum of k_i over all test cases does not exceed 10^5.",
    "output_details": "For each test case print a single integer — the smallest possible power the hero must start the level with to be able to enter all the caves in some order and beat all the monsters.",
    "sample_input": "2\n1\n1 42\n2\n3 10 15 8\n2 12 11",
    "sample_output": "43\n13",
    "tags": ["binary search", "greedy", "sortings", "*1300"]
  },
  {
    "name": "Simply Strange Sort",
    "question_id": "simply-strange-sort",
    "question": "You have a permutation: an array a = [a_1, a_2, ...., a_n] of distinct integers from 1 to n. The length of the permutation n is odd.Consider the following algorithm of sorting the permutation in increasing order.A helper procedure of the algorithm, f(i), takes a single argument i (1 <= i <= n-1) and does the following. If a_i > a_{i+1}, the values of a_i and a_{i+1} are exchanged. Otherwise, the permutation doesn't change.The algorithm consists of iterations, numbered with consecutive integers starting with 1. On the i-th iteration, the algorithm does the following:   if i is odd, call f(1), f(3), ...., f(n - 2);  if i is even, call f(2), f(4), ...., f(n - 1). It can be proven that after a finite number of iterations the permutation will be sorted in increasing order.After how many iterations will this happen for the first time?",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases t (1 <= t <= 100). Description of the test cases follows.The first line of each test case contains a single integer n (3 <= n <= 999; n is odd) — the length of the permutation.The second line contains n distinct integers a_1, a_2, ...., a_n (1 <= a_i <= n) — the permutation itself. It is guaranteed that the sum of n over all test cases does not exceed 999.",
    "output_details": "For each test case print the number of iterations after which the permutation will become sorted in increasing order for the first time.If the given permutation is already sorted, print 0.",
    "sample_input": "3\n3\n3 2 1\n7\n4 5 7 1 3 2 6\n5\n1 2 3 4 5",
    "sample_output": "3\n5\n0",
    "tags": ["brute force", "implementation", "sortings", "*800"]
  },
  {
    "name": " Nearest Beautiful Number (hard version)",
    "question_id": "nearest-beautiful-number-hard-version",
    "question": "It is a complicated version of problem F1. The difference between them is the constraints (F1: k <= 2, F2: k <= 10).You are given an integer n. Find the minimum integer x such that x \\ge n and the number x is k-beautiful.A number is called k-beautiful if its decimal representation having no leading zeroes contains no more than k different digits. E.g. if k = 2, the numbers 3434443, 55550, 777 and 21 are k-beautiful whereas the numbers 120, 445435 and 998244353 are not.",
    "input_details": "The first line contains one integer t (1 <= t <= 10^4) — the number of test cases. Then t test cases follow.Each test case consists of one line containing two integers n and k (1 <= n <= 10^9, 1 <= k <= 10).",
    "output_details": "For each test case output on a separate line x — the minimum k-beautiful integer such that x \\ge n.",
    "sample_input": "6\n2021 3\n177890 2\n34512 3\n724533 4\n998244353 1\n12345678 10",
    "sample_output": "2021\n181111\n34533\n724542\n999999999\n12345678",
    "tags": [
      "bitmasks",
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "greedy",
      "*2100"
    ]
  },
  {
    "name": " Nearest Beautiful Number (easy version)",
    "question_id": "nearest-beautiful-number-easy-version",
    "question": "It is a simplified version of problem F2. The difference between them is the constraints (F1: k <= 2, F2: k <= 10).You are given an integer n. Find the minimum integer x such that x \\ge n and the number x is k-beautiful.A number is called k-beautiful if its decimal representation having no leading zeroes contains no more than k different digits. E.g. if k = 2, the numbers 3434443, 55550, 777 and 21 are k-beautiful whereas the numbers 120, 445435 and 998244353 are not.",
    "input_details": "The first line contains one integer t (1 <= t <= 10^4) — the number of test cases. Then t test cases follow.Each test case consists of one line containing two integers n and k (1 <= n <= 10^9, 1 <= k <= 2).",
    "output_details": "For each test case output on a separate line x — the minimum k-beautiful integer such that x \\ge n.",
    "sample_input": "4\n1 1\n221 2\n177890 2\n998244353 1",
    "sample_output": "1\n221\n181111\n999999999",
    "tags": [
      "binary search",
      "bitmasks",
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "greedy",
      "*1900"
    ]
  },
  {
    "name": "Polycarp and String Transformation",
    "question_id": "polycarp-and-string-transformation",
    "question": "Polycarp has a string s. Polycarp performs the following actions until the string s is empty (t is initially an empty string):  he adds to the right to the string t the string s, i.e. he does t = t + s, where t + s is a concatenation of the strings t and s;  he selects an arbitrary letter of s and removes from s all its occurrences (the selected letter must occur in the string s at the moment of performing this action). Polycarp performs this sequence of actions strictly in this order.Note that after Polycarp finishes the actions, the string s will be empty and the string t will be equal to some value (that is undefined and depends on the order of removing).E.g. consider s=\"abacaba\" so the actions may be performed as follows:  t=\"abacaba\", the letter 'b' is selected, then s=\"aacaa\";  t=\"abacabaaacaa\", the letter 'a' is selected, then s=\"c\";  t=\"abacabaaacaac\", the letter 'c' is selected, then s=\"\" (the empty string). You need to restore the initial value of the string s using only the final value of t and find the order of removing letters from s.",
    "input_details": "The first line contains one integer T (1 <= T <= 10^4) — the number of test cases. Then T test cases follow.Each test case contains one string t consisting of lowercase letters of the Latin alphabet. The length of t doesn't exceed 5 . 10^5. The sum of lengths of all strings t in the test cases doesn't exceed 5 . 10^5.",
    "output_details": "For each test case output in a separate line:  -1, if the answer doesn't exist;  two strings separated by spaces. The first one must contain a possible initial value of s. The second one must contain a sequence of letters — it's in what order one needs to remove letters from s to make the string t. E.g. if the string \"bac\" is outputted, then, first, all occurrences of the letter 'b' were deleted, then all occurrences of 'a', and then, finally, all occurrences of 'c'. If there are multiple solutions, print any one. ",
    "sample_input": "7\nabacabaaacaac\nnowyouknowthat\npolycarppoycarppoyarppyarppyrpprppp\nisi\neverywherevrywhrvryhrvrhrvhv\nhaaha\nqweqeewew",
    "sample_output": "abacaba bac\n-1\npolycarp lcoayrp\nis si\neverywhere ewyrhv\n-1\n-1",
    "tags": ["binary search", "implementation", "sortings", "strings", "*1800"]
  },
  {
    "name": "Make a Power of Two",
    "question_id": "make-a-power-of-two",
    "question": "You are given an integer n. In 1 move, you can do one of the following actions:  erase any digit of the number (it's acceptable that the number before the operation has exactly one digit and after the operation, it is \"empty\");  add one digit to the right. The actions may be performed in any order any number of times.Note that if, after deleting some digit from a number, it will contain leading zeroes, they will not be deleted. E.g. if you delete from the number 301 the digit 3, the result is the number 01 (not 1).You need to perform the minimum number of actions to make the number any power of 2 (i.e. there's an integer k (k \\ge 0) such that the resulting number is equal to 2^k). The resulting number must not have leading zeroes.E.g. consider n=1052. The answer is equal to 2. First, let's add to the right one digit 4 (the result will be 10524). Then let's erase the digit 5, so the result will be 1024 which is a power of 2.E.g. consider n=8888. The answer is equal to 3. Let's erase any of the digits 8 three times. The result will be 8 which is a power of 2.",
    "input_details": "The first line contains one integer t (1 <= t <= 10^4) — the number of test cases. Then t test cases follow.Each test case consists of one line containing one integer n (1 <= n <= 10^9).",
    "output_details": "For each test case, output in a separate line one integer m — the minimum number of moves to transform the number into any power of 2.",
    "sample_input": "12\n1052\n8888\n6\n75\n128\n1\n301\n12048\n1504\n6656\n1000000000\n687194767",
    "sample_output": "2\n3\n1\n3\n0\n0\n2\n1\n3\n4\n9\n2",
    "tags": ["greedy", "math", "strings", "*1300"]
  },
  {
    "name": "Infinity Table",
    "question_id": "infinity-table",
    "question": "Polycarp has found a table having an infinite number of rows and columns. The rows are numbered from 1, starting from the topmost one. The columns are numbered from 1, starting from the leftmost one.Initially, the table hasn't been filled and Polycarp wants to fix it. He writes integers from 1 and so on to the table as follows.  The figure shows the placement of the numbers from 1 to 10. The following actions are denoted by the arrows. The leftmost topmost cell of the table is filled with the number 1. Then he writes in the table all positive integers beginning from 2 sequentially using the following algorithm.First, Polycarp selects the leftmost non-filled cell in the first row and fills it. Then, while the left neighbor of the last filled cell is filled, he goes down and fills the next cell. So he goes down until the last filled cell has a non-filled neighbor to the left (look at the vertical arrow going down in the figure above).After that, he fills the cells from the right to the left until he stops at the first column (look at the horizontal row in the figure above). Then Polycarp selects the leftmost non-filled cell in the first row, goes down, and so on.A friend of Polycarp has a favorite number k. He wants to know which cell will contain the number. Help him to find the indices of the row and the column, such that the intersection of the row and the column is the cell containing the number k.",
    "input_details": "The first line contains one integer t (1 <= t <= 100) — the number of test cases. Then t test cases follow.Each test case consists of one line containing one integer k (1 <= k <= 10^9) which location must be found.",
    "output_details": "For each test case, output in a separate line two integers r and c (r, c \\ge 1) separated by spaces — the indices of the row and the column containing the cell filled by the number k, respectively.",
    "sample_input": "7\n11\n14\n5\n4\n1\n2\n1000000000",
    "sample_output": "2 4\n4 3\n1 3\n2 1\n1 1\n1 2\n31623 14130",
    "tags": ["implementation", "math", "*800"]
  },
  {
    "name": "Who's Opposite?",
    "question_id": "whos-opposite",
    "question": "Some number of people (this number is even) have stood in a circle. The people stand in the circle evenly. They are numbered clockwise starting from a person with the number 1. Each person is looking through the circle's center at the opposite person.    A sample of a circle of 6 persons. The orange arrows indicate who is looking at whom. You don't know the exact number of people standing in the circle (but this number is even, no doubt). It is known that the person with the number a is looking at the person with the number b (and vice versa, of course). What is the number associated with a person being looked at by the person with the number c? If, for the specified a, b, and c, no such circle exists, output -1.",
    "input_details": "The first line contains one integer t (1 <= t <= 10^4) — the number of test cases. Then t test cases follow.Each test case consists of one line containing three distinct integers a, b, c (1 <= a,b,c <= 10^8).",
    "output_details": "For each test case output in a separate line a single integer d — the number of the person being looked at by the person with the number c in a circle such that the person with the number a is looking at the person with the number b. If there are multiple solutions, print any of them. Output -1 if there's no circle meeting the given conditions.",
    "sample_input": "7\n6 2 4\n2 3 1\n2 4 10\n5 3 4\n1 3 2\n2 5 4\n4 3 2",
    "sample_output": "8\n-1\n-1\n-1\n4\n1\n-1",
    "tags": ["math", "*800"]
  },
  {
    "name": "Dislike of Threes",
    "question_id": "dislike-of-threes",
    "question": "Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.Polycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).",
    "input_details": "The first line contains one integer t (1 <= t <= 100) — the number of test cases. Then t test cases follow.Each test case consists of one line containing one integer k (1 <= k <= 1000).",
    "output_details": "For each test case, output in a separate line one integer x — the k-th element of the sequence that was written out by Polycarp.",
    "sample_input": "10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000",
    "sample_output": "1\n2\n4\n5\n7\n8\n10\n11\n14\n1666",
    "tags": ["implementation", "*800"]
  },
  {
    "name": "Mocha and Stars",
    "question_id": "mocha-and-stars",
    "question": "Mocha wants to be an astrologer. There are n stars which can be seen in Zhijiang, and the brightness of the i-th star is a_i. Mocha considers that these n stars form a constellation, and she uses (a_1,a_2,....,a_n) to show its state. A state is called mathematical if all of the following three conditions are satisfied:  For all i (1<= i<= n), a_i is an integer in the range [l_i, r_i]. \\sum \\limits _{i=1} ^ n a_i <= m. gcd(a_1,a_2,....,a_n)=1. Here, gcd(a_1,a_2,....,a_n) denotes the greatest common divisor (GCD) of integers a_1,a_2,....,a_n.Mocha is wondering how many different mathematical states of this constellation exist. Because the answer may be large, you must find it modulo 998\\,244\\,353.Two states (a_1,a_2,....,a_n) and (b_1,b_2,....,b_n) are considered different if there exists i (1<= i<= n) such that a_i \n b_i.",
    "input_details": "The first line contains two integers n and m (2 <= n <= 50, 1 <= m <= 10^5) — the number of stars and the upper bound of the sum of the brightness of stars.Each of the next n lines contains two integers l_i and r_i (1 <= l_i <= r_i <= m) — the range of the brightness of the i-th star.",
    "output_details": "Print a single integer — the number of different mathematical states of this constellation, modulo 998\\,244\\,353.",
    "sample_input": "2 4\n1 3\n1 2",
    "sample_output": "4",
    "tags": ["combinatorics", "dp", "fft", "math", "number theory", "*2200"]
  },
  {
    "name": " Mocha and Diana (Hard Version)",
    "question_id": "mocha-and-diana-hard-version",
    "question": "This is the hard version of the problem. The only difference between the two versions is the constraint on n. You can make hacks only if all versions of the problem are solved.A forest is an undirected graph without cycles (not necessarily connected).Mocha and Diana are friends in Zhijiang, both of them have a forest with nodes numbered from 1 to n, and they would like to add edges to their forests such that:   After adding edges, both of their graphs are still forests.  They add the same edges. That is, if an edge (u, v) is added to Mocha's forest, then an edge (u, v) is added to Diana's forest, and vice versa. Mocha and Diana want to know the maximum number of edges they can add, and which edges to add.",
    "input_details": "The first line contains three integers n, m_1 and m_2 (1 <= n <= 10^5, 0 <= m_1, m_2 < n) — the number of nodes and the number of initial edges in Mocha's forest and Diana's forest.Each of the next m_1 lines contains two integers u and v (1 <= u, v <= n, u \nq v) — the edges in Mocha's forest.Each of the next m_2 lines contains two integers u and v (1 <= u, v <= n, u \nq v) — the edges in Diana's forest.",
    "output_details": "The first line contains only one integer h, the maximum number of edges Mocha and Diana can add.Each of the next h lines contains two integers u and v (1 <= u, v <= n, u \nq v) — the edge you add each time.If there are multiple correct answers, you can print any one of them.",
    "sample_input": "3 2 2\n1 2\n2 3\n1 2\n1 3",
    "sample_output": "0",
    "tags": [
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "trees",
      "two pointers",
      "*2500"
    ]
  },
  {
    "name": " Mocha and Diana (Easy Version)",
    "question_id": "mocha-and-diana-easy-version",
    "question": "This is the easy version of the problem. The only difference between the two versions is the constraint on n. You can make hacks only if all versions of the problem are solved.A forest is an undirected graph without cycles (not necessarily connected).Mocha and Diana are friends in Zhijiang, both of them have a forest with nodes numbered from 1 to n, and they would like to add edges to their forests such that:   After adding edges, both of their graphs are still forests.  They add the same edges. That is, if an edge (u, v) is added to Mocha's forest, then an edge (u, v) is added to Diana's forest, and vice versa. Mocha and Diana want to know the maximum number of edges they can add, and which edges to add.",
    "input_details": "The first line contains three integers n, m_1 and m_2 (1 <= n <= 1000, 0 <= m_1, m_2 < n) — the number of nodes and the number of initial edges in Mocha's forest and Diana's forest.Each of the next m_1 lines contains two integers u and v (1 <= u, v <= n, u \nq v) — the edges in Mocha's forest.Each of the next m_2 lines contains two integers u and v (1 <= u, v <= n, u \nq v) — the edges in Diana's forest.",
    "output_details": "The first line contains only one integer h, the maximum number of edges Mocha and Diana can add (in each forest).Each of the next h lines contains two integers u and v (1 <= u, v <= n, u \nq v) — the edge you add each time.If there are multiple correct answers, you can print any one of them.",
    "sample_input": "3 2 2\n1 2\n2 3\n1 2\n1 3",
    "sample_output": "0",
    "tags": [
      "brute force",
      "constructive algorithms",
      "dsu",
      "graphs",
      "greedy",
      "trees",
      "*1400"
    ]
  },
  {
    "name": "Mocha and Hiking",
    "question_id": "mocha-and-hiking",
    "question": "The city where Mocha lives in is called Zhijiang. There are n+1 villages and 2n-1 directed roads in this city. There are two kinds of roads:  n-1 roads are from village i to village i+1, for all 1<= i <= n-1.  n roads can be described by a sequence a_1,....,a_n. If a_i=0, the i-th of these roads goes from village i to village n+1, otherwise it goes from village n+1 to village i, for all 1<= i<= n. Mocha plans to go hiking with Taki this weekend. To avoid the trip being boring, they plan to go through every village exactly once. They can start and finish at any villages. Can you help them to draw up a plan? ",
    "input_details": "Each test contains multiple test cases. The first line contains a single integer t (1 <= t <= 20) — the number of test cases. Each test case consists of two lines.The first line of each test case contains a single integer n (1 <= n <= 10^4) — indicates that the number of villages is n+1.The second line of each test case contains n integers a_1, a_2, ...., a_n (0 <= a_i <= 1). If a_i=0, it means that there is a road from village i to village n+1. If a_i=1, it means that there is a road from village n+1 to village i.It is guaranteed that the sum of n over all test cases does not exceed 10^4.",
    "output_details": "For each test case, print a line with n+1 integers, where the i-th number is the i-th village they will go through. If the answer doesn't exist, print -1.If there are multiple correct answers, you can print any one of them.",
    "sample_input": "2\n3\n0 1 0\n3\n1 1 0",
    "sample_output": "1 4 2 3 \n4 1 2 3",
    "tags": ["constructive algorithms", "graphs", "*1200"]
  },
  {
    "name": "Mocha and Red and Blue",
    "question_id": "mocha-and-red-and-blue",
    "question": "As their story unravels, a timeless tale is told once again...Shirahime, a friend of Mocha's, is keen on playing the music game Arcaea and sharing Mocha interesting puzzles to solve. This day, Shirahime comes up with a new simple puzzle and wants Mocha to solve them. However, these puzzles are too easy for Mocha to solve, so she wants you to solve them and tell her the answers. The puzzles are described as follow.There are n squares arranged in a row, and each of them can be painted either red or blue.Among these squares, some of them have been painted already, and the others are blank. You can decide which color to paint on each blank square.Some pairs of adjacent squares may have the same color, which is imperfect. We define the imperfectness as the number of pairs of adjacent squares that share the same color.For example, the imperfectness of \"BRRRBBR\" is 3, with \"BB\" occurred once and \"RR\" occurred twice.Your goal is to minimize the imperfectness and print out the colors of the squares after painting. ",
    "input_details": "Each test contains multiple test cases. The first line contains a single integer t (1 <= t <= 100) — the number of test cases. Each test case consists of two lines.The first line of each test case contains an integer n (1<= n<= 100) — the length of the squares row.The second line of each test case contains a string s with length n, containing characters 'B', 'R' and '?'. Here 'B' stands for a blue square, 'R' for a red square, and '?' for a blank square.",
    "output_details": "For each test case, print a line with a string only containing 'B' and 'R', the colors of the squares after painting, which imperfectness is minimized. If there are multiple solutions, print any of them.",
    "sample_input": "5\n7\n?R???BR\n7\n???R???\n1\n?\n1\nB\n10\n?R??RB??B?",
    "sample_output": "BRRBRBR\nBRBRBRB\nB\nB\nBRRBRBBRBR",
    "tags": ["dp", "greedy", "*900"]
  },
  {
    "name": "Mocha and Math",
    "question_id": "mocha-and-math",
    "question": "Mocha is a young girl from high school. She has learned so much interesting knowledge from her teachers, especially her math teacher. Recently, Mocha is learning about binary system and very interested in bitwise operation.This day, Mocha got a sequence a of length n. In each operation, she can select an arbitrary interval [l, r] and for all values i (0<= i <= r-l), replace a_{l+i} with a_{l+i} \\,\\&\\, a_{r-i} at the same time, where \\& denotes the bitwise AND operation. This operation can be performed any number of times.For example, if n=5, the array is [a_1,a_2,a_3,a_4,a_5], and Mocha selects the interval [2,5], then the new array is [a_1,a_2\\,\\&\\, a_5, a_3\\,\\&\\, a_4, a_4\\,\\&\\, a_3, a_5\\,\\&\\, a_2].Now Mocha wants to minimize the maximum value in the sequence. As her best friend, can you help her to get the answer?",
    "input_details": "Each test contains multiple test cases. The first line contains a single integer t (1 <= t <= 100) — the number of test cases. Each test case consists of two lines.The first line of each test case contains a single integer n (1 <= n <= 100) — the length of the sequence.The second line of each test case contains n integers a_1, a_2, ...., a_n (0 <= a_i <= 10^9).",
    "output_details": "For each test case, print one integer — the minimal value of the maximum value in the sequence.",
    "sample_input": "4\n2\n1 2\n3\n1 1 3\n4\n3 11 3 7\n5\n11 7 15 3 7",
    "sample_output": "0\n1\n3\n3",
    "tags": ["bitmasks", "constructive algorithms", "math", "*900"]
  },
  {
    "name": "Strange Sort",
    "question_id": "strange-sort",
    "question": "You have a permutation: an array a = [a_1, a_2, ...., a_n] of distinct integers from 1 to n. The length of the permutation n is odd.Consider the following algorithm of sorting the permutation in increasing order.A helper procedure of the algorithm, f(i), takes a single argument i (1 <= i <= n-1) and does the following. If a_i > a_{i+1}, the values of a_i and a_{i+1} are exchanged. Otherwise, the permutation doesn't change.The algorithm consists of iterations, numbered with consecutive integers starting with 1. On the i-th iteration, the algorithm does the following:   if i is odd, call f(1), f(3), ...., f(n - 2);  if i is even, call f(2), f(4), ...., f(n - 1). It can be proven that after a finite number of iterations the permutation will be sorted in increasing order.After how many iterations will this happen for the first time?",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases t (1 <= t <= 10^4). Description of the test cases follows.The first line of each test case contains a single integer n (3 <= n <= 2 . 10^5 - 1; n is odd) — the length of the permutation.The second line contains n distinct integers a_1, a_2, ...., a_n (1 <= a_i <= n) — the permutation itself. It is guaranteed that the sum of n over all test cases does not exceed 2 . 10^5 - 1.",
    "output_details": "For each test case print the number of iterations after which the permutation will become sorted in increasing order for the first time.If the given permutation is already sorted, print 0.",
    "sample_input": "3\n3\n3 2 1\n7\n4 5 7 1 3 2 6\n5\n1 2 3 4 5",
    "sample_output": "3\n5\n0",
    "tags": ["data structures", "sortings", "*3300"]
  },
  {
    "name": "Down Below",
    "question_id": "down-below",
    "question": "In a certain video game, the player controls a hero characterized by a single integer value: power.On the current level, the hero got into a system of n caves numbered from 1 to n, and m tunnels between them. Each tunnel connects two distinct caves. Any two caves are connected with at most one tunnel. Any cave can be reached from any other cave by moving via tunnels.The hero starts the level in cave 1, and every other cave contains a monster.The hero can move between caves via tunnels. If the hero leaves a cave and enters a tunnel, he must finish his movement and arrive at the opposite end of the tunnel.The hero can use each tunnel to move in both directions. However, the hero can not use the same tunnel twice in a row. Formally, if the hero has just moved from cave i to cave j via a tunnel, he can not head back to cave i immediately after, but he can head to any other cave connected to cave j with a tunnel.It is known that at least two tunnels come out of every cave, thus, the hero will never find himself in a dead end even considering the above requirement.To pass the level, the hero must beat the monsters in all the caves. When the hero enters a cave for the first time, he will have to fight the monster in it. The hero can beat the monster in cave i if and only if the hero's power is strictly greater than a_i. In case of beating the monster, the hero's power increases by b_i. If the hero can't beat the monster he's fighting, the game ends and the player loses.After the hero beats the monster in cave i, all subsequent visits to cave i won't have any consequences: the cave won't have any monsters, and the hero's power won't change either.Find the smallest possible power the hero must start the level with to be able to beat all the monsters and pass the level.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases t (1 <= t <= 100). Description of the test cases follows.The first line of each test case contains two integers n and m (3 <= n <= 1000; n <= m <= min(\\frac{n(n-1)}{2}, 2000)) — the number of caves and tunnels.The second line contains n-1 integers a_2, a_3, ...., a_n (1 <= a_i <= 10^9) — values the hero's power are compared to while fighting monsters in caves 2, 3, ...., n.The third line contains n-1 integers b_2, b_3, ...., b_n (1 <= b_i <= 10^9) — increases applied to the hero's power for beating monsters in caves 2, 3, ...., n.Each of the next m lines contains two integers u_i and v_i (1 <= u_i, v_i <= n; u_i \n v_i) — the numbers of caves connected with a tunnel.No two caves are connected with more than one tunnel. Any cave can be reached from any other cave by moving via tunnels. At least two tunnels come out of every cave.It is guaranteed that the sum of n over all test cases does not exceed 1000, and the sum of m over all test cases does not exceed 2000.",
    "output_details": "For each test case print a single integer — the smallest possible power the hero must start the level with to be able to beat all the monsters and pass the level.",
    "sample_input": "3\n4 4\n11 22 13\n8 7 5\n1 2\n2 3\n3 4\n4 1\n4 4\n11 22 13\n5 7 8\n1 2\n2 3\n3 4\n4 1\n5 7\n10 40 20 30\n7 2 10 5\n1 2\n1 5\n2 3\n2 4\n2 5\n3 4\n4 5",
    "sample_output": "15\n15\n19",
    "tags": [
      "binary search",
      "dfs and similar",
      "graphs",
      "greedy",
      "meet-in-the-middle",
      "shortest paths",
      "*3000"
    ]
  },
  {
    "name": "Top-Notch Insertions",
    "question_id": "top-notch-insertions",
    "question": "Consider the insertion sort algorithm used to sort an integer sequence [a_1, a_2, ...., a_n] of length n in non-decreasing order.For each i in order from 2 to n, do the following. If a_i \\ge a_{i-1}, do nothing and move on to the next value of i. Otherwise, find the smallest j such that a_i < a_j, shift the elements on positions from j to i-1 by one position to the right, and write down the initial value of a_i to position j. In this case we'll say that we performed an insertion of an element from position i to position j.It can be noticed that after processing any i, the prefix of the sequence [a_1, a_2, ...., a_i] is sorted in non-decreasing order, therefore, the algorithm indeed sorts any sequence.For example, sorting [4, 5, 3, 1, 3] proceeds as follows:   i = 2: a_2 \\ge a_1, do nothing;  i = 3: j = 1, insert from position 3 to position 1: [3, 4, 5, 1, 3];  i = 4: j = 1, insert from position 4 to position 1: [1, 3, 4, 5, 3];  i = 5: j = 3, insert from position 5 to position 3: [1, 3, 3, 4, 5]. You are given an integer n and a list of m integer pairs (x_i, y_i). We are interested in sequences such that if you sort them using the above algorithm, exactly m insertions will be performed: first from position x_1 to position y_1, then from position x_2 to position y_2, ..., finally, from position x_m to position y_m.How many sequences of length n consisting of (not necessarily distinct) integers between 1 and n, inclusive, satisfy the above condition? Print this number modulo 998\\,244\\,353.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases t (1 <= t <= 10^5). Description of the test cases follows.The first line of each test case contains two integers n and m (2 <= n <= 2 . 10^5; 0 <= m < n) — the length of the sequence and the number of insertions.The i-th of the following m lines contains two integers x_i and y_i (2 <= x_1 < x_2 < .... < x_m <= n; 1 <= y_i < x_i). These lines describe the sequence of insertions in chronological order.It is guaranteed that the sum of m over all test cases does not exceed 2 . 10^5. Note that there is no constraint on the sum of n of the same kind.",
    "output_details": "For each test case, print the number of sequences of length n consisting of integers from 1 to n such that sorting them with the described algorithm produces the given sequence of insertions, modulo 998\\,244\\,353.",
    "sample_input": "3\n3 0\n3 2\n2 1\n3 1\n5 3\n3 1\n4 1\n5 3",
    "sample_output": "10\n1\n21",
    "tags": ["combinatorics", "data structures", "*2600"]
  },
  {
    "name": "Bottom-Tier Reversals",
    "question_id": "bottom-tier-reversals",
    "question": "You have a permutation: an array a = [a_1, a_2, ...., a_n] of distinct integers from 1 to n. The length of the permutation n is odd.You need to sort the permutation in increasing order.In one step, you can choose any prefix of the permutation with an odd length and reverse it. Formally, if a = [a_1, a_2, ...., a_n], you can choose any odd integer p between 1 and n, inclusive, and set a to [a_p, a_{p-1}, ...., a_1, a_{p+1}, a_{p+2}, ...., a_n].Find a way to sort a using no more than \\frac{5n}{2} reversals of the above kind, or determine that such a way doesn't exist. The number of reversals doesn't have to be minimized.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases t (1 <= t <= 100). Description of the test cases follows.The first line of each test case contains a single integer n (3 <= n <= 2021; n is odd) — the length of the permutation.The second line contains n distinct integers a_1, a_2, ...., a_n (1 <= a_i <= n) — the permutation itself. It is guaranteed that the sum of n over all test cases does not exceed 2021.",
    "output_details": "For each test case, if it's impossible to sort the given permutation in at most \\frac{5n}{2} reversals, print a single integer -1.Otherwise, print an integer m (0 <= m <= \\frac{5n}{2}), denoting the number of reversals in your sequence of steps, followed by m integers p_i (1 <= p_i <= n; p_i is odd), denoting the lengths of the prefixes of a to be reversed, in chronological order.Note that m doesn't have to be minimized. If there are multiple answers, print any.",
    "sample_input": "3\n3\n1 2 3\n5\n3 4 5 2 1\n3\n2 1 3",
    "sample_output": "4\n3 3 3 3\n2\n3 5\n-1",
    "tags": ["constructive algorithms", "greedy", "*2000"]
  },
  {
    "name": "Up the Strip",
    "question_id": "up-the-strip",
    "question": "Note that the memory limit in this problem is lower than in others.You have a vertical strip with n cells, numbered consecutively from 1 to n from top to bottom.You also have a token that is initially placed in cell n. You will move the token up until it arrives at cell 1.Let the token be in cell x > 1 at some moment. One shift of the token can have either of the following kinds:   Subtraction: you choose an integer y between 1 and x-1, inclusive, and move the token from cell x to cell x - y.  Floored division: you choose an integer z between 2 and x, inclusive, and move the token from cell x to cell \\lfloor \\frac{x}{z} \\rfloor (x divided by z rounded down). Find the number of ways to move the token from cell n to cell 1 using one or more shifts, and print it modulo m. Note that if there are several ways to move the token from one cell to another in one shift, all these ways are considered distinct (check example explanation for a better understanding).",
    "input_details": "The only line contains two integers n and m (2 <= n <= 4 . 10^6; 10^8 < m < 10^9; m is a prime number) — the length of the strip and the modulo.",
    "output_details": "Print the number of ways to move the token from cell n to cell 1, modulo m.",
    "sample_input": "3 998244353",
    "sample_output": "5",
    "tags": [
      "brute force",
      "dp",
      "math",
      "number theory",
      "two pointers",
      "*1900"
    ]
  },
  {
    "name": "Charmed by the Game",
    "question_id": "charmed-by-the-game",
    "question": "Alice and Borys are playing tennis.A tennis match consists of games. In each game, one of the players is serving and the other one is receiving.Players serve in turns: after a game where Alice is serving follows a game where Borys is serving, and vice versa.Each game ends with a victory of one of the players. If a game is won by the serving player, it's said that this player holds serve. If a game is won by the receiving player, it's said that this player breaks serve.It is known that Alice won a games and Borys won b games during the match. It is unknown who served first and who won which games.Find all values of k such that exactly k breaks could happen during the match between Alice and Borys in total.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases t (1 <= t <= 10^3). Description of the test cases follows.Each of the next t lines describes one test case and contains two integers a and b (0 <= a, b <= 10^5; a + b > 0) — the number of games won by Alice and Borys, respectively.It is guaranteed that the sum of a + b over all test cases does not exceed 2 . 10^5.",
    "output_details": "For each test case print two lines.In the first line, print a single integer m (1 <= m <= a + b + 1) — the number of values of k such that exactly k breaks could happen during the match.In the second line, print m distinct integers k_1, k_2, ...., k_m (0 <= k_1 < k_2 < .... < k_m <= a + b) — the sought values of k in increasing order.",
    "sample_input": "3\n2 1\n1 1\n0 5",
    "sample_output": "4\n0 1 2 3\n2\n0 2\n2\n2 3",
    "tags": ["brute force", "math", "*1300"]
  },
  {
    "name": "Assiut Chess",
    "question_id": "assiut-chess",
    "question": "This is an interactive problem.ICPC Assiut Community decided to hold a unique chess contest, and you were chosen to control a queen and hunt down the hidden king, while a member of ICPC Assiut Community controls this king.You compete on an 8*8 chessboard, the rows are numerated from top to bottom, and the columns are numerated left to right, and the cell in row x and column y is denoted as (x, y).In one turn you can move the queen to any of the squares on the same horizontal line, vertical line, or any of the diagonals. For example, if the queen was on square (4, 5), you can move to (q_1, 5), (4, q_1), (q_1, 9-q_1), or (q_2, q_2+1) where (1 <= q_1 <= 8, q_1 \n 4, 1 <= q_2 <= 7, q_2 \n 4). Note that the queen cannot stay on its current cell.   In one turn, the king can move \"Right\", \"Left\", \"Up\", \"Down\", \"Down-Right\", \"Down-Left\", \"Up-Left\", or \"Up-Right\" such that he doesn't get out of the board. The king cannot move into a cell that is on the same row, column or diagonal with the queen (including the position of the queen itself). For example, if the king was on square (4, 5), he can move to (4+k_1, 5+k_2) where (-1 <= k_1,k_2 <= 1, (k_1, k_2) \n (0, 0)).   At the start of the game, you should place the queen at any location on the board, and this is done once per game. After that the king is secretly placed at any cell different from the queen's location. You do not know the position of the king. Then, the king and the queen take turns with the king moving first. The king moves to one of the possible directions (\"Right\", \"Down\", \"Up-Left\", etc.), and you are only given the direction it moves to. After that, you should move your queen by declaring the square to which your queen will move. The game follows like this until you win the game or run out of moves.You win if the king has no valid moves. You lose if after 130 moves of the queen the king still has valid moves.",
    "input_details": "The first line contains a single integer t (1 <= t <= 60) — the number of test cases.",
    "output_details": "ctionIn each test case, you should print the queen's starting cell immediately. If you placed the queen at the king's cell, you will win immediately.After that, you may make at most 130 moves. Each move is made in the format x y, where x and y are two integers (1 <= x,y <= 8) that denote the new row and column of the queen respectively. Your move should be a valid queen move.After the initial queen placement and after each move you will receive a string s that represents the direction of the king's move. It will be one of the following: \"Right\", \"Left\", \"Up\", \"Down\", \"Down-Right\", \"Down-Left\", \"Up-Left\", \"Up-Right\", or \"Done\" if you win the game. You should consider \"Done\" as the end of each test case.After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush(stdout) or cout.flush() in C++; System.out.flush() in Java; flush(output) in Pascal; stdout.flush() in Python; see documentation for other languages.If at any point you make an invalid query or try to make more than 130 queries for each test case, the game will terminate immediately and you will receive a Wrong Answer verdict.",
    "sample_input": "1\nLeft\nRight\nDone",
    "sample_output": "7 5\n7 6\n7 7",
    "tags": ["brute force", "constructive algorithms", "interactive", "*2800"]
  },
  {
    "name": "Ezzat and Grid",
    "question_id": "ezzat-and-grid",
    "question": "Moamen was drawing a grid of n rows and 10^9 columns containing only digits 0 and 1. Ezzat noticed what Moamen was drawing and became interested in the minimum number of rows one needs to remove to make the grid beautiful.A grid is beautiful if and only if for every two consecutive rows there is at least one column containing 1 in these two rows.Ezzat will give you the number of rows n, and m segments of the grid that contain digits 1. Every segment is represented with three integers i, l, and r, where i represents the row number, and l and r represent the first and the last column of the segment in that row.For example, if n = 3, m = 6, and the segments are (1,1,1), (1,7,8), (2,7,7), (2,15,15), (3,1,1), (3,15,15), then the grid is:  Your task is to tell Ezzat the minimum number of rows that should be removed to make the grid beautiful.",
    "input_details": "The first line contains two integers n and m (1 <= n, m <= 3.10^5).Each of the next m lines contains three integers i, l, and r (1 <= i <= n, 1 <= l <= r <= 10^9). Each of these m lines means that row number i contains digits 1 in columns from l to r, inclusive.Note that the segments may overlap.",
    "output_details": "In the first line, print a single integer k — the minimum number of rows that should be removed.In the second line print k distinct integers r_1, r_2, ...., r_k, representing the rows that should be removed (1 <= r_i <= n), in any order.If there are multiple answers, print any.",
    "sample_input": "3 6\n1 1 1\n1 7 8\n2 7 7\n2 15 15\n3 1 1\n3 15 15",
    "sample_output": "0",
    "tags": ["data structures", "dp", "greedy", "*2200"]
  },
  {
    "name": "Moamen and XOR",
    "question_id": "moamen-and-xor",
    "question": "Moamen and Ezzat are playing a game. They create an array a of n non-negative integers where every element is less than 2^k.Moamen wins if a_1 \\,\\&\\, a_2 \\,\\&\\, a_3 \\,\\&\\, .... \\,\\&\\, a_n \\ge a_1 \\oplus a_2 \\oplus a_3 \\oplus .... \\oplus a_n.Here \\& denotes the bitwise AND operation, and \\oplus denotes the bitwise XOR operation.Please calculate the number of winning for Moamen arrays a.As the result may be very large, print the value modulo 1\\,000\\,000\\,007 (10^9 + 7).",
    "input_details": "The first line contains a single integer t (1 <= t <= 5)— the number of test cases. Each test case consists of one line containing two integers n and k (1 <= n<= 2. 10^5, 0 <= k <= 2. 10^5).",
    "output_details": "For each test case, print a single value — the number of different arrays that Moamen wins with.Print the result modulo 1\\,000\\,000\\,007 (10^9 + 7).",
    "sample_input": "3\n3 1\n2 1\n4 0",
    "sample_output": "5\n2\n1",
    "tags": ["bitmasks", "combinatorics", "dp", "math", "matrices", "*1700"]
  },
  {
    "name": "Moamen and k-subarrays",
    "question_id": "moamen-and-k-subarrays",
    "question": "Moamen has an array of n distinct integers. He wants to sort that array in non-decreasing order by doing the following operations in order exactly once:  Split the array into exactly k non-empty subarrays such that each element belongs to exactly one subarray.  Reorder these subarrays arbitrary.  Merge the subarrays in their new order. A sequence a is a subarray of a sequence b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.Can you tell Moamen if there is a way to sort the array in non-decreasing order using the operations written above?",
    "input_details": "The first line contains a single integer t (1 <= t <= 10^3) — the number of test cases. The description of the test cases follows.The first line of each test case contains two integers n and k (1 <= k <= n <= 10^5).The second line contains n integers a_1, a_2, ...., a_n (0 <= |a_i| <= 10^9). It is guaranteed that all numbers are distinct.It is guaranteed that the sum of n over all test cases does not exceed 3.10^5.",
    "output_details": "For each test case, you should output a single string.If Moamen can sort the array in non-decreasing order, output \"YES\" (without quotes). Otherwise, output \"NO\" (without quotes).You can print each letter of \"YES\" and \"NO\" in any case (upper or lower).",
    "sample_input": "3\n5 4\n6 3 4 2 1\n4 2\n1 -4 0 -2\n5 1\n1 2 3 4 5",
    "sample_output": "Yes\nNo\nYes",
    "tags": ["greedy", "sortings", "*1100"]
  },
  {
    "name": "Ezzat and Two Subsequences",
    "question_id": "ezzat-and-two-subsequences",
    "question": "Ezzat has an array of n integers (maybe negative). He wants to split it into two non-empty subsequences a and b, such that every element from the array belongs to exactly one subsequence, and the value of f(a) + f(b) is the maximum possible value, where f(x) is the average of the subsequence x. A sequence x is a subsequence of a sequence y if x can be obtained from y by deletion of several (possibly, zero or all) elements.The average of a subsequence is the sum of the numbers of this subsequence divided by the size of the subsequence.For example, the average of [1,5,6] is (1+5+6)/3 = 12/3 = 4, so f([1,5,6]) = 4.",
    "input_details": "The first line contains a single integer t (1 <= t <= 10^3)— the number of test cases. Each test case consists of two lines.The first line contains a single integer n (2 <= n <= 10^5).The second line contains n integers a_1, a_2, ...., a_n (-10^9 <= a_i <= 10^9).It is guaranteed that the sum of n over all test cases does not exceed 3.10^5.",
    "output_details": "For each test case, print a single value — the maximum value that Ezzat can achieve.Your answer is considered correct if its absolute or relative error does not exceed 10^{-6}.Formally, let your answer be a, and the jury's answer be b. Your answer is accepted if and only if \\frac{|a - b|}{\\max{(1, |b|)}} <= 10^{-6}.",
    "sample_input": "4\n3\n3 1 2\n3\n-7 -6 -6\n3\n2 2 2\n4\n17 3 5 -3",
    "sample_output": "4.500000000\n-12.500000000\n4.000000000\n18.666666667",
    "tags": ["brute force", "math", "sortings", "*800"]
  },
  {
    "name": "DIY Tree",
    "question_id": "diy-tree",
    "question": "  William really likes puzzle kits. For one of his birthdays, his friends gifted him a complete undirected edge-weighted graph consisting of n vertices.He wants to build a spanning tree of this graph, such that for the first k vertices the following condition is satisfied: the degree of a vertex with index i does not exceed d_i. Vertices from k + 1 to n may have any degree.William wants you to find the minimum weight of a spanning tree that satisfies all the conditions.A spanning tree is a subset of edges of a graph that forms a tree on all n vertices of the graph. The weight of a spanning tree is defined as the sum of weights of all the edges included in a spanning tree.",
    "input_details": "The first line of input contains two integers n, k (2 <= n <= 50, 1 <= k <= min(n - 1, 5)).The second line contains k integers d_1, d_2, ...., d_k (1 <= d_i <= n). The i-th of the next n - 1 lines contains n - i integers w_{i,i+1}, w_{i,i+2}, ...., w_{i,n} (1 <= w_{i,j} <= 100): weights of edges (i,i+1),(i,i+2),....,(i,n).",
    "output_details": "Print one integer: the minimum weight of a spanning tree under given degree constraints for the first k vertices. ",
    "sample_input": "10 5\n5 3 4 2 1\n29 49 33 12 55 15 32 62 37\n61 26 15 58 15 22 8 58\n37 16 9 39 20 14 58\n10 15 40 3 19 55\n53 13 37 44 52\n23 59 58 4\n69 80 29\n89 28\n48",
    "sample_output": "95",
    "tags": ["graphs", "greedy", "math", "probabilities", "*3300"]
  },
  {
    "name": "Gates to Another World",
    "question_id": "gates-to-another-world",
    "question": "  As mentioned previously William really likes playing video games. In one of his favorite games, the player character is in a universe where every planet is designated by a binary number from 0 to 2^n - 1. On each planet, there are gates that allow the player to move from planet i to planet j if the binary representations of i and j differ in exactly one bit.William wants to test you and see how you can handle processing the following queries in this game universe:  Destroy planets with numbers from l to r inclusively. These planets cannot be moved to anymore. Figure out if it is possible to reach planet b from planet a using some number of planetary gates. It is guaranteed that the planets a and b are not destroyed. ",
    "input_details": "The first line contains two integers n, m (1 <= n <= 50, 1 <= m <= 5 . 10^4), which are the number of bits in binary representation of each planets' designation and the number of queries, respectively.Each of the next m lines contains a query of two types:block l r — query for destruction of planets with numbers from l to r inclusively (0 <= l <= r < 2^n). It's guaranteed that no planet will be destroyed twice.ask a b — query for reachability between planets a and b (0 <= a, b < 2^n). It's guaranteed that planets a and b hasn't been destroyed yet.",
    "output_details": "For each query of type ask you must output \"1\" in a new line, if it is possible to reach planet b from planet a and \"0\" otherwise (without quotation marks).",
    "sample_input": "3 3\nask 0 7\nblock 3 6\nask 0 7",
    "sample_output": "1\n0",
    "tags": ["bitmasks", "data structures", "dsu", "two pointers", "*3300"]
  }
]

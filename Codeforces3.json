[
  {
    "name": "Mocha and Math",
    "question_id": "mocha-and-math",
    "question": "Mocha is a young girl from high school. She has learned so much interesting knowledge from her teachers, especially her math teacher. Recently, Mocha is learning about binary system and very interested in bitwise operation.This day, Mocha got a sequence $$$a$$$ of length $$$n$$$. In each operation, she can select an arbitrary interval $$$[l, r]$$$ and for all values $$$i$$$ ($$$0\\leq i \\leq r-l$$$), replace $$$a_{l+i}$$$ with $$$a_{l+i} \\,\\&\\, a_{r-i}$$$ at the same time, where $$$\\&$$$ denotes the bitwise AND operation. This operation can be performed any number of times.For example, if $$$n=5$$$, the array is $$$[a_1,a_2,a_3,a_4,a_5]$$$, and Mocha selects the interval $$$[2,5]$$$, then the new array is $$$[a_1,a_2\\,\\&\\, a_5, a_3\\,\\&\\, a_4, a_4\\,\\&\\, a_3, a_5\\,\\&\\, a_2]$$$.Now Mocha wants to minimize the maximum value in the sequence. As her best friend, can you help her to get the answer?",
    "input_details": "Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. Each test case consists of two lines.The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 100$$$) — the length of the sequence.The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\le a_i \\le 10^9$$$).",
    "output_details": "For each test case, print one integer — the minimal value of the maximum value in the sequence.",
    "sample_input": "4\n2\n1 2\n3\n1 1 3\n4\n3 11 3 7\n5\n11 7 15 3 7",
    "sample_output": "0\n1\n3\n3",
    "tags": ["bitmasks", "constructive algorithms", "math", "*900"]
  },
  {
    "name": "Strange Sort",
    "question_id": "strange-sort",
    "question": "You have a permutation: an array $$$a = [a_1, a_2, \\ldots, a_n]$$$ of distinct integers from $$$1$$$ to $$$n$$$. The length of the permutation $$$n$$$ is odd.Consider the following algorithm of sorting the permutation in increasing order.A helper procedure of the algorithm, $$$f(i)$$$, takes a single argument $$$i$$$ ($$$1 \\le i \\le n-1$$$) and does the following. If $$$a_i > a_{i+1}$$$, the values of $$$a_i$$$ and $$$a_{i+1}$$$ are exchanged. Otherwise, the permutation doesn't change.The algorithm consists of iterations, numbered with consecutive integers starting with $$$1$$$. On the $$$i$$$-th iteration, the algorithm does the following:   if $$$i$$$ is odd, call $$$f(1), f(3), \\ldots, f(n - 2)$$$;  if $$$i$$$ is even, call $$$f(2), f(4), \\ldots, f(n - 1)$$$. It can be proven that after a finite number of iterations the permutation will be sorted in increasing order.After how many iterations will this happen for the first time?",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^4$$$). Description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$3 \\le n \\le 2 \\cdot 10^5 - 1$$$; $$$n$$$ is odd) — the length of the permutation.The second line contains $$$n$$$ distinct integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le n$$$) — the permutation itself. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5 - 1$$$.",
    "output_details": "For each test case print the number of iterations after which the permutation will become sorted in increasing order for the first time.If the given permutation is already sorted, print $$$0$$$.",
    "sample_input": "3\n3\n3 2 1\n7\n4 5 7 1 3 2 6\n5\n1 2 3 4 5",
    "sample_output": "3\n5\n0",
    "tags": ["data structures", "sortings", "*3300"]
  },
  {
    "name": "Down Below",
    "question_id": "down-below",
    "question": "In a certain video game, the player controls a hero characterized by a single integer value: power.On the current level, the hero got into a system of $$$n$$$ caves numbered from $$$1$$$ to $$$n$$$, and $$$m$$$ tunnels between them. Each tunnel connects two distinct caves. Any two caves are connected with at most one tunnel. Any cave can be reached from any other cave by moving via tunnels.The hero starts the level in cave $$$1$$$, and every other cave contains a monster.The hero can move between caves via tunnels. If the hero leaves a cave and enters a tunnel, he must finish his movement and arrive at the opposite end of the tunnel.The hero can use each tunnel to move in both directions. However, the hero can not use the same tunnel twice in a row. Formally, if the hero has just moved from cave $$$i$$$ to cave $$$j$$$ via a tunnel, he can not head back to cave $$$i$$$ immediately after, but he can head to any other cave connected to cave $$$j$$$ with a tunnel.It is known that at least two tunnels come out of every cave, thus, the hero will never find himself in a dead end even considering the above requirement.To pass the level, the hero must beat the monsters in all the caves. When the hero enters a cave for the first time, he will have to fight the monster in it. The hero can beat the monster in cave $$$i$$$ if and only if the hero's power is strictly greater than $$$a_i$$$. In case of beating the monster, the hero's power increases by $$$b_i$$$. If the hero can't beat the monster he's fighting, the game ends and the player loses.After the hero beats the monster in cave $$$i$$$, all subsequent visits to cave $$$i$$$ won't have any consequences: the cave won't have any monsters, and the hero's power won't change either.Find the smallest possible power the hero must start the level with to be able to beat all the monsters and pass the level.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 100$$$). Description of the test cases follows.The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$3 \\le n \\le 1000$$$; $$$n \\le m \\le min(\\frac{n(n-1)}{2}, 2000)$$$) — the number of caves and tunnels.The second line contains $$$n-1$$$ integers $$$a_2, a_3, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$) — values the hero's power are compared to while fighting monsters in caves $$$2, 3, \\ldots, n$$$.The third line contains $$$n-1$$$ integers $$$b_2, b_3, \\ldots, b_n$$$ ($$$1 \\le b_i \\le 10^9$$$) — increases applied to the hero's power for beating monsters in caves $$$2, 3, \\ldots, n$$$.Each of the next $$$m$$$ lines contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1 \\le u_i, v_i \\le n$$$; $$$u_i \\ne v_i$$$) — the numbers of caves connected with a tunnel.No two caves are connected with more than one tunnel. Any cave can be reached from any other cave by moving via tunnels. At least two tunnels come out of every cave.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$1000$$$, and the sum of $$$m$$$ over all test cases does not exceed $$$2000$$$.",
    "output_details": "For each test case print a single integer — the smallest possible power the hero must start the level with to be able to beat all the monsters and pass the level.",
    "sample_input": "3\n4 4\n11 22 13\n8 7 5\n1 2\n2 3\n3 4\n4 1\n4 4\n11 22 13\n5 7 8\n1 2\n2 3\n3 4\n4 1\n5 7\n10 40 20 30\n7 2 10 5\n1 2\n1 5\n2 3\n2 4\n2 5\n3 4\n4 5",
    "sample_output": "15\n15\n19",
    "tags": [
      "binary search",
      "dfs and similar",
      "graphs",
      "greedy",
      "meet-in-the-middle",
      "shortest paths",
      "*3000"
    ]
  },
  {
    "name": "Top-Notch Insertions",
    "question_id": "top-notch-insertions",
    "question": "Consider the insertion sort algorithm used to sort an integer sequence $$$[a_1, a_2, \\ldots, a_n]$$$ of length $$$n$$$ in non-decreasing order.For each $$$i$$$ in order from $$$2$$$ to $$$n$$$, do the following. If $$$a_i \\ge a_{i-1}$$$, do nothing and move on to the next value of $$$i$$$. Otherwise, find the smallest $$$j$$$ such that $$$a_i < a_j$$$, shift the elements on positions from $$$j$$$ to $$$i-1$$$ by one position to the right, and write down the initial value of $$$a_i$$$ to position $$$j$$$. In this case we'll say that we performed an insertion of an element from position $$$i$$$ to position $$$j$$$.It can be noticed that after processing any $$$i$$$, the prefix of the sequence $$$[a_1, a_2, \\ldots, a_i]$$$ is sorted in non-decreasing order, therefore, the algorithm indeed sorts any sequence.For example, sorting $$$[4, 5, 3, 1, 3]$$$ proceeds as follows:   $$$i = 2$$$: $$$a_2 \\ge a_1$$$, do nothing;  $$$i = 3$$$: $$$j = 1$$$, insert from position $$$3$$$ to position $$$1$$$: $$$[3, 4, 5, 1, 3]$$$;  $$$i = 4$$$: $$$j = 1$$$, insert from position $$$4$$$ to position $$$1$$$: $$$[1, 3, 4, 5, 3]$$$;  $$$i = 5$$$: $$$j = 3$$$, insert from position $$$5$$$ to position $$$3$$$: $$$[1, 3, 3, 4, 5]$$$. You are given an integer $$$n$$$ and a list of $$$m$$$ integer pairs $$$(x_i, y_i)$$$. We are interested in sequences such that if you sort them using the above algorithm, exactly $$$m$$$ insertions will be performed: first from position $$$x_1$$$ to position $$$y_1$$$, then from position $$$x_2$$$ to position $$$y_2$$$, ..., finally, from position $$$x_m$$$ to position $$$y_m$$$.How many sequences of length $$$n$$$ consisting of (not necessarily distinct) integers between $$$1$$$ and $$$n$$$, inclusive, satisfy the above condition? Print this number modulo $$$998\\,244\\,353$$$.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^5$$$). Description of the test cases follows.The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$; $$$0 \\le m < n$$$) — the length of the sequence and the number of insertions.The $$$i$$$-th of the following $$$m$$$ lines contains two integers $$$x_i$$$ and $$$y_i$$$ ($$$2 \\le x_1 < x_2 < \\ldots < x_m \\le n$$$; $$$1 \\le y_i < x_i$$$). These lines describe the sequence of insertions in chronological order.It is guaranteed that the sum of $$$m$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$. Note that there is no constraint on the sum of $$$n$$$ of the same kind.",
    "output_details": "For each test case, print the number of sequences of length $$$n$$$ consisting of integers from $$$1$$$ to $$$n$$$ such that sorting them with the described algorithm produces the given sequence of insertions, modulo $$$998\\,244\\,353$$$.",
    "sample_input": "3\n3 0\n3 2\n2 1\n3 1\n5 3\n3 1\n4 1\n5 3",
    "sample_output": "10\n1\n21",
    "tags": ["combinatorics", "data structures", "*2600"]
  },
  {
    "name": "Bottom-Tier Reversals",
    "question_id": "bottom-tier-reversals",
    "question": "You have a permutation: an array $$$a = [a_1, a_2, \\ldots, a_n]$$$ of distinct integers from $$$1$$$ to $$$n$$$. The length of the permutation $$$n$$$ is odd.You need to sort the permutation in increasing order.In one step, you can choose any prefix of the permutation with an odd length and reverse it. Formally, if $$$a = [a_1, a_2, \\ldots, a_n]$$$, you can choose any odd integer $$$p$$$ between $$$1$$$ and $$$n$$$, inclusive, and set $$$a$$$ to $$$[a_p, a_{p-1}, \\ldots, a_1, a_{p+1}, a_{p+2}, \\ldots, a_n]$$$.Find a way to sort $$$a$$$ using no more than $$$\\frac{5n}{2}$$$ reversals of the above kind, or determine that such a way doesn't exist. The number of reversals doesn't have to be minimized.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 100$$$). Description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$3 \\le n \\le 2021$$$; $$$n$$$ is odd) — the length of the permutation.The second line contains $$$n$$$ distinct integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le n$$$) — the permutation itself. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2021$$$.",
    "output_details": "For each test case, if it's impossible to sort the given permutation in at most $$$\\frac{5n}{2}$$$ reversals, print a single integer $$$-1$$$.Otherwise, print an integer $$$m$$$ ($$$0 \\le m \\le \\frac{5n}{2}$$$), denoting the number of reversals in your sequence of steps, followed by $$$m$$$ integers $$$p_i$$$ ($$$1 \\le p_i \\le n$$$; $$$p_i$$$ is odd), denoting the lengths of the prefixes of $$$a$$$ to be reversed, in chronological order.Note that $$$m$$$ doesn't have to be minimized. If there are multiple answers, print any.",
    "sample_input": "3\n3\n1 2 3\n5\n3 4 5 2 1\n3\n2 1 3",
    "sample_output": "4\n3 3 3 3\n2\n3 5\n-1",
    "tags": ["constructive algorithms", "greedy", "*2000"]
  },
  {
    "name": "Up the Strip",
    "question_id": "up-the-strip",
    "question": "Note that the memory limit in this problem is lower than in others.You have a vertical strip with $$$n$$$ cells, numbered consecutively from $$$1$$$ to $$$n$$$ from top to bottom.You also have a token that is initially placed in cell $$$n$$$. You will move the token up until it arrives at cell $$$1$$$.Let the token be in cell $$$x > 1$$$ at some moment. One shift of the token can have either of the following kinds:   Subtraction: you choose an integer $$$y$$$ between $$$1$$$ and $$$x-1$$$, inclusive, and move the token from cell $$$x$$$ to cell $$$x - y$$$.  Floored division: you choose an integer $$$z$$$ between $$$2$$$ and $$$x$$$, inclusive, and move the token from cell $$$x$$$ to cell $$$\\lfloor \\frac{x}{z} \\rfloor$$$ ($$$x$$$ divided by $$$z$$$ rounded down). Find the number of ways to move the token from cell $$$n$$$ to cell $$$1$$$ using one or more shifts, and print it modulo $$$m$$$. Note that if there are several ways to move the token from one cell to another in one shift, all these ways are considered distinct (check example explanation for a better understanding).",
    "input_details": "The only line contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\le n \\le 4 \\cdot 10^6$$$; $$$10^8 < m < 10^9$$$; $$$m$$$ is a prime number) — the length of the strip and the modulo.",
    "output_details": "Print the number of ways to move the token from cell $$$n$$$ to cell $$$1$$$, modulo $$$m$$$.",
    "sample_input": "3 998244353",
    "sample_output": "5",
    "tags": [
      "brute force",
      "dp",
      "math",
      "number theory",
      "two pointers",
      "*1900"
    ]
  },
  {
    "name": "Charmed by the Game",
    "question_id": "charmed-by-the-game",
    "question": "Alice and Borys are playing tennis.A tennis match consists of games. In each game, one of the players is serving and the other one is receiving.Players serve in turns: after a game where Alice is serving follows a game where Borys is serving, and vice versa.Each game ends with a victory of one of the players. If a game is won by the serving player, it's said that this player holds serve. If a game is won by the receiving player, it's said that this player breaks serve.It is known that Alice won $$$a$$$ games and Borys won $$$b$$$ games during the match. It is unknown who served first and who won which games.Find all values of $$$k$$$ such that exactly $$$k$$$ breaks could happen during the match between Alice and Borys in total.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^3$$$). Description of the test cases follows.Each of the next $$$t$$$ lines describes one test case and contains two integers $$$a$$$ and $$$b$$$ ($$$0 \\le a, b \\le 10^5$$$; $$$a + b > 0$$$) — the number of games won by Alice and Borys, respectively.It is guaranteed that the sum of $$$a + b$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "output_details": "For each test case print two lines.In the first line, print a single integer $$$m$$$ ($$$1 \\le m \\le a + b + 1$$$) — the number of values of $$$k$$$ such that exactly $$$k$$$ breaks could happen during the match.In the second line, print $$$m$$$ distinct integers $$$k_1, k_2, \\ldots, k_m$$$ ($$$0 \\le k_1 < k_2 < \\ldots < k_m \\le a + b$$$) — the sought values of $$$k$$$ in increasing order.",
    "sample_input": "3\n2 1\n1 1\n0 5",
    "sample_output": "4\n0 1 2 3\n2\n0 2\n2\n2 3",
    "tags": ["brute force", "math", "*1300"]
  },
  {
    "name": "Assiut Chess",
    "question_id": "assiut-chess",
    "question": "This is an interactive problem.ICPC Assiut Community decided to hold a unique chess contest, and you were chosen to control a queen and hunt down the hidden king, while a member of ICPC Assiut Community controls this king.You compete on an $$$8\\times8$$$ chessboard, the rows are numerated from top to bottom, and the columns are numerated left to right, and the cell in row $$$x$$$ and column $$$y$$$ is denoted as $$$(x, y)$$$.In one turn you can move the queen to any of the squares on the same horizontal line, vertical line, or any of the diagonals. For example, if the queen was on square ($$$4$$$, $$$5$$$), you can move to ($$$q_1$$$, $$$5$$$), ($$$4$$$, $$$q_1$$$), ($$$q_1$$$, $$$9-q_1$$$), or ($$$q_2$$$, $$$q_2+1$$$) where ($$$1 \\le q_1 \\le 8$$$, $$$q_1 \\ne 4$$$, $$$1 \\le q_2 \\le 7$$$, $$$q_2 \\ne 4$$$). Note that the queen cannot stay on its current cell.   In one turn, the king can move \"Right\", \"Left\", \"Up\", \"Down\", \"Down-Right\", \"Down-Left\", \"Up-Left\", or \"Up-Right\" such that he doesn't get out of the board. The king cannot move into a cell that is on the same row, column or diagonal with the queen (including the position of the queen itself). For example, if the king was on square ($$$4$$$, $$$5$$$), he can move to ($$$4+k_1$$$, $$$5+k_2$$$) where ($$$-1 \\le k_1,k_2 \\le 1$$$, $$$(k_1, k_2) \\ne (0, 0)$$$).   At the start of the game, you should place the queen at any location on the board, and this is done once per game. After that the king is secretly placed at any cell different from the queen's location. You do not know the position of the king. Then, the king and the queen take turns with the king moving first. The king moves to one of the possible directions (\"Right\", \"Down\", \"Up-Left\", etc.), and you are only given the direction it moves to. After that, you should move your queen by declaring the square to which your queen will move. The game follows like this until you win the game or run out of moves.You win if the king has no valid moves. You lose if after $$$130$$$ moves of the queen the king still has valid moves.",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 60$$$) — the number of test cases.",
    "output_details": "ctionIn each test case, you should print the queen's starting cell immediately. If you placed the queen at the king's cell, you will win immediately.After that, you may make at most $$$130$$$ moves. Each move is made in the format $$$x$$$ $$$y$$$, where $$$x$$$ and $$$y$$$ are two integers ($$$1 \\leq x,y \\leq 8$$$) that denote the new row and column of the queen respectively. Your move should be a valid queen move.After the initial queen placement and after each move you will receive a string $$$s$$$ that represents the direction of the king's move. It will be one of the following: \"Right\", \"Left\", \"Up\", \"Down\", \"Down-Right\", \"Down-Left\", \"Up-Left\", \"Up-Right\", or \"Done\" if you win the game. You should consider \"Done\" as the end of each test case.After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush(stdout) or cout.flush() in C++; System.out.flush() in Java; flush(output) in Pascal; stdout.flush() in Python; see documentation for other languages.If at any point you make an invalid query or try to make more than $$$130$$$ queries for each test case, the game will terminate immediately and you will receive a Wrong Answer verdict.",
    "sample_input": "1\nLeft\nRight\nDone",
    "sample_output": "7 5\n7 6\n7 7",
    "tags": ["brute force", "constructive algorithms", "interactive", "*2800"]
  },
  {
    "name": "Ezzat and Grid",
    "question_id": "ezzat-and-grid",
    "question": "Moamen was drawing a grid of $$$n$$$ rows and $$$10^9$$$ columns containing only digits $$$0$$$ and $$$1$$$. Ezzat noticed what Moamen was drawing and became interested in the minimum number of rows one needs to remove to make the grid beautiful.A grid is beautiful if and only if for every two consecutive rows there is at least one column containing $$$1$$$ in these two rows.Ezzat will give you the number of rows $$$n$$$, and $$$m$$$ segments of the grid that contain digits $$$1$$$. Every segment is represented with three integers $$$i$$$, $$$l$$$, and $$$r$$$, where $$$i$$$ represents the row number, and $$$l$$$ and $$$r$$$ represent the first and the last column of the segment in that row.For example, if $$$n = 3$$$, $$$m = 6$$$, and the segments are $$$(1,1,1)$$$, $$$(1,7,8)$$$, $$$(2,7,7)$$$, $$$(2,15,15)$$$, $$$(3,1,1)$$$, $$$(3,15,15)$$$, then the grid is:  Your task is to tell Ezzat the minimum number of rows that should be removed to make the grid beautiful.",
    "input_details": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n, m \\le 3\\cdot10^5$$$).Each of the next $$$m$$$ lines contains three integers $$$i$$$, $$$l$$$, and $$$r$$$ ($$$1 \\le i \\le n$$$, $$$1 \\le l \\le r \\le 10^9$$$). Each of these $$$m$$$ lines means that row number $$$i$$$ contains digits $$$1$$$ in columns from $$$l$$$ to $$$r$$$, inclusive.Note that the segments may overlap.",
    "output_details": "In the first line, print a single integer $$$k$$$ — the minimum number of rows that should be removed.In the second line print $$$k$$$ distinct integers $$$r_1, r_2, \\ldots, r_k$$$, representing the rows that should be removed ($$$1 \\le r_i \\le n$$$), in any order.If there are multiple answers, print any.",
    "sample_input": "3 6\n1 1 1\n1 7 8\n2 7 7\n2 15 15\n3 1 1\n3 15 15",
    "sample_output": "0",
    "tags": ["data structures", "dp", "greedy", "*2200"]
  },
  {
    "name": "Moamen and XOR",
    "question_id": "moamen-and-xor",
    "question": "Moamen and Ezzat are playing a game. They create an array $$$a$$$ of $$$n$$$ non-negative integers where every element is less than $$$2^k$$$.Moamen wins if $$$a_1 \\,\\&\\, a_2 \\,\\&\\, a_3 \\,\\&\\, \\ldots \\,\\&\\, a_n \\ge a_1 \\oplus a_2 \\oplus a_3 \\oplus \\ldots \\oplus a_n$$$.Here $$$\\&$$$ denotes the bitwise AND operation, and $$$\\oplus$$$ denotes the bitwise XOR operation.Please calculate the number of winning for Moamen arrays $$$a$$$.As the result may be very large, print the value modulo $$$1\\,000\\,000\\,007$$$ ($$$10^9 + 7$$$).",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 5$$$)— the number of test cases. Each test case consists of one line containing two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n\\le 2\\cdot 10^5$$$, $$$0 \\le k \\le 2\\cdot 10^5$$$).",
    "output_details": "For each test case, print a single value — the number of different arrays that Moamen wins with.Print the result modulo $$$1\\,000\\,000\\,007$$$ ($$$10^9 + 7$$$).",
    "sample_input": "3\n3 1\n2 1\n4 0",
    "sample_output": "5\n2\n1",
    "tags": ["bitmasks", "combinatorics", "dp", "math", "matrices", "*1700"]
  },
  {
    "name": "Moamen and k-subarrays",
    "question_id": "moamen-and-k-subarrays",
    "question": "Moamen has an array of $$$n$$$ distinct integers. He wants to sort that array in non-decreasing order by doing the following operations in order exactly once:  Split the array into exactly $$$k$$$ non-empty subarrays such that each element belongs to exactly one subarray.  Reorder these subarrays arbitrary.  Merge the subarrays in their new order. A sequence $$$a$$$ is a subarray of a sequence $$$b$$$ if $$$a$$$ can be obtained from $$$b$$$ by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.Can you tell Moamen if there is a way to sort the array in non-decreasing order using the operations written above?",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^3$$$) — the number of test cases. The description of the test cases follows.The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 10^5$$$).The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\le |a_i| \\le 10^9$$$). It is guaranteed that all numbers are distinct.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3\\cdot10^5$$$.",
    "output_details": "For each test case, you should output a single string.If Moamen can sort the array in non-decreasing order, output \"YES\" (without quotes). Otherwise, output \"NO\" (without quotes).You can print each letter of \"YES\" and \"NO\" in any case (upper or lower).",
    "sample_input": "3\n5 4\n6 3 4 2 1\n4 2\n1 -4 0 -2\n5 1\n1 2 3 4 5",
    "sample_output": "Yes\nNo\nYes",
    "tags": ["greedy", "sortings", "*1100"]
  },
  {
    "name": "Ezzat and Two Subsequences",
    "question_id": "ezzat-and-two-subsequences",
    "question": "Ezzat has an array of $$$n$$$ integers (maybe negative). He wants to split it into two non-empty subsequences $$$a$$$ and $$$b$$$, such that every element from the array belongs to exactly one subsequence, and the value of $$$f(a) + f(b)$$$ is the maximum possible value, where $$$f(x)$$$ is the average of the subsequence $$$x$$$. A sequence $$$x$$$ is a subsequence of a sequence $$$y$$$ if $$$x$$$ can be obtained from $$$y$$$ by deletion of several (possibly, zero or all) elements.The average of a subsequence is the sum of the numbers of this subsequence divided by the size of the subsequence.For example, the average of $$$[1,5,6]$$$ is $$$(1+5+6)/3 = 12/3 = 4$$$, so $$$f([1,5,6]) = 4$$$.",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^3$$$)— the number of test cases. Each test case consists of two lines.The first line contains a single integer $$$n$$$ ($$$2 \\le n \\le 10^5$$$).The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$-10^9 \\le a_i \\le 10^9$$$).It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3\\cdot10^5$$$.",
    "output_details": "For each test case, print a single value — the maximum value that Ezzat can achieve.Your answer is considered correct if its absolute or relative error does not exceed $$$10^{-6}$$$.Formally, let your answer be $$$a$$$, and the jury's answer be $$$b$$$. Your answer is accepted if and only if $$$\\frac{|a - b|}{\\max{(1, |b|)}} \\le 10^{-6}$$$.",
    "sample_input": "4\n3\n3 1 2\n3\n-7 -6 -6\n3\n2 2 2\n4\n17 3 5 -3",
    "sample_output": "4.500000000\n-12.500000000\n4.000000000\n18.666666667",
    "tags": ["brute force", "math", "sortings", "*800"]
  },
  {
    "name": "DIY Tree",
    "question_id": "diy-tree",
    "question": "  William really likes puzzle kits. For one of his birthdays, his friends gifted him a complete undirected edge-weighted graph consisting of $$$n$$$ vertices.He wants to build a spanning tree of this graph, such that for the first $$$k$$$ vertices the following condition is satisfied: the degree of a vertex with index $$$i$$$ does not exceed $$$d_i$$$. Vertices from $$$k + 1$$$ to $$$n$$$ may have any degree.William wants you to find the minimum weight of a spanning tree that satisfies all the conditions.A spanning tree is a subset of edges of a graph that forms a tree on all $$$n$$$ vertices of the graph. The weight of a spanning tree is defined as the sum of weights of all the edges included in a spanning tree.",
    "input_details": "The first line of input contains two integers $$$n$$$, $$$k$$$ ($$$2 \\leq n \\leq 50$$$, $$$1 \\leq k \\leq min(n - 1, 5)$$$).The second line contains $$$k$$$ integers $$$d_1, d_2, \\ldots, d_k$$$ ($$$1 \\leq d_i \\leq n$$$). The $$$i$$$-th of the next $$$n - 1$$$ lines contains $$$n - i$$$ integers $$$w_{i,i+1}, w_{i,i+2}, \\ldots, w_{i,n}$$$ ($$$1 \\leq w_{i,j} \\leq 100$$$): weights of edges $$$(i,i+1),(i,i+2),\\ldots,(i,n)$$$.",
    "output_details": "Print one integer: the minimum weight of a spanning tree under given degree constraints for the first $$$k$$$ vertices. ",
    "sample_input": "10 5\n5 3 4 2 1\n29 49 33 12 55 15 32 62 37\n61 26 15 58 15 22 8 58\n37 16 9 39 20 14 58\n10 15 40 3 19 55\n53 13 37 44 52\n23 59 58 4\n69 80 29\n89 28\n48",
    "sample_output": "95",
    "tags": ["graphs", "greedy", "math", "probabilities", "*3300"]
  },
  {
    "name": "Gates to Another World",
    "question_id": "gates-to-another-world",
    "question": "  As mentioned previously William really likes playing video games. In one of his favorite games, the player character is in a universe where every planet is designated by a binary number from $$$0$$$ to $$$2^n - 1$$$. On each planet, there are gates that allow the player to move from planet $$$i$$$ to planet $$$j$$$ if the binary representations of $$$i$$$ and $$$j$$$ differ in exactly one bit.William wants to test you and see how you can handle processing the following queries in this game universe:  Destroy planets with numbers from $$$l$$$ to $$$r$$$ inclusively. These planets cannot be moved to anymore. Figure out if it is possible to reach planet $$$b$$$ from planet $$$a$$$ using some number of planetary gates. It is guaranteed that the planets $$$a$$$ and $$$b$$$ are not destroyed. ",
    "input_details": "The first line contains two integers $$$n$$$, $$$m$$$ ($$$1 \\leq n \\leq 50$$$, $$$1 \\leq m \\leq 5 \\cdot 10^4$$$), which are the number of bits in binary representation of each planets' designation and the number of queries, respectively.Each of the next $$$m$$$ lines contains a query of two types:block l r — query for destruction of planets with numbers from $$$l$$$ to $$$r$$$ inclusively ($$$0 \\le l \\le r < 2^n$$$). It's guaranteed that no planet will be destroyed twice.ask a b — query for reachability between planets $$$a$$$ and $$$b$$$ ($$$0 \\le a, b < 2^n$$$). It's guaranteed that planets $$$a$$$ and $$$b$$$ hasn't been destroyed yet.",
    "output_details": "For each query of type ask you must output \"1\" in a new line, if it is possible to reach planet $$$b$$$ from planet $$$a$$$ and \"0\" otherwise (without quotation marks).",
    "sample_input": "3 3\nask 0 7\nblock 3 6\nask 0 7",
    "sample_output": "1\n0",
    "tags": ["bitmasks", "data structures", "dsu", "two pointers", "*3300"]
  },
  {
    "name": "Sports Betting",
    "question_id": "sports-betting",
    "question": "  William is not only interested in trading but also in betting on sports matches. $$$n$$$ teams participate in each match. Each team is characterized by strength $$$a_i$$$. Each two teams $$$i < j$$$ play with each other exactly once. Team $$$i$$$ wins with probability $$$\\frac{a_i}{a_i + a_j}$$$ and team $$$j$$$ wins with probability $$$\\frac{a_j}{a_i + a_j}$$$.The team is called a winner if it directly or indirectly defeated all other teams. Team $$$a$$$ defeated (directly or indirectly) team $$$b$$$ if there is a sequence of teams $$$c_1$$$, $$$c_2$$$, ... $$$c_k$$$ such that $$$c_1 = a$$$, $$$c_k = b$$$ and team $$$c_i$$$ defeated team $$$c_{i + 1}$$$ for all $$$i$$$ from $$$1$$$ to $$$k - 1$$$. Note that it is possible that team $$$a$$$ defeated team $$$b$$$ and in the same time team $$$b$$$ defeated team $$$a$$$.William wants you to find the expected value of the number of winners.",
    "input_details": "The first line contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 14$$$), which is the total number of teams participating in a match.The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq 10^6$$$)  — the strengths of teams participating in a match.",
    "output_details": "Output a single integer  — the expected value of the number of winners of the tournament modulo $$$10^9 + 7$$$.Formally, let $$$M = 10^9+7$$$. It can be demonstrated that the answer can be presented as a irreducible fraction $$$\\frac{p}{q}$$$, where $$$p$$$ and $$$q$$$ are integers and $$$q \\not \\equiv 0 \\pmod{M}$$$. Output a single integer equal to $$$p \\cdot q^{-1} \\bmod M$$$. In other words, output an integer $$$x$$$ such that $$$0 \\le x < M$$$ and $$$x \\cdot q \\equiv p \\pmod{M}$$$.",
    "sample_input": "2\n1 2",
    "sample_output": "1",
    "tags": [
      "bitmasks",
      "combinatorics",
      "dp",
      "graphs",
      "math",
      "probabilities",
      "*2500"
    ]
  },
  {
    "name": "Equilibrium",
    "question_id": "equilibrium",
    "question": "  William has two arrays $$$a$$$ and $$$b$$$, each consisting of $$$n$$$ items.For some segments $$$l..r$$$ of these arrays William wants to know if it is possible to equalize the values of items in these segments using a balancing operation. Formally, the values are equalized if for each $$$i$$$ from $$$l$$$ to $$$r$$$ holds $$$a_i = b_i$$$.To perform a balancing operation an even number of indices must be selected, such that $$$l \\le pos_1 < pos_2 < \\dots < pos_k \\le r$$$. Next the items of array a at positions $$$pos_1, pos_3, pos_5, \\dots$$$ get incremented by one and the items of array b at positions $$$pos_2, pos_4, pos_6, \\dots$$$ get incremented by one.William wants to find out if it is possible to equalize the values of elements in two arrays for each segment using some number of balancing operations, and what is the minimal number of operations required for that. Note that for each segment the operations are performed independently.",
    "input_details": "The first line contains a two integers $$$n$$$ and $$$q$$$ ($$$2 \\le n \\le 10^5$$$, $$$1 \\le q \\le 10^5$$$), the size of arrays $$$a$$$ and $$$b$$$ and the number of segments.The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ $$$(0 \\le a_i \\le 10^9)$$$.The third line contains $$$n$$$ integers $$$b_1, b_2, \\dots, b_n$$$ $$$(0 \\le b_i \\le 10^9)$$$.Each of the next $$$q$$$ lines contains two integers $$$l_i$$$ and $$$r_i$$$ $$$(1 \\le l_i < r_i \\le n)$$$, the edges of segments.",
    "output_details": "For each segment output a single number — the minimal number of balancing operations needed or \"-1\" if it is impossible to equalize segments of arrays.",
    "sample_input": "8 5\n0 1 2 9 3 2 7 5\n2 2 1 9 4 1 5 8\n2 6\n1 7\n2 4\n7 8\n5 8",
    "sample_output": "1\n3\n1\n-1\n-1",
    "tags": ["data structures", "dp", "greedy", "*2200"]
  },
  {
    "name": "Take a Guess",
    "question_id": "take-a-guess",
    "question": "  This is an interactive taskWilliam has a certain sequence of integers $$$a_1, a_2, \\dots, a_n$$$ in his mind, but due to security concerns, he does not want to reveal it to you completely. William is ready to respond to no more than $$$2 \\cdot n$$$ of the following questions:  What is the result of a bitwise AND of two items with indices $$$i$$$ and $$$j$$$ ($$$i \\neq j$$$)  What is the result of a bitwise OR of two items with indices $$$i$$$ and $$$j$$$ ($$$i \\neq j$$$) You can ask William these questions and you need to find the $$$k$$$-th smallest number of the sequence.Formally the $$$k$$$-th smallest number is equal to the number at the $$$k$$$-th place in a 1-indexed array sorted in non-decreasing order. For example in array $$$[5, 3, 3, 10, 1]$$$ $$$4$$$th smallest number is equal to $$$5$$$, and $$$2$$$nd and $$$3$$$rd are $$$3$$$.",
    "input_details": "It is guaranteed that for each element in a sequence the condition $$$0 \\le a_i \\le 10^9$$$ is satisfied.",
    "output_details": "ctionIn the first line you will be given two integers $$$n$$$ and $$$k$$$ $$$(3 \\le n \\le 10^4, 1 \\le k \\le n)$$$, which are the number of items in the sequence $$$a$$$ and the number $$$k$$$.After that, you can ask no more than $$$2 \\cdot n$$$ questions (not including the \"finish\" operation).Each line of your output may be of one of the following types:   \"or i j\" $$$(1 \\le i, j \\le n, i \\neq j)$$$, where $$$i$$$ and $$$j$$$ are indices of items for which you want to calculate the bitwise OR.  \"and i j\" $$$(1 \\le i, j \\le n, i \\neq j)$$$, where $$$i$$$ and $$$j$$$ are indices of items for which you want to calculate the bitwise AND.  \"finish res\", where $$$res$$$ is the $$$k$$$th smallest number in the sequence. After outputting this line the program execution must conclude. In response to the first two types of queries, you will get an integer $$$x$$$, the result of the operation for the numbers you have selected.After outputting a line do not forget to output a new line character and flush the output buffer. Otherwise you will get the \"Idleness limit exceeded\". To flush the buffer use:  fflush(stdout) in C++  System.out.flush() in Java  stdout.flush() in Python  flush(output) in Pascal  for other languages refer to documentation If you perform an incorrect query the response will be $$$-1$$$. After receiving response $$$-1$$$ you must immediately halt your program in order to receive an \"Incorrect answer\" verdict.Hacking To perform a hack you will need to use the following format:The first line must contain two integers $$$n$$$ and $$$k$$$ $$$(3 \\le n \\le 10^4, 1 \\le k \\le n)$$$, which are the number of items in the sequence $$$a$$$ and the number $$$k$$$.The second line must contain $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ $$$(0 \\le a_i \\le 10^9)$$$, the sequence $$$a$$$.",
    "sample_input": "7 6\n\n2\n\n7",
    "sample_output": "and 2 5\n\nor 5 6\n\nfinish 5",
    "tags": [
      "bitmasks",
      "constructive algorithms",
      "interactive",
      "math",
      "*1800"
    ]
  },
  {
    "name": "Compressed Bracket Sequence",
    "question_id": "compressed-bracket-sequence",
    "question": "  William has a favorite bracket sequence. Since his favorite sequence is quite big he provided it to you as a sequence of positive integers $$$c_1, c_2, \\dots, c_n$$$ where $$$c_i$$$ is the number of consecutive brackets \"(\" if $$$i$$$ is an odd number or the number of consecutive brackets \")\" if $$$i$$$ is an even number.For example for a bracket sequence \"((())()))\" a corresponding sequence of numbers is $$$[3, 2, 1, 3]$$$.You need to find the total number of continuous subsequences (subsegments) $$$[l, r]$$$ ($$$l \\le r$$$) of the original bracket sequence, which are regular bracket sequences.A bracket sequence is called regular if it is possible to obtain correct arithmetic expression by inserting characters \"+\" and \"1\" into this sequence. For example, sequences \"(())()\", \"()\" and \"(()(()))\" are regular, while \")(\", \"(()\" and \"(()))(\" are not.",
    "input_details": "The first line contains a single integer $$$n$$$ $$$(1 \\le n \\le 1000)$$$, the size of the compressed sequence.The second line contains a sequence of integers $$$c_1, c_2, \\dots, c_n$$$ $$$(1 \\le c_i \\le 10^9)$$$, the compressed sequence.",
    "output_details": "Output a single integer — the total number of subsegments of the original bracket sequence, which are regular bracket sequences.It can be proved that the answer fits in the signed 64-bit integer data type.",
    "sample_input": "5\n4 1 2 3 1",
    "sample_output": "5",
    "tags": ["brute force", "implementation", "*1800"]
  },
  {
    "name": "Take Your Places!",
    "question_id": "take-your-places",
    "question": "  William has an array of $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$. In one move he can swap two neighboring items. Two items $$$a_i$$$ and $$$a_j$$$ are considered neighboring if the condition $$$|i - j| = 1$$$ is satisfied.William wants you to calculate the minimal number of swaps he would need to perform to make it so that the array does not contain two neighboring items with the same parity.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^4$$$). Description of the test cases follows.The first line of each test case contains an integer $$$n$$$ $$$(1 \\le n \\le 10^5)$$$ which is the total number of items in William's array.The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ $$$(1 \\le a_i \\le 10^9)$$$ which are William's array.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
    "output_details": "For each test case output the minimal number of operations needed or $$$-1$$$ if it is impossible to get the array to a state when no neighboring numbers have the same parity.",
    "sample_input": "5\n3\n6 6 1\n1\n9\n6\n1 1 1 2 2 2\n2\n8 6\n6\n6 2 3 4 5 1",
    "sample_output": "1\n0\n3\n-1\n2",
    "tags": ["implementation", "*1300"]
  },
  {
    "name": "A Variety of Operations",
    "question_id": "a-variety-of-operations",
    "question": "  William has two numbers $$$a$$$ and $$$b$$$ initially both equal to zero. William mastered performing three different operations with them quickly. Before performing each operation some positive integer $$$k$$$ is picked, which is then used to perform one of the following operations: (note, that for each operation you can choose a new positive integer $$$k$$$)  add number $$$k$$$ to both $$$a$$$ and $$$b$$$, or  add number $$$k$$$ to $$$a$$$ and subtract $$$k$$$ from $$$b$$$, or  add number $$$k$$$ to $$$b$$$ and subtract $$$k$$$ from $$$a$$$. Note that after performing operations, numbers $$$a$$$ and $$$b$$$ may become negative as well.William wants to find out the minimal number of operations he would have to perform to make $$$a$$$ equal to his favorite number $$$c$$$ and $$$b$$$ equal to his second favorite number $$$d$$$.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^4$$$). Description of the test cases follows.The only line of each test case contains two integers $$$c$$$ and $$$d$$$ $$$(0 \\le c, d \\le 10^9)$$$, which are William's favorite numbers and which he wants $$$a$$$ and $$$b$$$ to be transformed into.",
    "output_details": "For each test case output a single number, which is the minimal number of operations which William would have to perform to make $$$a$$$ equal to $$$c$$$ and $$$b$$$ equal to $$$d$$$, or $$$-1$$$ if it is impossible to achieve this using the described operations.",
    "sample_input": "6\n1 2\n3 5\n5 3\n6 6\n8 0\n0 0",
    "sample_output": "-1\n2\n2\n1\n2\n0",
    "tags": ["math", "*800"]
  },
  {
    "name": "Good Graph",
    "question_id": "good-graph",
    "question": "You have an undirected graph consisting of $$$n$$$ vertices with weighted edges.A simple cycle is a cycle of the graph without repeated vertices. Let the weight of the cycle be the XOR of weights of edges it consists of.Let's say the graph is good if all its simple cycles have weight $$$1$$$. A graph is bad if it's not good.Initially, the graph is empty. Then $$$q$$$ queries follow. Each query has the next type:   $$$u$$$ $$$v$$$ $$$x$$$ — add edge between vertices $$$u$$$ and $$$v$$$ of weight $$$x$$$ if it doesn't make the graph bad. For each query print, was the edge added or not.",
    "input_details": "The first line contains two integers $$$n$$$ and $$$q$$$ ($$$3 \\le n \\le 3 \\cdot 10^5$$$; $$$1 \\le q \\le 5 \\cdot 10^5$$$) — the number of vertices and queries.Next $$$q$$$ lines contain queries — one per line. Each query contains three integers $$$u$$$, $$$v$$$ and $$$x$$$ ($$$1 \\le u, v \\le n$$$; $$$u \\neq v$$$; $$$0 \\le x \\le 1$$$) — the vertices of the edge and its weight.It's guaranteed that there are no multiple edges in the input.",
    "output_details": "For each query, print YES if the edge was added to the graph, or NO otherwise (both case-insensitive).",
    "sample_input": "9 12\n6 1 0\n1 3 1\n3 6 0\n6 2 0\n6 4 1\n3 4 1\n2 4 0\n2 5 0\n4 5 0\n7 8 1\n8 9 1\n9 7 0",
    "sample_output": "YES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nNO",
    "tags": ["data structures", "dsu", "graphs", "trees", "*2700"]
  },
  {
    "name": "Boring Segments",
    "question_id": "boring-segments",
    "question": "You are given $$$n$$$ segments on a number line, numbered from $$$1$$$ to $$$n$$$. The $$$i$$$-th segments covers all integer points from $$$l_i$$$ to $$$r_i$$$ and has a value $$$w_i$$$.You are asked to select a subset of these segments (possibly, all of them). Once the subset is selected, it's possible to travel between two integer points if there exists a selected segment that covers both of them. A subset is good if it's possible to reach point $$$m$$$ starting from point $$$1$$$ in arbitrary number of moves.The cost of the subset is the difference between the maximum and the minimum values of segments in it. Find the minimum cost of a good subset.In every test there exists at least one good subset.",
    "input_details": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\le 3 \\cdot 10^5$$$; $$$2 \\le m \\le 10^6$$$) — the number of segments and the number of integer points.Each of the next $$$n$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$ and $$$w_i$$$ ($$$1 \\le l_i < r_i \\le m$$$; $$$1 \\le w_i \\le 10^6$$$) — the description of the $$$i$$$-th segment.In every test there exists at least one good subset.",
    "output_details": "Print a single integer — the minimum cost of a good subset.",
    "sample_input": "5 12\n1 5 5\n3 4 10\n4 10 6\n11 12 5\n10 12 3",
    "sample_output": "3",
    "tags": ["data structures", "sortings", "trees", "two pointers", "*2100"]
  },
  {
    "name": "Say No to Palindromes",
    "question_id": "say-no-to-palindromes",
    "question": "Let's call the string beautiful if it does not contain a substring of length at least $$$2$$$, which is a palindrome. Recall that a palindrome is a string that reads the same way from the first character to the last and from the last character to the first. For example, the strings a, bab, acca, bcabcbacb are palindromes, but the strings ab, abbbaa, cccb are not.Let's define cost of a string as the minimum number of operations so that the string becomes beautiful, if in one operation it is allowed to change any character of the string to one of the first $$$3$$$ letters of the Latin alphabet (in lowercase).You are given a string $$$s$$$ of length $$$n$$$, each character of the string is one of the first $$$3$$$ letters of the Latin alphabet (in lowercase).You have to answer $$$m$$$ queries — calculate the cost of the substring of the string $$$s$$$ from $$$l_i$$$-th to $$$r_i$$$-th position, inclusive.",
    "input_details": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n, m \\le 2 \\cdot 10^5$$$) — the length of the string $$$s$$$ and the number of queries.The second line contains the string $$$s$$$, it consists of $$$n$$$ characters, each character one of the first $$$3$$$ Latin letters.The following $$$m$$$ lines contain two integers $$$l_i$$$ and $$$r_i$$$ ($$$1 \\le l_i \\le r_i \\le n$$$) — parameters of the $$$i$$$-th query.",
    "output_details": "For each query, print a single integer — the cost of the substring of the string $$$s$$$ from $$$l_i$$$-th to $$$r_i$$$-th position, inclusive.",
    "sample_input": "5 4\nbaacb\n1 3\n1 5\n4 5\n2 3",
    "sample_output": "1\n2\n0\n1",
    "tags": ["brute force", "constructive algorithms", "dp", "strings", "*1600"]
  },
  {
    "name": "Coin Rows",
    "question_id": "coin-rows",
    "question": "Alice and Bob are playing a game on a matrix, consisting of $$$2$$$ rows and $$$m$$$ columns. The cell in the $$$i$$$-th row in the $$$j$$$-th column contains $$$a_{i, j}$$$ coins in it.Initially, both Alice and Bob are standing in a cell $$$(1, 1)$$$. They are going to perform a sequence of moves to reach a cell $$$(2, m)$$$.The possible moves are:   Move right — from some cell $$$(x, y)$$$ to $$$(x, y + 1)$$$;  Move down — from some cell $$$(x, y)$$$ to $$$(x + 1, y)$$$. First, Alice makes all her moves until she reaches $$$(2, m)$$$. She collects the coins in all cells she visit (including the starting cell).When Alice finishes, Bob starts his journey. He also performs the moves to reach $$$(2, m)$$$ and collects the coins in all cells that he visited, but Alice didn't.The score of the game is the total number of coins Bob collects.Alice wants to minimize the score. Bob wants to maximize the score. What will the score of the game be if both players play optimally?",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of testcases.Then the descriptions of $$$t$$$ testcases follow.The first line of the testcase contains a single integer $$$m$$$ ($$$1 \\le m \\le 10^5$$$) — the number of columns of the matrix.The $$$i$$$-th of the next $$$2$$$ lines contain $$$m$$$ integers $$$a_{i,1}, a_{i,2}, \\dots, a_{i,m}$$$ ($$$1 \\le a_{i,j} \\le 10^4$$$) — the number of coins in the cell in the $$$i$$$-th row in the $$$j$$$-th column of the matrix.The sum of $$$m$$$ over all testcases doesn't exceed $$$10^5$$$.",
    "output_details": "For each testcase print a single integer — the score of the game if both players play optimally.",
    "sample_input": "3\n3\n1 3 7\n3 5 1\n3\n1 3 9\n3 5 1\n1\n4\n7",
    "sample_output": "7\n8\n0",
    "tags": [
      "brute force",
      "constructive algorithms",
      "dp",
      "implementation",
      "*1300"
    ]
  },
  {
    "name": "Two Tables",
    "question_id": "two-tables",
    "question": "You have an axis-aligned rectangle room with width $$$W$$$ and height $$$H$$$, so the lower left corner is in point $$$(0, 0)$$$ and the upper right corner is in $$$(W, H)$$$.There is a rectangular table standing in this room. The sides of the table are parallel to the walls, the lower left corner is in $$$(x_1, y_1)$$$, and the upper right corner in $$$(x_2, y_2)$$$.You want to place another rectangular table in this room with width $$$w$$$ and height $$$h$$$ with the width of the table parallel to the width of the room.The problem is that sometimes there is not enough space to place the second table without intersecting with the first one (there are no problems with tables touching, though).You can't rotate any of the tables, but you can move the first table inside the room.   Example of how you may move the first table. What is the minimum distance you should move the first table to free enough space for the second one?",
    "input_details": "The first line contains the single integer $$$t$$$ ($$$1 \\le t \\le 5000$$$) — the number of the test cases.The first line of each test case contains two integers $$$W$$$ and $$$H$$$ ($$$1 \\le W, H \\le 10^8$$$) — the width and the height of the room.The second line contains four integers $$$x_1$$$, $$$y_1$$$, $$$x_2$$$ and $$$y_2$$$ ($$$0 \\le x_1 < x_2 \\le W$$$; $$$0 \\le y_1 < y_2 \\le H$$$) — the coordinates of the corners of the first table.The third line contains two integers $$$w$$$ and $$$h$$$ ($$$1 \\le w \\le W$$$; $$$1 \\le h \\le H$$$) — the width and the height of the second table.",
    "output_details": "For each test case, print the minimum distance you should move the first table, or $$$-1$$$ if there is no way to free enough space for the second table.Your answer will be considered correct if its absolute or relative error doesn't exceed $$$10^{-6}$$$.",
    "sample_input": "5\n8 5\n2 1 7 4\n4 2\n5 4\n2 2 5 4\n3 3\n1 8\n0 3 1 6\n1 5\n8 1\n3 0 6 1\n5 1\n8 10\n4 5 7 8\n8 5",
    "sample_output": "1.000000000\n-1\n2.000000000\n2.000000000\n0.000000000",
    "tags": ["brute force", "*1300"]
  },
  {
    "name": "PizzaForces",
    "question_id": "pizza-forces",
    "question": "PizzaForces is Petya's favorite pizzeria. PizzaForces makes and sells pizzas of three sizes: small pizzas consist of $$$6$$$ slices, medium ones consist of $$$8$$$ slices, and large pizzas consist of $$$10$$$ slices each. Baking them takes $$$15$$$, $$$20$$$ and $$$25$$$ minutes, respectively.Petya's birthday is today, and $$$n$$$ of his friends will come, so he decided to make an order from his favorite pizzeria. Petya wants to order so much pizza that each of his friends gets at least one slice of pizza. The cooking time of the order is the total baking time of all the pizzas in the order.Your task is to determine the minimum number of minutes that is needed to make pizzas containing at least $$$n$$$ slices in total. For example:   if $$$12$$$ friends come to Petya's birthday, he has to order pizzas containing at least $$$12$$$ slices in total. He can order two small pizzas, containing exactly $$$12$$$ slices, and the time to bake them is $$$30$$$ minutes;  if $$$15$$$ friends come to Petya's birthday, he has to order pizzas containing at least $$$15$$$ slices in total. He can order a small pizza and a large pizza, containing $$$16$$$ slices, and the time to bake them is $$$40$$$ minutes;  if $$$300$$$ friends come to Petya's birthday, he has to order pizzas containing at least $$$300$$$ slices in total. He can order $$$15$$$ small pizzas, $$$10$$$ medium pizzas and $$$13$$$ large pizzas, in total they contain $$$15 \\cdot 6 + 10 \\cdot 8 + 13 \\cdot 10 = 300$$$ slices, and the total time to bake them is $$$15 \\cdot 15 + 10 \\cdot 20 + 13 \\cdot 25 = 750$$$ minutes;  if only one friend comes to Petya's birthday, he can order a small pizza, and the time to bake it is $$$15$$$ minutes. ",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of testcases.Each testcase consists of a single line that contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^{16}$$$) — the number of Petya's friends.",
    "output_details": "For each testcase, print one integer — the minimum number of minutes that is needed to bake pizzas containing at least $$$n$$$ slices in total.",
    "sample_input": "6\n12\n15\n300\n1\n9999999999999999\n3",
    "sample_output": "30\n40\n750\n15\n25000000000000000\n15",
    "tags": ["brute force", "math", "*900"]
  },
  {
    "name": "You",
    "question_id": "you",
    "question": "You are given a tree with $$$n$$$ nodes. As a reminder, a tree is a connected undirected graph without cycles.Let $$$a_1, a_2, \\ldots, a_n$$$ be a sequence of integers. Perform the following operation exactly $$$n$$$ times:   Select an unerased node $$$u$$$. Assign $$$a_u :=$$$ number of unerased nodes adjacent to $$$u$$$. Then, erase the node $$$u$$$ along with all edges that have it as an endpoint. For each integer $$$k$$$ from $$$1$$$ to $$$n$$$, find the number, modulo $$$998\\,244\\,353$$$, of different sequences $$$a_1, a_2, \\ldots, a_n$$$ that satisfy the following conditions:  it is possible to obtain $$$a$$$ by performing the aforementioned operations exactly $$$n$$$ times in some order.  $$$\\operatorname{gcd}(a_1, a_2, \\ldots, a_n) = k$$$. Here, $$$\\operatorname{gcd}$$$ means the greatest common divisor of the elements in $$$a$$$. ",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10\\,000$$$)  — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 10^5$$$).Each of the next $$$n - 1$$$ lines contains two integers $$$u$$$ and $$$v$$$ ($$$1 \\le u, v \\le n$$$) indicating there is an edge between vertices $$$u$$$ and $$$v$$$. It is guaranteed that the given edges form a tree.It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$3 \\cdot 10^5$$$.",
    "output_details": "For each test case, print $$$n$$$ integers in a single line, where for each $$$k$$$ from $$$1$$$ to $$$n$$$, the $$$k$$$-th integer denotes the answer when $$$\\operatorname{gcd}$$$ equals to $$$k$$$.",
    "sample_input": "2\n3\n2 1\n1 3\n2\n1 2",
    "sample_output": "3 1 0\n2 0",
    "tags": ["dfs and similar", "dp", "math", "number theory", "*2600"]
  },
  {
    "name": "Diane",
    "question_id": "diane",
    "question": "You are given an integer $$$n$$$. Find any string $$$s$$$ of length $$$n$$$ consisting only of English lowercase letters such that each non-empty substring of $$$s$$$ occurs in $$$s$$$ an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.A string $$$a$$$ is a substring of a string $$$b$$$ if $$$a$$$ can be obtained from $$$b$$$ by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 500$$$) — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$).It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$3 \\cdot 10^5$$$.",
    "output_details": "For each test case, print a single line containing the string $$$s$$$. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.",
    "sample_input": "4\n3\n5\n9\n19",
    "sample_output": "abc\ndiane\nbbcaabbba\nyouarethecutestuwuu",
    "tags": ["constructive algorithms", "greedy", "strings", "*1800"]
  },
  {
    "name": "Mikasa",
    "question_id": "mikasa",
    "question": "You are given two integers $$$n$$$ and $$$m$$$. Find the $$$\\operatorname{MEX}$$$ of the sequence $$$n \\oplus 0, n \\oplus 1, \\ldots, n \\oplus m$$$. Here, $$$\\oplus$$$ is the bitwise XOR operator.$$$\\operatorname{MEX}$$$ of the sequence of non-negative integers is the smallest non-negative integer that doesn't appear in this sequence. For example, $$$\\operatorname{MEX}(0, 1, 2, 4) = 3$$$, and $$$\\operatorname{MEX}(1, 2021) = 0$$$. ",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 30\\,000$$$)  — the number of test cases.The first and only line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$0 \\le n, m \\le 10^9$$$).",
    "output_details": "For each test case, print a single integer  — the answer to the problem.",
    "sample_input": "5\n3 5\n4 6\n3 2\n69 696\n123456 654321",
    "sample_output": "4\n3\n0\n640\n530866",
    "tags": ["binary search", "bitmasks", "greedy", "implementation", "*1800"]
  },
  {
    "name": "Cobb",
    "question_id": "cobb",
    "question": "You are given $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ and an integer $$$k$$$. Find the maximum value of $$$i \\cdot j - k \\cdot (a_i | a_j)$$$ over all pairs $$$(i, j)$$$ of integers with $$$1 \\le i < j \\le n$$$. Here, $$$|$$$ is the bitwise OR operator.",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10\\,000$$$)  — the number of test cases.The first line of each test case contains two integers $$$n$$$ ($$$2 \\le n \\le 10^5$$$) and $$$k$$$ ($$$1 \\le k \\le \\min(n, 100)$$$).The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\le a_i \\le n$$$).It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$3 \\cdot 10^5$$$.",
    "output_details": "For each test case, print a single integer  — the maximum possible value of $$$i \\cdot j - k \\cdot (a_i | a_j)$$$.",
    "sample_input": "4\n3 3\n1 1 3\n2 2\n1 2\n4 3\n0 1 2 3\n6 6\n3 2 0 0 5 6",
    "sample_output": "-1\n-4\n3\n12",
    "tags": ["bitmasks", "brute force", "greedy", "math", "*1700"]
  },
  {
    "name": "Cherry",
    "question_id": "cherry",
    "question": "You are given $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$. Find the maximum value of $$$max(a_l, a_{l + 1}, \\ldots, a_r) \\cdot min(a_l, a_{l + 1}, \\ldots, a_r)$$$ over all pairs $$$(l, r)$$$ of integers for which $$$1 \\le l < r \\le n$$$.",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10\\,000$$$)  — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 10^5$$$).The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 10^6$$$).It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$3 \\cdot 10^5$$$.",
    "output_details": "For each test case, print a single integer  — the maximum possible value of the product from the statement.",
    "sample_input": "4\n3\n2 4 3\n4\n3 2 3 1\n2\n69 69\n6\n719313 273225 402638 473783 804745 323328",
    "sample_output": "12\n6\n4761\n381274500335",
    "tags": ["greedy", "*800"]
  },
  {
    "name": "Stairs",
    "question_id": "stairs",
    "question": "For a permutation $$$p$$$ of numbers $$$1$$$ through $$$n$$$, we define a stair array $$$a$$$ as follows: $$$a_i$$$ is length of the longest segment of permutation which contains position $$$i$$$ and is made of consecutive values in sorted order: $$$[x, x+1, \\ldots, y-1, y]$$$ or $$$[y, y-1, \\ldots, x+1, x]$$$ for some $$$x \\leq y$$$. For example, for permutation $$$p = [4, 1, 2, 3, 7, 6, 5]$$$ we have $$$a = [1, 3, 3, 3, 3, 3, 3]$$$. You are given the stair array $$$a$$$. Your task is to calculate the number of permutations which have stair array equal to $$$a$$$. Since the number can be big, compute it modulo $$$998\\,244\\,353$$$. Note that this number can be equal to zero.",
    "input_details": "The first line of input contains integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$)  — the length of a stair array $$$a$$$.The second line of input contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le n$$$).",
    "output_details": "Print the number of permutations which have stair array equal to $$$a$$$. Since the number can be big, compute it modulo $$$998\\,244\\,353$$$.",
    "sample_input": "6\n3 3 3 1 1 1",
    "sample_output": "6",
    "tags": [
      "combinatorics",
      "divide and conquer",
      "dp",
      "fft",
      "math",
      "*3400"
    ]
  },
  {
    "name": "XOR and Distance",
    "question_id": "xor-and-distance",
    "question": "You are given an array $$$a$$$ consisting of $$$n$$$ distinct elements and an integer $$$k$$$. Each element in the array is a non-negative integer not exceeding $$$2^k-1$$$.Let's define the XOR distance for a number $$$x$$$ as the value of $$$$$$f(x) = \\min\\limits_{i = 1}^{n} \\min\\limits_{j = i + 1}^{n} |(a_i \\oplus x) - (a_j \\oplus x)|,$$$$$$where $$$\\oplus$$$ denotes the bitwise XOR operation.For every integer $$$x$$$ from $$$0$$$ to $$$2^k-1$$$, you have to calculate $$$f(x)$$$.",
    "input_details": "The first line contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le 19$$$; $$$2 \\le n \\le 2^k$$$).The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\le a_i \\le 2^k-1$$$). All these integers are distinct.",
    "output_details": "Print $$$2^k$$$ integers. The $$$i$$$-th of them should be equal to $$$f(i-1)$$$.",
    "sample_input": "3 3\n6 0 3",
    "sample_output": "3 1 1 2 2 1 1 3",
    "tags": ["bitmasks", "divide and conquer", "trees", "*2900"]
  },
  {
    "name": "Common Divisor Graph",
    "question_id": "common-divisor-graph",
    "question": "Consider a sequence of distinct integers $$$a_1, \\ldots, a_n$$$, each representing one node of a graph. There is an edge between two nodes if the two values are not coprime, i. e. they have a common divisor greater than $$$1$$$.There are $$$q$$$ queries, in each query, you want to get from one given node $$$a_s$$$ to another $$$a_t$$$. In order to achieve that, you can choose an existing value $$$a_i$$$ and create new value $$$a_{n+1} = a_i \\cdot (1 + a_i)$$$, with edges to all values that are not coprime with $$$a_{n+1}$$$. Also, $$$n$$$ gets increased by $$$1$$$. You can repeat that operation multiple times, possibly making the sequence much longer and getting huge or repeated values. What's the minimum possible number of newly created nodes so that $$$a_t$$$ is reachable from $$$a_s$$$?Queries are independent. In each query, you start with the initial sequence $$$a$$$ given in the input.",
    "input_details": "The first line contains two integers $$$n$$$ and $$$q$$$ ($$$2 \\leq n \\leq 150\\,000$$$, $$$1 \\leq q \\leq 300\\,000$$$) — the size of the sequence and the number of queries.The second line contains $$$n$$$ distinct integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$2 \\leq a_i \\leq 10^6$$$, $$$a_i \\neq a_j$$$ if $$$i \\ne j$$$).The $$$j$$$-th of the following $$$q$$$ lines contains two distinct integers $$$s_j$$$ and $$$t_j$$$ ($$$1 \\leq s_j, t_j \\leq n$$$, $$$s_j \\neq t_j$$$) — indices of nodes for $$$j$$$-th query.",
    "output_details": "Print $$$q$$$ lines. The $$$j$$$-th line should contain one integer: the minimum number of new nodes you create in order to move from $$$a_{s_j}$$$ to $$$a_{t_j}$$$.",
    "sample_input": "3 3\n2 10 3\n1 2\n1 3\n2 3",
    "sample_output": "0\n1\n1",
    "tags": [
      "brute force",
      "constructive algorithms",
      "dsu",
      "graphs",
      "hashing",
      "math",
      "number theory",
      "*2700"
    ]
  },
  {
    "name": "Pairwise Modulo",
    "question_id": "pairwise-modulo",
    "question": "You have an array $$$a$$$ consisting of $$$n$$$ distinct positive integers, numbered from $$$1$$$ to $$$n$$$. Define $$$p_k$$$ as $$$$$$p_k = \\sum_{1 \\le i, j \\le k} a_i \\bmod a_j,$$$$$$ where $$$x \\bmod y$$$ denotes the remainder when $$$x$$$ is divided by $$$y$$$. You have to find and print $$$p_1, p_2, \\ldots, p_n$$$. ",
    "input_details": "The first line contains $$$n$$$ — the length of the array ($$$2 \\le n \\le 2 \\cdot 10^5$$$).The second line contains $$$n$$$ space-separated distinct integers $$$a_1, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 3 \\cdot 10^5$$$, $$$a_i \\neq a_j$$$ if $$$i \\neq j$$$). ",
    "output_details": "Print $$$n$$$ integers $$$p_1, p_2, \\ldots, p_n$$$. ",
    "sample_input": "4\n6 2 7 3",
    "sample_output": "0 2 12 22",
    "tags": ["data structures", "math", "*2300"]
  },
  {
    "name": "Permutation Shift",
    "question_id": "permutation-shift",
    "question": "An identity permutation of length $$$n$$$ is an array $$$[1, 2, 3, \\dots, n]$$$.We performed the following operations to an identity permutation of length $$$n$$$:  firstly, we cyclically shifted it to the right by $$$k$$$ positions, where $$$k$$$ is unknown to you (the only thing you know is that $$$0 \\le k \\le n - 1$$$). When an array is cyclically shifted to the right by $$$k$$$ positions, the resulting array is formed by taking $$$k$$$ last elements of the original array (without changing their relative order), and then appending $$$n - k$$$ first elements to the right of them (without changing relative order of the first $$$n - k$$$ elements as well). For example, if we cyclically shift the identity permutation of length $$$6$$$ by $$$2$$$ positions, we get the array $$$[5, 6, 1, 2, 3, 4]$$$;  secondly, we performed the following operation at most $$$m$$$ times: pick any two elements of the array and swap them. You are given the values of $$$n$$$ and $$$m$$$, and the resulting array. Your task is to find all possible values of $$$k$$$ in the cyclic shift operation.",
    "input_details": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10^5$$$) — the number of test cases.Each test case consists of two lines. The first line contains two integers $$$n$$$ and $$$m$$$ ($$$3 \\le n \\le 3 \\cdot 10^5$$$; $$$0 \\le m \\le \\frac{n}{3}$$$).The second line contains $$$n$$$ integers $$$p_1, p_2, \\dots, p_n$$$ ($$$1 \\le p_i \\le n$$$, each integer from $$$1$$$ to $$$n$$$ appears in this sequence exactly once) — the resulting array.The sum of $$$n$$$ over all test cases does not exceed $$$3 \\cdot 10^5$$$.",
    "output_details": "For each test case, print the answer in the following way:  firstly, print one integer $$$r$$$ ($$$0 \\le r \\le n$$$) — the number of possible values of $$$k$$$ for the cyclic shift operation;  secondly, print $$$r$$$ integers $$$k_1, k_2, \\dots, k_r$$$ ($$$0 \\le k_i \\le n - 1$$$) — all possible values of $$$k$$$ in increasing order. ",
    "sample_input": "4\n4 1\n2 3 1 4\n3 1\n1 2 3\n3 1\n3 2 1\n6 0\n1 2 3 4 6 5",
    "sample_output": "1 3\n1 0\n3 0 1 2\n0",
    "tags": [
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "math",
      "*2100"
    ]
  },
  {
    "name": "Backspace",
    "question_id": "backspace",
    "question": "You are given two strings $$$s$$$ and $$$t$$$, both consisting of lowercase English letters. You are going to type the string $$$s$$$ character by character, from the first character to the last one.When typing a character, instead of pressing the button corresponding to it, you can press the \"Backspace\" button. It deletes the last character you have typed among those that aren't deleted yet (or does nothing if there are no characters in the current string). For example, if $$$s$$$ is \"abcbd\" and you press Backspace instead of typing the first and the fourth characters, you will get the string \"bd\" (the first press of Backspace deletes no character, and the second press deletes the character 'c'). Another example, if $$$s$$$ is \"abcaa\" and you press Backspace instead of the last two letters, then the resulting text is \"a\".Your task is to determine whether you can obtain the string $$$t$$$, if you type the string $$$s$$$ and press \"Backspace\" instead of typing several (maybe zero) characters of $$$s$$$.",
    "input_details": "The first line contains a single integer $$$q$$$ ($$$1 \\le q \\le 10^5$$$) — the number of test cases.The first line of each test case contains the string $$$s$$$ ($$$1 \\le |s| \\le 10^5$$$). Each character of $$$s$$$ is a lowercase English letter.The second line of each test case contains the string $$$t$$$ ($$$1 \\le |t| \\le 10^5$$$). Each character of $$$t$$$ is a lowercase English letter.It is guaranteed that the total number of characters in the strings over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "output_details": "For each test case, print \"YES\" if you can obtain the string $$$t$$$ by typing the string $$$s$$$ and replacing some characters with presses of \"Backspace\" button, or \"NO\" if you cannot.You may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer).",
    "sample_input": "4\nababa\nba\nababa\nbb\naaa\naaaa\naababa\nababa",
    "sample_output": "YES\nNO\nNO\nYES",
    "tags": ["dp", "greedy", "strings", "two pointers", "*1500"]
  },
  {
    "name": "Penalty",
    "question_id": "penalty",
    "question": "Consider a simplified penalty phase at the end of a football match.A penalty phase consists of at most $$$10$$$ kicks, the first team takes the first kick, the second team takes the second kick, then the first team takes the third kick, and so on. The team that scores more goals wins; if both teams score the same number of goals, the game results in a tie (note that it goes against the usual football rules). The penalty phase is stopped if one team has scored more goals than the other team could reach with all of its remaining kicks. For example, if after the $$$7$$$-th kick the first team has scored $$$1$$$ goal, and the second team has scored $$$3$$$ goals, the penalty phase ends — the first team cannot reach $$$3$$$ goals.You know which player will be taking each kick, so you have your predictions for each of the $$$10$$$ kicks. These predictions are represented by a string $$$s$$$ consisting of $$$10$$$ characters. Each character can either be 1, 0, or ?. This string represents your predictions in the following way:  if $$$s_i$$$ is 1, then the $$$i$$$-th kick will definitely score a goal;  if $$$s_i$$$ is 0, then the $$$i$$$-th kick definitely won't score a goal;  if $$$s_i$$$ is ?, then the $$$i$$$-th kick could go either way. Based on your predictions, you have to calculate the minimum possible number of kicks there can be in the penalty phase (that means, the earliest moment when the penalty phase is stopped, considering all possible ways it could go). Note that the referee doesn't take into account any predictions when deciding to stop the penalty phase — you may know that some kick will/won't be scored, but the referee doesn't.",
    "input_details": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 1\\,000$$$) — the number of test cases.Each test case is represented by one line containing the string $$$s$$$, consisting of exactly $$$10$$$ characters. Each character is either 1, 0, or ?.",
    "output_details": "For each test case, print one integer — the minimum possible number of kicks in the penalty phase.",
    "sample_input": "4\n1?0???1001\n1111111111\n??????????\n0100000000",
    "sample_output": "7\n10\n6\n9",
    "tags": ["bitmasks", "brute force", "dp", "greedy", "*1200"]
  },
  {
    "name": "Reverse String",
    "question_id": "reverse-string",
    "question": "You have a string $$$s$$$ and a chip, which you can place onto any character of this string. After placing the chip, you move it to the right several (maybe zero) times, i. e. you perform the following operation several times: if the current position of the chip is $$$i$$$, you move it to the position $$$i + 1$$$. Of course, moving the chip to the right is impossible if it is already in the last position.After moving the chip to the right, you move it to the left several (maybe zero) times, i. e. you perform the following operation several times: if the current position of the chip is $$$i$$$, you move it to the position $$$i - 1$$$. Of course, moving the chip to the left is impossible if it is already in the first position.When you place a chip or move it, you write down the character where the chip ends up after your action. For example, if $$$s$$$ is abcdef, you place the chip onto the $$$3$$$-rd character, move it to the right $$$2$$$ times and then move it to the left $$$3$$$ times, you write down the string cdedcb.You are given two strings $$$s$$$ and $$$t$$$. Your task is to determine whether it's possible to perform the described operations with $$$s$$$ so that you write down the string $$$t$$$ as a result.",
    "input_details": "The first line contains one integer $$$q$$$ ($$$1 \\le q \\le 500$$$) — the number of test cases.Each test case consists of two lines. The first line contains the string $$$s$$$ ($$$1 \\le |s| \\le 500$$$), the second line contains the string $$$t$$$ ($$$1 \\le |t| \\le 2 \\cdot |s| - 1$$$). Both strings consist of lowercase English characters.It is guaranteed that the sum of $$$|s|$$$ over all test cases does not exceed $$$500$$$.",
    "output_details": "For each test case, print \"YES\" if you can obtain the string $$$t$$$ by performing the process mentioned in the statement with the string $$$s$$$, or \"NO\" if you cannot.You may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer).",
    "sample_input": "6\nabcdef\ncdedcb\naaa\naaaaa\naab\nbaaa\nab\nb\nabcdef\nabcdef\nba\nbaa",
    "sample_output": "YES\nYES\nNO\nYES\nYES\nNO",
    "tags": [
      "brute force",
      "dp",
      "hashing",
      "implementation",
      "strings",
      "*1300"
    ]
  },
  {
    "name": "Digits Sum",
    "question_id": "digits-sum",
    "question": "Let's define $$$S(x)$$$ to be the sum of digits of number $$$x$$$ written in decimal system. For example, $$$S(5) = 5$$$, $$$S(10) = 1$$$, $$$S(322) = 7$$$.We will call an integer $$$x$$$ interesting if $$$S(x + 1) < S(x)$$$. In each test you will be given one integer $$$n$$$. Your task is to calculate the number of integers $$$x$$$ such that $$$1 \\le x \\le n$$$ and $$$x$$$ is interesting.",
    "input_details": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 1000$$$)  — number of test cases.Then $$$t$$$ lines follow, the $$$i$$$-th line contains one integer $$$n$$$ ($$$1 \\le n \\le 10^9$$$) for the $$$i$$$-th test case.",
    "output_details": "Print $$$t$$$ integers, the $$$i$$$-th should be the answer for the $$$i$$$-th test case.",
    "sample_input": "5\n1\n9\n10\n34\n880055535",
    "sample_output": "0\n1\n1\n3\n88005553",
    "tags": ["math", "number theory", "*800"]
  },
  {
    "name": "Organizing a Music Festival",
    "question_id": "organizing-a-music-festival",
    "question": "You are the organizer of the famous \"Zurich Music Festival\". There will be $$$n$$$ singers who will perform at the festival, identified by the integers $$$1$$$, $$$2$$$, $$$\\dots$$$, $$$n$$$. You must choose in which order they are going to perform on stage. You have $$$m$$$ friends and each of them has a set of favourite singers. More precisely, for each $$$1\\le i\\le m$$$, the $$$i$$$-th friend likes singers $$$s_{i,1}, \\, s_{i, 2}, \\, \\dots, \\,s_{i, q_i}$$$.A friend of yours is happy if the singers he likes perform consecutively (in an arbitrary order). An ordering of the singers is valid if it makes all your friends happy.Compute the number of valid orderings modulo $$$998\\,244\\,353$$$.",
    "input_details": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1\\le n,\\,m\\le 100$$$) — the number of singers and the number of friends correspondingly.The $$$i$$$-th of the next $$$m$$$ lines contains the integer $$$q_i$$$ ($$$1\\le q_i\\le n$$$) — the number of favorite singers of the $$$i$$$-th friend – followed by the $$$q_i$$$ integers $$$s_{i,1}, \\, s_{i, 2}, \\, \\dots, \\,s_{i, q_i}$$$ ($$$1\\le s_{i,1}<s_{i,2}<\\cdots<s_{i,q_i}\\le n$$$) — the indexes of his favorite singers.",
    "output_details": "Print the number of valid orderings of the singers modulo $$$998\\,244\\,353$$$.",
    "sample_input": "3 1\n2 1 3",
    "sample_output": "4",
    "tags": ["dfs and similar", "math", "*3400"]
  },
  {
    "name": "Guess the Perimeter",
    "question_id": "guess-the-perimeter",
    "question": "Let us call a point of the plane admissible if its coordinates are positive integers less than or equal to $$$200$$$.There is an invisible rectangle such that:   its vertices are all admissible;  its sides are parallel to the coordinate axes;  its area is strictly positive.  Your task is to guess the perimeter of this rectangle.In order to guess it, you may ask at most $$$4$$$ queries. In each query, you choose a nonempty subset of the admissible points and you are told how many of the chosen points are inside or on the boundary of the invisible rectangle.",
    "input_details": "actionTo ask a query (of the kind described in the statement), you shall print two lines:  In the first line print \"? $$$k$$$\" (without the quotes) where $$$k$$$ ($$$k\\ge 1$$$) is the number of chosen points.  In the second line print $$$2k$$$ integers $$$x_1,\\, y_1,\\, x_2,\\, y_2,\\, \\dots,\\, x_k,\\, y_k$$$ ($$$1\\le x_i,y_i\\le 200$$$ for $$$i=1,2,\\dots,k$$$) where $$$(x_1, y_1),\\,(x_2, y_2),\\,(x_3, y_3),\\, \\dots,\\,(x_k, y_k)$$$ are the $$$k$$$ distinct admissible chosen points (the order of the points is not important).  After this, you should read an integer — the number of chosen points that are inside or on the boundary of the invisible rectangle.When you have identified the perimeter $$$p$$$ of the invisible rectangle, you must print \"! $$$p$$$\" (without quotes) and terminate your program.If you ask more than $$$4$$$ queries or if one of the queries is malformed, the interactor terminates immediately and your program receives verdict Wrong Answer.The interactor may be adaptive (i.e., the hidden rectangle may not be chosen before the beginning of the interaction).After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:   fflush(stdout) or cout.flush() in C++;  System.out.flush() in Java;  flush(output) in Pascal;  stdout.flush() in Python;  see documentation for other languages. HacksTo hack a solution, use the following format.The input has only one line, containing the $$$4$$$ integers $$$x_0$$$, $$$y_0$$$, $$$x_1$$$, $$$y_1$$$ ($$$1\\le x_0<x_1\\le 200$$$, $$$1\\le y_0 < y_1 \\le 200$$$) — $$$(x_0,y_0)$$$ is the bottom-left vertex of the hidden rectangle and $$$(x_1, y_1)$$$ is the top-right vertex of the hidden rectangle.Note that for hacks the interaction won't be adaptive.",
    "output_details": "esInput13 5 123 80\nOutputInput2 2 4 4\nOutputInput1 1 200 200\nOutput",
    "sample_input": "t",
    "sample_output": "2 4 4",
    "tags": ["binary search", "interactive", "number theory", "*3300"]
  },
  {
    "name": "A Serious Referee",
    "question_id": "a-serious-referee",
    "question": "Andrea has come up with what he believes to be a novel sorting algorithm for arrays of length $$$n$$$. The algorithm works as follows.Initially there is an array of $$$n$$$ integers $$$a_1,\\, a_2,\\, \\dots,\\, a_n$$$. Then, $$$k$$$ steps are executed.For each $$$1\\le i\\le k$$$, during the $$$i$$$-th step the subsequence of the array $$$a$$$ with indexes $$$j_{i,1}< j_{i,2}< \\dots< j_{i, q_i}$$$ is sorted, without changing the values with the remaining indexes. So, the subsequence $$$a_{j_{i,1}},\\, a_{j_{i,2}},\\, \\dots,\\, a_{j_{i,q_i}}$$$ is sorted and all other elements of $$$a$$$ are left untouched.Andrea, being eager to share his discovery with the academic community, sent a short paper describing his algorithm to the journal \"Annals of Sorting Algorithms\" and you are the referee of the paper (that is, the person who must judge the correctness of the paper). You must decide whether Andrea's algorithm is correct, that is, if it sorts any array $$$a$$$ of $$$n$$$ integers.",
    "input_details": "The first line contains two integers $$$n$$$ and $$$k$$$ ($$$1\\le n\\le 40$$$, $$$0\\le k\\le 10$$$) — the length of the arrays handled by Andrea's algorithm and the number of steps of Andrea's algorithm.Then $$$k$$$ lines follow, each describing the subsequence considered in a step of Andrea's algorithm.The $$$i$$$-th of these lines contains the integer $$$q_i$$$ ($$$1\\le q_i\\le n$$$) followed by $$$q_i$$$ integers $$$j_{i,1},\\,j_{i,2},\\,\\dots,\\, j_{i,q_i}$$$ ($$$1\\le j_{i,1}<j_{i,2}<\\cdots<j_{i,q_i}\\le n$$$) — the length of the subsequence considered in the $$$i$$$-th step and the indexes of the subsequence.",
    "output_details": "If Andrea's algorithm is correct print ACCEPTED, otherwise print REJECTED.",
    "sample_input": "4 3\n3 1 2 3\n3 2 3 4\n2 1 2",
    "sample_output": "ACCEPTED",
    "tags": ["bitmasks", "brute force", "dfs and similar", "sortings", "*3000"]
  },
  {
    "name": "Telepanting",
    "question_id": "telepanting",
    "question": "An ant moves on the real line with constant speed of $$$1$$$ unit per second. It starts at $$$0$$$ and always moves to the right (so its position increases by $$$1$$$ each second).There are $$$n$$$ portals, the $$$i$$$-th of which is located at position $$$x_i$$$ and teleports to position $$$y_i < x_i$$$. Each portal can be either active or inactive. The initial state of the $$$i$$$-th portal is determined by $$$s_i$$$: if $$$s_i=0$$$ then the $$$i$$$-th portal is initially inactive, if $$$s_i=1$$$ then the $$$i$$$-th portal is initially active. When the ant travels through a portal (i.e., when its position coincides with the position of a portal):   if the portal is inactive, it becomes active (in this case the path of the ant is not affected);  if the portal is active, it becomes inactive and the ant is instantly teleported to the position $$$y_i$$$, where it keeps on moving as normal. How long (from the instant it starts moving) does it take for the ant to reach the position $$$x_n + 1$$$? It can be shown that this happens in a finite amount of time. Since the answer may be very large, compute it modulo $$$998\\,244\\,353$$$.",
    "input_details": "The first line contains the integer $$$n$$$ ($$$1\\le n\\le 2\\cdot 10^5$$$) — the number of portals.The $$$i$$$-th of the next $$$n$$$ lines contains three integers $$$x_i$$$, $$$y_i$$$ and $$$s_i$$$ ($$$1\\le y_i < x_i\\le 10^9$$$, $$$s_i\\in\\{0,1\\}$$$) — the position of the $$$i$$$-th portal, the position where the ant is teleported when it travels through the $$$i$$$-th portal (if it is active), and the initial state of the $$$i$$$-th portal.The positions of the portals are strictly increasing, that is $$$x_1<x_2<\\cdots<x_n$$$. It is guaranteed that the $$$2n$$$ integers $$$x_1, \\, x_2, \\, \\dots, \\, x_n, \\, y_1, \\, y_2, \\, \\dots, \\, y_n$$$ are all distinct.",
    "output_details": "Output the amount of time elapsed, in seconds, from the instant the ant starts moving to the instant it reaches the position $$$x_n+1$$$. Since the answer may be very large, output it modulo $$$998\\,244\\,353$$$.",
    "sample_input": "4\n3 2 0\n6 5 1\n7 4 0\n8 1 1",
    "sample_output": "23",
    "tags": ["binary search", "data structures", "dp", "sortings", "*2200"]
  },
  {
    "name": "Colors and Intervals",
    "question_id": "colors-and-intervals",
    "question": "The numbers $$$1, \\, 2, \\, \\dots, \\, n \\cdot k$$$ are colored with $$$n$$$ colors. These colors are indexed by $$$1, \\, 2, \\, \\dots, \\, n$$$. For each $$$1 \\le i \\le n$$$, there are exactly $$$k$$$ numbers colored with color $$$i$$$.Let $$$[a, \\, b]$$$ denote the interval of integers between $$$a$$$ and $$$b$$$ inclusive, that is, the set $$$\\{a, \\, a + 1, \\, \\dots, \\, b\\}$$$. You must choose $$$n$$$ intervals $$$[a_1, \\, b_1], \\, [a_2, \\, b_2], \\, \\dots, [a_n, \\, b_n]$$$ such that:   for each $$$1 \\le i \\le n$$$, it holds $$$1 \\le a_i < b_i \\le n \\cdot k$$$;  for each $$$1 \\le i \\le n$$$, the numbers $$$a_i$$$ and $$$b_i$$$ are colored with color $$$i$$$;  each number $$$1 \\le x \\le n \\cdot k$$$ belongs to at most $$$\\left\\lceil \\frac{n}{k - 1} \\right\\rceil$$$ intervals. One can show that such a family of intervals always exists under the given constraints.",
    "input_details": "The first line contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 100$$$, $$$2 \\le k \\le 100$$$) — the number of colors and the number of occurrences of each color.The second line contains $$$n \\cdot k$$$ integers $$$c_1, \\, c_2, \\, \\dots, \\, c_{nk}$$$ ($$$1 \\le c_j \\le n$$$), where $$$c_j$$$ is the color of number $$$j$$$. It is guaranteed that, for each $$$1 \\le i \\le n$$$, it holds $$$c_j = i$$$ for exactly $$$k$$$ distinct indices $$$j$$$.",
    "output_details": "Output $$$n$$$ lines. The $$$i$$$-th line should contain the two integers $$$a_i$$$ and $$$b_i$$$.If there are multiple valid choices of the intervals, output any.",
    "sample_input": "4 3\n2 4 3 1 1 4 2 3 2 1 3 4",
    "sample_output": "4 5\n1 7\n8 11\n6 12",
    "tags": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings",
      "*2300"
    ]
  },
  {
    "name": "Array Differentiation",
    "question_id": "array-differentiation",
    "question": "You are given a sequence of $$$n$$$ integers $$$a_1, \\, a_2, \\, \\dots, \\, a_n$$$.Does there exist a sequence of $$$n$$$ integers $$$b_1, \\, b_2, \\, \\dots, \\, b_n$$$ such that the following property holds?  For each $$$1 \\le i \\le n$$$, there exist two (not necessarily distinct) indices $$$j$$$ and $$$k$$$ ($$$1 \\le j, \\, k \\le n$$$) such that $$$a_i = b_j - b_k$$$. ",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 20$$$) — the number of test cases. Then $$$t$$$ test cases follow.The first line of each test case contains one integer $$$n$$$ ($$$1 \\le n \\le 10$$$).The second line of each test case contains the $$$n$$$ integers $$$a_1, \\, \\dots, \\, a_n$$$ ($$$-10^5 \\le a_i \\le 10^5$$$).",
    "output_details": "For each test case, output a line containing YES if a sequence $$$b_1, \\, \\dots, \\, b_n$$$ satisfying the required property exists, and NO otherwise.",
    "sample_input": "5\n5\n4 -7 -1 5 10\n1\n0\n3\n1 10 100\n4\n-3 2 10 2\n9\n25 -171 250 174 152 242 100 -205 -258",
    "sample_output": "YES\nYES\nNO\nYES\nYES",
    "tags": [
      "bitmasks",
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "graphs",
      "math",
      "*1800"
    ]
  },
  {
    "name": "Maximize the Intersections",
    "question_id": "maximize-the-intersections",
    "question": "On a circle lie $$$2n$$$ distinct points, with the following property: however you choose $$$3$$$ chords that connect $$$3$$$ disjoint pairs of points, no point strictly inside the circle belongs to all $$$3$$$ chords. The points are numbered $$$1, \\, 2, \\, \\dots, \\, 2n$$$ in clockwise order.Initially, $$$k$$$ chords connect $$$k$$$ pairs of points, in such a way that all the $$$2k$$$ endpoints of these chords are distinct.You want to draw $$$n - k$$$ additional chords that connect the remaining $$$2(n - k)$$$ points (each point must be an endpoint of exactly one chord).In the end, let $$$x$$$ be the total number of intersections among all $$$n$$$ chords. Compute the maximum value that $$$x$$$ can attain if you choose the $$$n - k$$$ chords optimally.Note that the exact position of the $$$2n$$$ points is not relevant, as long as the property stated in the first paragraph holds.",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. Then $$$t$$$ test cases follow.The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 100$$$, $$$0 \\le k \\le n$$$) — half the number of points and the number of chords initially drawn.Then $$$k$$$ lines follow. The $$$i$$$-th of them contains two integers $$$x_i$$$ and $$$y_i$$$ ($$$1 \\le x_i, \\, y_i \\le 2n$$$, $$$x_i \\ne y_i$$$) — the endpoints of the $$$i$$$-th chord. It is guaranteed that the $$$2k$$$ numbers $$$x_1, \\, y_1, \\, x_2, \\, y_2, \\, \\dots, \\, x_k, \\, y_k$$$ are all distinct.",
    "output_details": "For each test case, output the maximum number of intersections that can be obtained by drawing $$$n - k$$$ additional chords.",
    "sample_input": "4\n4 2\n8 2\n1 5\n1 1\n2 1\n2 0\n10 6\n14 6\n2 20\n9 10\n13 18\n15 12\n11 7",
    "sample_output": "4\n0\n1\n14",
    "tags": [
      "combinatorics",
      "constructive algorithms",
      "geometry",
      "greedy",
      "sortings",
      "*1800"
    ]
  },
  {
    "name": "Running for Gold",
    "question_id": "running-for-gold",
    "question": "The Olympic Games have just started and Federico is eager to watch the marathon race.There will be $$$n$$$ athletes, numbered from $$$1$$$ to $$$n$$$, competing in the marathon, and all of them have taken part in $$$5$$$ important marathons, numbered from $$$1$$$ to $$$5$$$, in the past. For each $$$1\\le i\\le n$$$ and $$$1\\le j\\le 5$$$, Federico remembers that athlete $$$i$$$ ranked $$$r_{i,j}$$$-th in marathon $$$j$$$ (e.g., $$$r_{2,4}=3$$$ means that athlete $$$2$$$ was third in marathon $$$4$$$).Federico considers athlete $$$x$$$ superior to athlete $$$y$$$ if athlete $$$x$$$ ranked better than athlete $$$y$$$ in at least $$$3$$$ past marathons, i.e., $$$r_{x,j}<r_{y,j}$$$ for at least $$$3$$$ distinct values of $$$j$$$.Federico believes that an athlete is likely to get the gold medal at the Olympics if he is superior to all other athletes.Find any athlete who is likely to get the gold medal (that is, an athlete who is superior to all other athletes), or determine that there is no such athlete.",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. Then $$$t$$$ test cases follow.The first line of each test case contains a single integer $$$n$$$ ($$$1\\le n\\le 50\\,000$$$) — the number of athletes.Then $$$n$$$ lines follow, each describing the ranking positions of one athlete.The $$$i$$$-th of these lines contains the $$$5$$$ integers $$$r_{i,1},\\,r_{i,2},\\,r_{i,3},\\,r_{i,4},\\, r_{i,5}$$$ ($$$1\\le r_{i,j}\\le 50\\,000$$$) — the ranking positions of athlete $$$i$$$ in the past $$$5$$$ marathons. It is guaranteed that, in each of the $$$5$$$ past marathons, the $$$n$$$ athletes have distinct ranking positions, i.e., for each $$$1\\le j\\le 5$$$, the $$$n$$$ values $$$r_{1,j},\\, r_{2, j},\\, \\dots,\\, r_{n, j}$$$ are distinct.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$50\\,000$$$.",
    "output_details": "For each test case, print a single integer — the number of an athlete who is likely to get the gold medal (that is, an athlete who is superior to all other athletes). If there are no such athletes, print $$$-1$$$. If there is more than such one athlete, print any of them.",
    "sample_input": "4\n1\n50000 1 50000 50000 50000\n3\n10 10 20 30 30\n20 20 30 10 10\n30 30 10 20 20\n3\n1 1 1 1 1\n2 2 2 2 2\n3 3 3 3 3\n6\n9 5 3 7 1\n7 4 1 6 8\n5 6 7 3 2\n6 7 8 8 6\n4 2 2 4 5\n8 3 6 9 4",
    "sample_output": "1\n-1\n1\n5",
    "tags": ["combinatorics", "graphs", "greedy", "sortings", "*1500"]
  },
  {
    "name": "Subsequence Permutation",
    "question_id": "subsequence-permutation",
    "question": "A string $$$s$$$ of length $$$n$$$, consisting of lowercase letters of the English alphabet, is given.You must choose some number $$$k$$$ between $$$0$$$ and $$$n$$$. Then, you select $$$k$$$ characters of $$$s$$$ and permute them however you want. In this process, the positions of the other $$$n-k$$$ characters remain unchanged. You have to perform this operation exactly once.For example, if $$$s=\\texttt{\"andrea\"}$$$, you can choose the $$$k=4$$$ characters $$$\\texttt{\"a_d_ea\"}$$$ and permute them into $$$\\texttt{\"d_e_aa\"}$$$ so that after the operation the string becomes $$$\\texttt{\"dneraa\"}$$$.Determine the minimum $$$k$$$ so that it is possible to sort $$$s$$$ alphabetically (that is, after the operation its characters appear in alphabetical order).",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. Then $$$t$$$ test cases follow.The first line of each test case contains one integer $$$n$$$ ($$$1 \\le n \\le 40$$$) — the length of the string.The second line of each test case contains the string $$$s$$$. It is guaranteed that $$$s$$$ contains only lowercase letters of the English alphabet.",
    "output_details": "For each test case, output the minimum $$$k$$$ that allows you to obtain a string sorted alphabetically, through the operation described above.",
    "sample_input": "4\n3\nlol\n10\ncodeforces\n5\naaaaa\n4\ndcba",
    "sample_output": "2\n6\n0\n4",
    "tags": ["sortings", "strings", "*800"]
  },
  {
    "name": "Equidistant Vertices",
    "question_id": "equidistant-vertices",
    "question": "A tree is an undirected connected graph without cycles.You are given a tree of $$$n$$$ vertices. Find the number of ways to choose exactly $$$k$$$ vertices in this tree (i. e. a $$$k$$$-element subset of vertices) so that all pairwise distances between the selected vertices are equal (in other words, there exists an integer $$$c$$$ such that for all $$$u, v$$$ ($$$u \\ne v$$$, $$$u, v$$$ are in selected vertices) $$$d_{u,v}=c$$$, where $$$d_{u,v}$$$ is the distance from $$$u$$$ to $$$v$$$).Since the answer may be very large, you need to output it modulo $$$10^9 + 7$$$.",
    "input_details": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10$$$) — the number of test cases. Then $$$t$$$ test cases follow.Each test case is preceded by an empty line.Each test case consists of several lines. The first line of the test case contains two integers $$$n$$$ and $$$k$$$ ($$$2 \\le k \\le n \\le 100$$$) — the number of vertices in the tree and the number of vertices to be selected, respectively. Then $$$n - 1$$$ lines follow, each of them contains two integers $$$u$$$ and $$$v$$$ ($$$1 \\le u, v \\le n$$$, $$$u \\neq v$$$) which describe a pair of vertices connected by an edge. It is guaranteed that the given graph is a tree and has no loops or multiple edges.",
    "output_details": "For each test case output in a separate line a single integer — the number of ways to select exactly $$$k$$$ vertices so that for all pairs of selected vertices the distances between the vertices in the pairs are equal, modulo $$$10^9 + 7$$$ (in other words, print the remainder when divided by $$$1000000007$$$).",
    "sample_input": "3\n\n4 2\n1 2\n2 3\n2 4\n\n3 3\n1 2\n2 3\n\n5 3\n1 2\n2 3\n2 4\n4 5",
    "sample_output": "6\n0\n1",
    "tags": [
      "brute force",
      "combinatorics",
      "dfs and similar",
      "dp",
      "trees",
      "*2200"
    ]
  },
  {
    "name": "Fixed Points",
    "question_id": "fixed-points",
    "question": "Consider a sequence of integers $$$a_1, a_2, \\ldots, a_n$$$. In one move, you can select any element of the sequence and delete it. After an element is deleted, all elements to the right are shifted to the left by $$$1$$$ position, so there are no empty spaces in the sequence. So after you make a move, the sequence's length decreases by $$$1$$$. The indices of the elements after the move are recalculated.E. g. let the sequence be $$$a=[3, 2, 2, 1, 5]$$$. Let's select the element $$$a_3=2$$$ in a move. Then after the move the sequence will be equal to $$$a=[3, 2, 1, 5]$$$, so the $$$3$$$-rd element of the new sequence will be $$$a_3=1$$$ and the $$$4$$$-th element will be $$$a_4=5$$$.You are given a sequence $$$a_1, a_2, \\ldots, a_n$$$ and a number $$$k$$$. You need to find the minimum number of moves you have to make so that in the resulting sequence there will be at least $$$k$$$ elements that are equal to their indices, i. e. the resulting sequence $$$b_1, b_2, \\ldots, b_m$$$ will contain at least $$$k$$$ indices $$$i$$$ such that $$$b_i = i$$$.",
    "input_details": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. Then $$$t$$$ test cases follow.Each test case consists of two consecutive lines. The first line contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 2000$$$). The second line contains a sequence of integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le n$$$). The numbers in the sequence are not necessarily different.It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2000$$$.",
    "output_details": "For each test case output in a single line:  $$$-1$$$ if there's no desired move sequence;  otherwise, the integer $$$x$$$ ($$$0 \\le x \\le n$$$) — the minimum number of the moves to be made so that the resulting sequence will contain at least $$$k$$$ elements that are equal to their indices. ",
    "sample_input": "4\n7 6\n1 1 2 3 4 5 6\n5 2\n5 1 3 2 3\n5 2\n5 5 5 5 4\n8 4\n1 2 3 3 2 2 5 5",
    "sample_output": "1\n2\n-1\n2",
    "tags": ["binary search", "brute force", "dp", "*2000"]
  },
  {
    "name": " Domino (hard version)",
    "question_id": "domino-hard-version",
    "question": "The only difference between this problem and D1 is that you don't have to provide the way to construct the answer in D1, but you have to do it in this problem.There's a table of $$$n \\times m$$$ cells ($$$n$$$ rows and $$$m$$$ columns). The value of $$$n \\cdot m$$$ is even.A domino is a figure that consists of two cells having a common side. It may be horizontal (one of the cells is to the right of the other) or vertical (one of the cells is above the other).You need to place $$$\\frac{nm}{2}$$$ dominoes on the table so that exactly $$$k$$$ of them are horizontal and all the other dominoes are vertical. The dominoes cannot overlap and must fill the whole table.",
    "input_details": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10$$$) — the number of test cases. Then $$$t$$$ test cases follow.Each test case consists of a single line. The line contains three integers $$$n$$$, $$$m$$$, $$$k$$$ ($$$1 \\le n,m \\le 100$$$, $$$0 \\le k \\le \\frac{nm}{2}$$$, $$$n \\cdot m$$$ is even) — the count of rows, columns and horizontal dominoes, respectively.",
    "output_details": "For each test case:  print \"NO\" if it's not possible to place the dominoes on the table in the described way;  otherwise, print \"YES\" on a separate line, then print $$$n$$$ lines so that each of them contains $$$m$$$ lowercase letters of the Latin alphabet — the layout of the dominoes on the table. Each cell of the table must be marked by the letter so that for every two cells having a common side, they are marked by the same letters if and only if they are occupied by the same domino. I.e. both cells of the same domino must be marked with the same letter, but two dominoes that share a side must be marked with different letters. If there are multiple solutions, print any of them. ",
    "sample_input": "8\n4 4 2\n2 3 0\n3 2 3\n1 2 0\n2 4 2\n5 2 2\n2 17 16\n2 1 1",
    "sample_output": "YES\naccx\naegx\nbega\nbdda\nYES\naha\naha\nYES\nzz\naa\nzz\nNO\nYES\naaza\nbbza\nNO\nYES\nbbaabbaabbaabbaay\nddccddccddccddccy\nNO",
    "tags": ["constructive algorithms", "implementation", "math", "*2100"]
  },
  {
    "name": " Domino (easy version)",
    "question_id": "domino-easy-version",
    "question": "The only difference between this problem and D2 is that you don't have to provide the way to construct the answer in this problem, but you have to do it in D2.There's a table of $$$n \\times m$$$ cells ($$$n$$$ rows and $$$m$$$ columns). The value of $$$n \\cdot m$$$ is even.A domino is a figure that consists of two cells having a common side. It may be horizontal (one of the cells is to the right of the other) or vertical (one of the cells is above the other).You need to find out whether it is possible to place $$$\\frac{nm}{2}$$$ dominoes on the table so that exactly $$$k$$$ of them are horizontal and all the other dominoes are vertical. The dominoes cannot overlap and must fill the whole table.",
    "input_details": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10$$$) — the number of test cases. Then $$$t$$$ test cases follow.Each test case consists of a single line. The line contains three integers $$$n$$$, $$$m$$$, $$$k$$$ ($$$1 \\le n,m \\le 100$$$, $$$0 \\le k \\le \\frac{nm}{2}$$$, $$$n \\cdot m$$$ is even) — the number of rows, columns and horizontal dominoes, respectively.",
    "output_details": "For each test case output \"YES\", if it is possible to place dominoes in the desired way, or \"NO\" otherwise.You may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer).",
    "sample_input": "8\n4 4 2\n2 3 0\n3 2 3\n1 2 0\n2 4 2\n5 2 2\n2 17 16\n2 1 1",
    "sample_output": "YES\nYES\nYES\nNO\nYES\nNO\nYES\nNO",
    "tags": ["constructive algorithms", "math", "*1700"]
  },
  {
    "name": "Interesting Story",
    "question_id": "interesting-story",
    "question": "Stephen Queen wants to write a story. He is a very unusual writer, he uses only letters 'a', 'b', 'c', 'd' and 'e'!To compose a story, Stephen wrote out $$$n$$$ words consisting of the first $$$5$$$ lowercase letters of the Latin alphabet. He wants to select the maximum number of words to make an interesting story.Let a story be a sequence of words that are not necessarily different. A story is called interesting if there exists a letter which occurs among all words of the story more times than all other letters together.For example, the story consisting of three words \"bac\", \"aaada\", \"e\" is interesting (the letter 'a' occurs $$$5$$$ times, all other letters occur $$$4$$$ times in total). But the story consisting of two words \"aba\", \"abcde\" is not (no such letter that it occurs more than all other letters in total).You are given a sequence of $$$n$$$ words consisting of letters 'a', 'b', 'c', 'd' and 'e'. Your task is to choose the maximum number of them to make an interesting story. If there's no way to make a non-empty story, output $$$0$$$.",
    "input_details": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 5000$$$) — the number of test cases. Then $$$t$$$ test cases follow.The first line of each test case contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the number of the words in the sequence. Then $$$n$$$ lines follow, each of them contains a word — a non-empty string consisting of lowercase letters of the Latin alphabet. The words in the sequence may be non-distinct (i. e. duplicates are allowed). Only the letters 'a', 'b', 'c', 'd' and 'e' may occur in the words.It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$; the sum of the lengths of all words over all test cases doesn't exceed $$$4 \\cdot 10^5$$$.",
    "output_details": "For each test case, output the maximum number of words that compose an interesting story. Print 0 if there's no way to make a non-empty interesting story.",
    "sample_input": "6\n3\nbac\naaada\ne\n3\naba\nabcde\naba\n2\nbaba\nbaba\n4\nab\nab\nc\nbc\n5\ncbdca\nd\na\nd\ne\n3\nb\nc\nca",
    "sample_output": "3\n2\n0\n2\n3\n2",
    "tags": ["greedy", "sortings", "strings", "*1500"]
  },
  {
    "name": " Wonderful Coloring - 2",
    "question_id": "wonderful-coloring-2",
    "question": "This problem is an extension of the problem \"Wonderful Coloring - 1\". It has quite many differences, so you should read this statement completely.Recently, Paul and Mary have found a new favorite sequence of integers $$$a_1, a_2, \\dots, a_n$$$. They want to paint it using pieces of chalk of $$$k$$$ colors. The coloring of a sequence is called wonderful if the following conditions are met:  each element of the sequence is either painted in one of $$$k$$$ colors or isn't painted;  each two elements which are painted in the same color are different (i. e. there's no two equal values painted in the same color);  let's calculate for each of $$$k$$$ colors the number of elements painted in the color — all calculated numbers must be equal;  the total number of painted elements of the sequence is the maximum among all colorings of the sequence which meet the first three conditions. E. g. consider a sequence $$$a=[3, 1, 1, 1, 1, 10, 3, 10, 10, 2]$$$ and $$$k=3$$$. One of the wonderful colorings of the sequence is shown in the figure.    The example of a wonderful coloring of the sequence $$$a=[3, 1, 1, 1, 1, 10, 3, 10, 10, 2]$$$ and $$$k=3$$$. Note that one of the elements isn't painted. Help Paul and Mary to find a wonderful coloring of a given sequence $$$a$$$.",
    "input_details": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10000$$$) — the number of test cases. Then $$$t$$$ test cases follow.Each test case consists of two lines. The first one contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 2\\cdot10^5$$$, $$$1 \\le k \\le n$$$) — the length of a given sequence and the number of colors, respectively. The second one contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le n$$$).It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$.",
    "output_details": "Output $$$t$$$ lines, each of them must contain a description of a wonderful coloring for the corresponding test case.Each wonderful coloring must be printed as a sequence of $$$n$$$ integers $$$c_1, c_2, \\dots, c_n$$$ ($$$0 \\le c_i \\le k$$$) separated by spaces where  $$$c_i=0$$$, if $$$i$$$-th element isn't painted;  $$$c_i>0$$$, if $$$i$$$-th element is painted in the $$$c_i$$$-th color. Remember that you need to maximize the total count of painted elements for the wonderful coloring. If there are multiple solutions, print any one.",
    "sample_input": "6\n10 3\n3 1 1 1 1 10 3 10 10 2\n4 4\n1 1 1 1\n1 1\n1\n13 1\n3 1 4 1 5 9 2 6 5 3 5 8 9\n13 2\n3 1 4 1 5 9 2 6 5 3 5 8 9\n13 3\n3 1 4 1 5 9 2 6 5 3 5 8 9",
    "sample_output": "1 1 0 2 3 2 2 1 3 3\n4 2 1 3\n1\n0 0 1 1 0 1 1 1 0 1 1 1 0\n2 1 2 2 1 1 1 1 2 1 0 2 2\n1 1 3 2 1 3 3 1 2 2 3 2 0",
    "tags": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "*1400"
    ]
  },
  {
    "name": " Wonderful Coloring - 1",
    "question_id": "wonderful-coloring-1",
    "question": "This is a simplified version of the problem B2. Perhaps you should read the problem B2 before you start solving B1.Paul and Mary have a favorite string $$$s$$$ which consists of lowercase letters of the Latin alphabet. They want to paint it using pieces of chalk of two colors: red and green. Let's call a coloring of a string wonderful if the following conditions are met:  each letter of the string is either painted in exactly one color (red or green) or isn't painted;  each two letters which are painted in the same color are different;  the number of letters painted in red is equal to the number of letters painted in green;  the number of painted letters of this coloring is maximum among all colorings of the string which meet the first three conditions. E. g. consider a string $$$s$$$ equal to \"kzaaa\". One of the wonderful colorings of the string is shown in the figure.    The example of a wonderful coloring of the string \"kzaaa\". Paul and Mary want to learn by themselves how to find a wonderful coloring of the string. But they are very young, so they need a hint. Help them find $$$k$$$ — the number of red (or green, these numbers are equal) letters in a wonderful coloring.",
    "input_details": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. Then $$$t$$$ test cases follow.Each test case consists of one non-empty string $$$s$$$ which consists of lowercase letters of the Latin alphabet. The number of characters in the string doesn't exceed $$$50$$$.",
    "output_details": "For each test case, output a separate line containing one non-negative integer $$$k$$$ — the number of letters which will be painted in red in a wonderful coloring.",
    "sample_input": "5\nkzaaa\ncodeforces\narchive\ny\nxxxxxx",
    "sample_output": "2\n5\n3\n0\n1",
    "tags": ["greedy", "strings", "*800"]
  },
  {
    "name": "Polycarp and Coins",
    "question_id": "polycarp-and-coins",
    "question": "Polycarp must pay exactly $$$n$$$ burles at the checkout. He has coins of two nominal values: $$$1$$$ burle and $$$2$$$ burles. Polycarp likes both kinds of coins equally. So he doesn't want to pay with more coins of one type than with the other.Thus, Polycarp wants to minimize the difference between the count of coins of $$$1$$$ burle and $$$2$$$ burles being used. Help him by determining two non-negative integer values $$$c_1$$$ and $$$c_2$$$ which are the number of coins of $$$1$$$ burle and $$$2$$$ burles, respectively, so that the total value of that number of coins is exactly $$$n$$$ (i. e. $$$c_1 + 2 \\cdot c_2 = n$$$), and the absolute value of the difference between $$$c_1$$$ and $$$c_2$$$ is as little as possible (i. e. you must minimize $$$|c_1-c_2|$$$).",
    "input_details": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. Then $$$t$$$ test cases follow.Each test case consists of one line. This line contains one integer $$$n$$$ ($$$1 \\le n \\le 10^9$$$) — the number of burles to be paid by Polycarp.",
    "output_details": "For each test case, output a separate line containing two integers $$$c_1$$$ and $$$c_2$$$ ($$$c_1, c_2 \\ge 0$$$) separated by a space where $$$c_1$$$ is the number of coins of $$$1$$$ burle and $$$c_2$$$ is the number of coins of $$$2$$$ burles. If there are multiple optimal solutions, print any one.",
    "sample_input": "6\n1000\n30\n1\n32\n1000000000\n5",
    "sample_output": "334 333\n10 10\n1 0\n10 11\n333333334 333333333\n1 2",
    "tags": ["greedy", "math", "*800"]
  },
  {
    "name": "Jumping Around",
    "question_id": "jumping-around",
    "question": "There is an infinite pond that can be represented with a number line. There are $$$n$$$ rocks in the pond, numbered from $$$1$$$ to $$$n$$$. The $$$i$$$-th rock is located at an integer coordinate $$$a_i$$$. The coordinates of the rocks are pairwise distinct. The rocks are numbered in the increasing order of the coordinate, so $$$a_1 < a_2 < \\dots < a_n$$$.A robot frog sits on the rock number $$$s$$$. The frog is programmable. It has a base jumping distance parameter $$$d$$$. There also is a setting for the jumping distance range. If the jumping distance range is set to some integer $$$k$$$, then the frog can jump from some rock to any rock at a distance from $$$d - k$$$ to $$$d + k$$$ inclusive in any direction. The distance between two rocks is an absolute difference between their coordinates.You are assigned a task to implement a feature for the frog. Given two integers $$$i$$$ and $$$k$$$ determine if the frog can reach a rock number $$$i$$$ from a rock number $$$s$$$ performing a sequence of jumps with the jumping distance range set to $$$k$$$. The sequence can be arbitrarily long or empty.You will be given $$$q$$$ testcases for that feature, the $$$j$$$-th testcase consists of two integers $$$i$$$ and $$$k$$$. Print \"Yes\" if the $$$i$$$-th rock is reachable and \"No\" otherwise.You can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\", \"Yes\" and 'YES\"' will be recognized as a positive answer).",
    "input_details": "The first line contains four integers $$$n$$$, $$$q$$$, $$$s$$$ and $$$d$$$ ($$$1 \\le n, q \\le 2 \\cdot 10^5$$$; $$$1 \\le s \\le n$$$; $$$1 \\le d \\le 10^6$$$) — the number of rocks, the number of testcases, the starting rock and the base jumping distance parameter.The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^6$$$) — the coordinates of the rocks. The coordinates of the rocks are pairwise distinct. The rocks are numbered in the increasing order of distance from the land, so $$$a_1 < a_2 < \\dots < a_n$$$.Each of the next $$$q$$$ lines contains two integers $$$i$$$ and $$$k$$$ ($$$1 \\le i \\le n$$$; $$$1 \\le k \\le 10^6$$$) — the parameters to the testcase.",
    "output_details": "For each of the testcases print an answer. If there is a sequence of jumps from a rock number $$$s$$$ to a rock number $$$i$$$ with the jumping distance range set to $$$k$$$, then print \"Yes\". Otherwise, print \"No\".",
    "sample_input": "7 4 4 5\n1 5 10 13 20 22 28\n4 1\n7 2\n7 3\n3 2",
    "sample_output": "Yes\nNo\nYes\nYes",
    "tags": [
      "binary search",
      "data structures",
      "divide and conquer",
      "dp",
      "dsu",
      "graphs",
      "shortest paths",
      "*2700"
    ]
  },
  {
    "name": "Stringforces",
    "question_id": "stringforces",
    "question": "You are given a string $$$s$$$ of length $$$n$$$. Each character is either one of the first $$$k$$$ lowercase Latin letters or a question mark.You are asked to replace every question mark with one of the first $$$k$$$ lowercase Latin letters in such a way that the following value is maximized.Let $$$f_i$$$ be the maximum length substring of string $$$s$$$, which consists entirely of the $$$i$$$-th Latin letter. A substring of a string is a contiguous subsequence of that string. If the $$$i$$$-th letter doesn't appear in a string, then $$$f_i$$$ is equal to $$$0$$$.The value of a string $$$s$$$ is the minimum value among $$$f_i$$$ for all $$$i$$$ from $$$1$$$ to $$$k$$$.What is the maximum value the string can have?",
    "input_details": "The first line contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$; $$$1 \\le k \\le 17$$$) — the length of the string and the number of first Latin letters used.The second line contains a string $$$s$$$, consisting of $$$n$$$ characters. Each character is either one of the first $$$k$$$ lowercase Latin letters or a question mark.",
    "output_details": "Print a single integer — the maximum value of the string after every question mark is replaced with one of the first $$$k$$$ lowercase Latin letters.",
    "sample_input": "10 2\na??ab????b",
    "sample_output": "4",
    "tags": [
      "binary search",
      "bitmasks",
      "brute force",
      "dp",
      "strings",
      "two pointers",
      "*2500"
    ]
  },
  {
    "name": "Excellent Arrays",
    "question_id": "excellent-arrays",
    "question": "Let's call an integer array $$$a_1, a_2, \\dots, a_n$$$ good if $$$a_i \\neq i$$$ for each $$$i$$$.Let $$$F(a)$$$ be the number of pairs $$$(i, j)$$$ ($$$1 \\le i < j \\le n$$$) such that $$$a_i + a_j = i + j$$$.Let's say that an array $$$a_1, a_2, \\dots, a_n$$$ is excellent if:   $$$a$$$ is good;  $$$l \\le a_i \\le r$$$ for each $$$i$$$;  $$$F(a)$$$ is the maximum possible among all good arrays of size $$$n$$$. Given $$$n$$$, $$$l$$$ and $$$r$$$, calculate the number of excellent arrays modulo $$$10^9 + 7$$$.",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. The first and only line of each test case contains three integers $$$n$$$, $$$l$$$, and $$$r$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$; $$$-10^9 \\le l \\le 1$$$; $$$n \\le r \\le 10^9$$$).It's guaranteed that the sum of $$$n$$$ doesn't exceed $$$2 \\cdot 10^5$$$.",
    "output_details": "For each test case, print the number of excellent arrays modulo $$$10^9 + 7$$$.",
    "sample_input": "4\n3 0 3\n4 -3 5\n42 -33 55\n69 -42 146",
    "sample_output": "4\n10\n143922563\n698570404",
    "tags": [
      "binary search",
      "combinatorics",
      "constructive algorithms",
      "implementation",
      "math",
      "sortings",
      "two pointers",
      "*2300"
    ]
  },
  {
    "name": "Manhattan Subarrays",
    "question_id": "manhattan-subarrays",
    "question": "Suppose you have two points $$$p = (x_p, y_p)$$$ and $$$q = (x_q, y_q)$$$. Let's denote the Manhattan distance between them as $$$d(p, q) = |x_p - x_q| + |y_p - y_q|$$$.Let's say that three points $$$p$$$, $$$q$$$, $$$r$$$ form a bad triple if $$$d(p, r) = d(p, q) + d(q, r)$$$.Let's say that an array $$$b_1, b_2, \\dots, b_m$$$ is good if it is impossible to choose three distinct indices $$$i$$$, $$$j$$$, $$$k$$$ such that the points $$$(b_i, i)$$$, $$$(b_j, j)$$$ and $$$(b_k, k)$$$ form a bad triple.You are given an array $$$a_1, a_2, \\dots, a_n$$$. Calculate the number of good subarrays of $$$a$$$. A subarray of the array $$$a$$$ is the array $$$a_l, a_{l + 1}, \\dots, a_r$$$ for some $$$1 \\le l \\le r \\le n$$$.Note that, according to the definition, subarrays of length $$$1$$$ and $$$2$$$ are good.",
    "input_details": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 5000$$$) — the number of test cases.The first line of each test case contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the length of array $$$a$$$.The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$).It's guaranteed that the sum of $$$n$$$ doesn't exceed $$$2 \\cdot 10^5$$$.",
    "output_details": "For each test case, print the number of good subarrays of array $$$a$$$.",
    "sample_input": "3\n4\n2 4 1 3\n5\n6 9 1 9 6\n2\n13 37",
    "sample_output": "10\n12\n3",
    "tags": ["brute force", "geometry", "greedy", "implementation", "*1700"]
  },
  {
    "name": "Maximum Cost Deletion",
    "question_id": "maximum-cost-deletion",
    "question": "You are given a string $$$s$$$ of length $$$n$$$ consisting only of the characters 0 and 1.You perform the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue the remaining two parts together (any of them can be empty) in the same order. For example, if you erase the substring 111 from the string 111110, you will get the string 110. When you delete a substring of length $$$l$$$, you get $$$a \\cdot l + b$$$ points.Your task is to calculate the maximum number of points that you can score in total, if you have to make the given string empty.",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 2000$$$) — the number of testcases.The first line of each testcase contains three integers $$$n$$$, $$$a$$$ and $$$b$$$ ($$$1 \\le n \\le 100; -100 \\le a, b \\le 100$$$) — the length of the string $$$s$$$ and the parameters $$$a$$$ and $$$b$$$.The second line contains the string $$$s$$$. The string $$$s$$$ consists only of the characters 0 and 1.",
    "output_details": "For each testcase, print a single integer — the maximum number of points that you can score.",
    "sample_input": "3\n3 2 0\n000\n5 -2 5\n11001\n6 1 -4\n100111",
    "sample_output": "6\n15\n-2",
    "tags": ["greedy", "math", "*1000"]
  },
  {
    "name": "Find The Array",
    "question_id": "find-the-array",
    "question": "Let's call an array $$$a$$$ consisting of $$$n$$$ positive (greater than $$$0$$$) integers beautiful if the following condition is held for every $$$i$$$ from $$$1$$$ to $$$n$$$: either $$$a_i = 1$$$, or at least one of the numbers $$$a_i - 1$$$ and $$$a_i - 2$$$ exists in the array as well.For example:   the array $$$[5, 3, 1]$$$ is beautiful: for $$$a_1$$$, the number $$$a_1 - 2 = 3$$$ exists in the array; for $$$a_2$$$, the number $$$a_2 - 2 = 1$$$ exists in the array; for $$$a_3$$$, the condition $$$a_3 = 1$$$ holds;  the array $$$[1, 2, 2, 2, 2]$$$ is beautiful: for $$$a_1$$$, the condition $$$a_1 = 1$$$ holds; for every other number $$$a_i$$$, the number $$$a_i - 1 = 1$$$ exists in the array;  the array $$$[1, 4]$$$ is not beautiful: for $$$a_2$$$, neither $$$a_2 - 2 = 2$$$ nor $$$a_2 - 1 = 3$$$ exists in the array, and $$$a_2 \\ne 1$$$;  the array $$$[2]$$$ is not beautiful: for $$$a_1$$$, neither $$$a_1 - 1 = 1$$$ nor $$$a_1 - 2 = 0$$$ exists in the array, and $$$a_1 \\ne 1$$$;  the array $$$[2, 1, 3]$$$ is beautiful: for $$$a_1$$$, the number $$$a_1 - 1 = 1$$$ exists in the array; for $$$a_2$$$, the condition $$$a_2 = 1$$$ holds; for $$$a_3$$$, the number $$$a_3 - 2 = 1$$$ exists in the array. You are given a positive integer $$$s$$$. Find the minimum possible size of a beautiful array with the sum of elements equal to $$$s$$$.",
    "input_details": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 5000$$$) — the number of test cases.Then $$$t$$$ lines follow, the $$$i$$$-th line contains one integer $$$s$$$ ($$$1 \\le s \\le 5000$$$) for the $$$i$$$-th test case.",
    "output_details": "Print $$$t$$$ integers, the $$$i$$$-th integer should be the answer for the $$$i$$$-th testcase: the minimum possible size of a beautiful array with the sum of elements equal to $$$s$$$.",
    "sample_input": "4\n1\n8\n7\n42",
    "sample_output": "1\n3\n3\n7",
    "tags": ["greedy", "math", "*800"]
  },
  {
    "name": "Gregor and the Pawn Game",
    "question_id": "gregor-and-the-pawn-game",
    "question": "There is a chessboard of size $$$n$$$ by $$$n$$$. The square in the $$$i$$$-th row from top and $$$j$$$-th column from the left is labelled $$$(i,j)$$$.Currently, Gregor has some pawns in the $$$n$$$-th row. There are also enemy pawns in the $$$1$$$-st row. On one turn, Gregor moves one of his pawns. A pawn can move one square up (from $$$(i,j)$$$ to $$$(i-1,j)$$$) if there is no pawn in the destination square. Additionally, a pawn can move one square diagonally up (from $$$(i,j)$$$ to either $$$(i-1,j-1)$$$ or $$$(i-1,j+1)$$$) if and only if there is an enemy pawn in that square. The enemy pawn is also removed.Gregor wants to know what is the maximum number of his pawns that can reach row $$$1$$$?Note that only Gregor takes turns in this game, and the enemy pawns never move. Also, when Gregor's pawn reaches row $$$1$$$, it is stuck and cannot make any further moves.",
    "input_details": "The first line of the input contains one integer $$$t$$$ ($$$1\\le t\\le 2\\cdot 10^4$$$) — the number of test cases. Then $$$t$$$ test cases follow.Each test case consists of three lines. The first line contains a single integer $$$n$$$ ($$$2\\le n\\le 2\\cdot{10}^{5}$$$) — the size of the chessboard.The second line consists of a string of binary digits of length $$$n$$$, where a $$$1$$$ in the $$$i$$$-th position corresponds to an enemy pawn in the $$$i$$$-th cell from the left, and $$$0$$$ corresponds to an empty cell.The third line consists of a string of binary digits of length $$$n$$$, where a $$$1$$$ in the $$$i$$$-th position corresponds to a Gregor's pawn in the $$$i$$$-th cell from the left, and $$$0$$$ corresponds to an empty cell.It is guaranteed that the sum of $$$n$$$ across all test cases is less than $$$2\\cdot{10}^{5}$$$.",
    "output_details": "For each test case, print one integer: the maximum number of Gregor's pawns which can reach the $$$1$$$-st row.",
    "sample_input": "4\n3\n000\n111\n4\n1111\n1111\n3\n010\n010\n5\n11001\n00000",
    "sample_output": "3\n4\n0\n0",
    "tags": [
      "dfs and similar",
      "dp",
      "flows",
      "graph matchings",
      "graphs",
      "greedy",
      "implementation",
      "*800"
    ]
  },
  {
    "name": "Gregor and Cryptography",
    "question_id": "gregor-and-cryptography",
    "question": "Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.Gregor's favorite prime number is $$$P$$$. Gregor wants to find two bases of $$$P$$$. Formally, Gregor is looking for two integers $$$a$$$ and $$$b$$$ which satisfy both of the following properties.  $$$P \\bmod a = P \\bmod b$$$, where $$$x \\bmod y$$$ denotes the remainder when $$$x$$$ is divided by $$$y$$$, and  $$$2 \\le a < b \\le P$$$. Help Gregor find two bases of his favorite prime number!",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 1000$$$).Each subsequent line contains the integer $$$P$$$ ($$$5 \\le P \\le {10}^9$$$), with $$$P$$$ guaranteed to be prime.",
    "output_details": "Your output should consist of $$$t$$$ lines. Each line should consist of two integers $$$a$$$ and $$$b$$$ ($$$2 \\le a < b \\le P$$$). If there are multiple possible solutions, print any.",
    "sample_input": "2\n17\n5",
    "sample_output": "3 5\n2 4",
    "tags": ["math", "number theory", "*800"]
  },
  {
    "name": "Gregor and the Two Painters",
    "question_id": "gregor-and-the-two-painters",
    "question": "Two painters, Amin and Benj, are repainting Gregor's living room ceiling! The ceiling can be modeled as an $$$n \\times m$$$ grid.For each $$$i$$$ between $$$1$$$ and $$$n$$$, inclusive, painter Amin applies $$$a_i$$$ layers of paint to the entire $$$i$$$-th row. For each $$$j$$$ between $$$1$$$ and $$$m$$$, inclusive, painter Benj applies $$$b_j$$$ layers of paint to the entire $$$j$$$-th column. Therefore, the cell $$$(i,j)$$$ ends up with $$$a_i+b_j$$$ layers of paint.Gregor considers the cell $$$(i,j)$$$ to be badly painted if $$$a_i+b_j \\le x$$$. Define a badly painted region to be a maximal connected component of badly painted cells, i. e. a connected component of badly painted cells such that all adjacent to the component cells are not badly painted. Two cells are considered adjacent if they share a side.Gregor is appalled by the state of the finished ceiling, and wants to know the number of badly painted regions.",
    "input_details": "The first line contains three integers $$$n$$$, $$$m$$$ and $$$x$$$ ($$$1 \\le n,m \\le 2\\cdot 10^5$$$, $$$1 \\le x \\le 2\\cdot 10^5$$$) — the dimensions of Gregor's ceiling, and the maximum number of paint layers in a badly painted cell.The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 2\\cdot 10^5$$$), the number of paint layers Amin applies to each row.The third line contains $$$m$$$ integers $$$b_1, b_2, \\ldots, b_m$$$ ($$$1 \\le b_j \\le 2\\cdot 10^5$$$), the number of paint layers Benj applies to each column.",
    "output_details": "Print a single integer, the number of badly painted regions.",
    "sample_input": "3 4 11\n9 8 5\n10 6 7 2",
    "sample_output": "2",
    "tags": [
      "data structures",
      "divide and conquer",
      "graphs",
      "greedy",
      "math",
      "*3400"
    ]
  },
  {
    "name": " Gregor and the Odd Cows (Hard)",
    "question_id": "gregor-and-the-odd-cows-hard",
    "question": "This is the hard version of the problem. The only difference from the easy version is that in this version the coordinates can be both odd and even.There are $$$n$$$ fence-posts at distinct coordinates on a plane. It is guaranteed that no three fence posts lie on the same line.There are an infinite number of cows on the plane, one at every point with integer coordinates.Gregor is a member of the Illuminati, and wants to build a triangular fence, connecting $$$3$$$ distinct existing fence posts. A cow strictly inside the fence is said to be enclosed. If there are an odd number of enclosed cows and the area of the fence is an integer, the fence is said to be interesting.Find the number of interesting fences.",
    "input_details": "The first line contains the integer $$$n$$$ ($$$3 \\le n \\le 6000$$$), the number of fence posts which Gregor can choose to form the vertices of a fence.Each of the next $$$n$$$ line contains two integers $$$x$$$ and $$$y$$$ ($$$0 \\le x,y \\le 10^7$$$, where $$$(x,y)$$$ is the coordinate of a fence post. All fence posts lie at distinct coordinates. No three fence posts are on the same line.",
    "output_details": "Print a single integer, the number of interesting fences. Two fences are considered different if they are constructed with a different set of three fence posts.",
    "sample_input": "3\n0 0\n2 0\n0 4",
    "sample_output": "1",
    "tags": ["brute force", "geometry", "math", "number theory", "*3300"]
  },
  {
    "name": " Gregor and the Odd Cows (Easy)",
    "question_id": "gregor-and-the-odd-cows-easy",
    "question": "This is the easy version of the problem. The only difference from the hard version is that in this version all coordinates are even.There are $$$n$$$ fence-posts at distinct coordinates on a plane. It is guaranteed that no three fence posts lie on the same line.There are an infinite number of cows on the plane, one at every point with integer coordinates.Gregor is a member of the Illuminati, and wants to build a triangular fence, connecting $$$3$$$ distinct existing fence posts. A cow strictly inside the fence is said to be enclosed. If there are an odd number of enclosed cows and the area of the fence is an integer, the fence is said to be interesting.Find the number of interesting fences.",
    "input_details": "The first line contains the integer $$$n$$$ ($$$3 \\le n \\le 6000$$$), the number of fence posts which Gregor can choose to form the vertices of a fence.Each of the next $$$n$$$ line contains two integers $$$x$$$ and $$$y$$$ ($$$0 \\le x,y \\le 10^7$$$, $$$x$$$ and $$$y$$$ are even), where $$$(x,y)$$$ is the coordinate of a fence post. All fence posts lie at distinct coordinates. No three fence posts are on the same line.",
    "output_details": "Print a single integer, the number of interesting fences. Two fences are considered different if they are constructed with a different set of three fence posts.",
    "sample_input": "3\n0 0\n2 0\n0 4",
    "sample_output": "1",
    "tags": ["bitmasks", "geometry", "math", "number theory", "*2300"]
  },
  {
    "name": "The Three Little Pigs",
    "question_id": "the-three-little-pigs",
    "question": "Three little pigs from all over the world are meeting for a convention! Every minute, a triple of 3 new pigs arrives on the convention floor. After the $$$n$$$-th minute, the convention ends.The big bad wolf has learned about this convention, and he has an attack plan. At some minute in the convention, he will arrive and eat exactly $$$x$$$ pigs. Then he will get away.The wolf wants Gregor to help him figure out the number of possible attack plans that involve eating exactly $$$x$$$ pigs for various values of $$$x$$$ ($$$1 \\le x \\le 3n$$$). Two attack plans are considered different, if they occur at different times or if the sets of little pigs to eat are different.Note that all queries are independent, that is, the wolf does not eat the little pigs, he only makes plans!",
    "input_details": "The first line of input contains two integers $$$n$$$ and $$$q$$$ ($$$1 \\le n \\le 10^6$$$, $$$1 \\le q \\le 2\\cdot 10^5$$$), the number of minutes the convention lasts and the number of queries the wolf asks.Each of the next $$$q$$$ lines contains a single integer $$$x_i$$$ ($$$1 \\le x_i \\le 3n$$$), the number of pigs the wolf will eat in the $$$i$$$-th query.",
    "output_details": "You should print $$$q$$$ lines, with line $$$i$$$ representing the number of attack plans if the wolf wants to eat $$$x_i$$$ pigs. Since each query answer can be large, output each answer modulo $$$10^9+7$$$.",
    "sample_input": "2 3\n1\n5\n6",
    "sample_output": "9\n6\n1",
    "tags": ["combinatorics", "dp", "fft", "math", "*2500"]
  },
  {
    "name": "Integers Have Friends",
    "question_id": "integers-have-friends",
    "question": "British mathematician John Littlewood once said about Indian mathematician Srinivasa Ramanujan that \"every positive integer was one of his personal friends.\"It turns out that positive integers can also be friends with each other! You are given an array $$$a$$$ of distinct positive integers. Define a subarray $$$a_i, a_{i+1}, \\ldots, a_j$$$ to be a friend group if and only if there exists an integer $$$m \\ge 2$$$ such that $$$a_i \\bmod m = a_{i+1} \\bmod m = \\ldots = a_j \\bmod m$$$, where $$$x \\bmod y$$$ denotes the remainder when $$$x$$$ is divided by $$$y$$$.Your friend Gregor wants to know the size of the largest friend group in $$$a$$$.",
    "input_details": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 2\\cdot 10^4$$$). Each test case begins with a line containing the integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$), the size of the array $$$a$$$.The next line contains $$$n$$$ positive integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le {10}^{18}$$$), representing the contents of the array $$$a$$$. It is guaranteed that all the numbers in $$$a$$$ are distinct.It is guaranteed that the sum of $$$n$$$ over all test cases is less than $$$2\\cdot 10^5$$$.",
    "output_details": "Your output should consist of $$$t$$$ lines. Each line should consist of a single integer, the size of the largest friend group in $$$a$$$.",
    "sample_input": "4\n5\n1 5 2 4 6\n4\n8 2 5 10\n2\n1000 2000\n8\n465 55 3 54 234 12 45 78",
    "sample_output": "3\n3\n2\n6",
    "tags": [
      "binary search",
      "data structures",
      "divide and conquer",
      "math",
      "number theory",
      "two pointers",
      "*1800"
    ]
  },
  {
    "name": "Web of Lies",
    "question_id": "web-of-lies",
    "question": "When you play the game of thrones, you win, or you die. There is no middle ground.Cersei Lannister, A Game of Thrones by George R. R. MartinThere are $$$n$$$ nobles, numbered from $$$1$$$ to $$$n$$$. Noble $$$i$$$ has a power of $$$i$$$. There are also $$$m$$$ \"friendships\". A friendship between nobles $$$a$$$ and $$$b$$$ is always mutual.A noble is defined to be vulnerable if both of the following conditions are satisfied:   the noble has at least one friend, and  all of that noble's friends have a higher power. You will have to process the following three types of queries.   Add a friendship between nobles $$$u$$$ and $$$v$$$.  Remove a friendship between nobles $$$u$$$ and $$$v$$$.  Calculate the answer to the following process. The process: all vulnerable nobles are simultaneously killed, and all their friendships end. Then, it is possible that new nobles become vulnerable. The process repeats itself until no nobles are vulnerable. It can be proven that the process will end in finite time. After the process is complete, you need to calculate the number of remaining nobles.Note that the results of the process are not carried over between queries, that is, every process starts with all nobles being alive!",
    "input_details": "you play the game of thrones, you win, or you die. There is no middle ground.Cersei Lannister, A Game of Thrones by George R. R. Martin",
    "output_details": " Lannister, A Game of Thrones by George R. R. Martin",
    "sample_input": "lesInput4 3\n2 1\n1 3\n3 4\n4\n3\n1 2 3\n2 3 1\n3\nOutput2\n1\nInput4 3\n2 3\n3 4\n4 1\n1\n3\nOutput1",
    "sample_output": "3\n2 1\n1 3\n3 4\n4\n3\n1 2 3\n2 3 1\n3\nOutput2\n1\nInput4 3\n2 3\n3 4\n4 1\n1\n3\nOutput1",
    "tags": ["brute force", "graphs", "greedy", "*1400"]
  },
  {
    "name": "How Many Paths?",
    "question_id": "how-many-paths",
    "question": "You are given a directed graph $$$G$$$ which can contain loops (edges from a vertex to itself). Multi-edges are absent in $$$G$$$ which means that for all ordered pairs $$$(u, v)$$$ exists at most one edge from $$$u$$$ to $$$v$$$. Vertices are numbered from $$$1$$$ to $$$n$$$.A path from $$$u$$$ to $$$v$$$ is a sequence of edges such that:  vertex $$$u$$$ is the start of the first edge in the path;  vertex $$$v$$$ is the end of the last edge in the path;  for all pairs of adjacent edges next edge starts at the vertex that the previous edge ends on. We will assume that the empty sequence of edges is a path from $$$u$$$ to $$$u$$$.For each vertex $$$v$$$ output one of four values:  $$$0$$$, if there are no paths from $$$1$$$ to $$$v$$$;  $$$1$$$, if there is only one path from $$$1$$$ to $$$v$$$;  $$$2$$$, if there is more than one path from $$$1$$$ to $$$v$$$ and the number of paths is finite;  $$$-1$$$, if the number of paths from $$$1$$$ to $$$v$$$ is infinite. Let's look at the example shown in the figure.  Then:  the answer for vertex $$$1$$$ is $$$1$$$: there is only one path from $$$1$$$ to $$$1$$$ (path with length $$$0$$$);  the answer for vertex $$$2$$$ is $$$0$$$: there are no paths from $$$1$$$ to $$$2$$$;  the answer for vertex $$$3$$$ is $$$1$$$: there is only one path from $$$1$$$ to $$$3$$$ (it is the edge $$$(1, 3)$$$);  the answer for vertex $$$4$$$ is $$$2$$$: there are more than one paths from $$$1$$$ to $$$4$$$ and the number of paths are finite (two paths: $$$[(1, 3), (3, 4)]$$$ and $$$[(1, 4)]$$$);  the answer for vertex $$$5$$$ is $$$-1$$$: the number of paths from $$$1$$$ to $$$5$$$ is infinite (the loop can be used in a path many times);  the answer for vertex $$$6$$$ is $$$-1$$$: the number of paths from $$$1$$$ to $$$6$$$ is infinite (the loop can be used in a path many times). ",
    "input_details": "The first contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases in the input. Then $$$t$$$ test cases follow. Before each test case, there is an empty line.The first line of the test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\le 4 \\cdot 10^5, 0 \\le m \\le 4 \\cdot 10^5$$$) — numbers of vertices and edges in graph respectively. The next $$$m$$$ lines contain edges descriptions. Each line contains two integers $$$a_i$$$, $$$b_i$$$ ($$$1 \\le a_i, b_i \\le n$$$) — the start and the end of the $$$i$$$-th edge. The vertices of the graph are numbered from $$$1$$$ to $$$n$$$. The given graph can contain loops (it is possible that $$$a_i = b_i$$$), but cannot contain multi-edges (it is not possible that $$$a_i = a_j$$$ and $$$b_i = b_j$$$ for $$$i \\ne j$$$).The sum of $$$n$$$ over all test cases does not exceed $$$4 \\cdot 10^5$$$. Similarly, the sum of $$$m$$$ over all test cases does not exceed $$$4 \\cdot 10^5$$$.",
    "output_details": "Output $$$t$$$ lines. The $$$i$$$-th line should contain an answer for the $$$i$$$-th test case: a sequence of $$$n$$$ integers from $$$-1$$$ to $$$2$$$.",
    "sample_input": "5\n\n6 7\n1 4\n1 3\n3 4\n4 5\n2 1\n5 5\n5 6\n\n1 0\n\n3 3\n1 2\n2 3\n3 1\n\n5 0\n\n4 4\n1 2\n2 3\n1 4\n4 3",
    "sample_output": "1 0 1 2 -1 -1 \n1 \n-1 -1 -1 \n1 0 0 0 0 \n1 1 2 1",
    "tags": ["dfs and similar", "dp", "graphs", "trees", "*2100"]
  },
  {
    "name": "Array Stabilization (GCD version)",
    "question_id": "array-stabilization-gcd-version",
    "question": "You are given an array of positive integers $$$a = [a_0, a_1, \\dots, a_{n - 1}]$$$ ($$$n \\ge 2$$$).In one step, the array $$$a$$$ is replaced with another array of length $$$n$$$, in which each element is the greatest common divisor (GCD) of two neighboring elements (the element itself and its right neighbor; consider that the right neighbor of the $$$(n - 1)$$$-th element is the $$$0$$$-th element).Formally speaking, a new array $$$b = [b_0, b_1, \\dots, b_{n - 1}]$$$ is being built from array $$$a = [a_0, a_1, \\dots, a_{n - 1}]$$$ such that $$$b_i$$$ $$$= \\gcd(a_i, a_{(i + 1) \\mod n})$$$, where $$$\\gcd(x, y)$$$ is the greatest common divisor of $$$x$$$ and $$$y$$$, and $$$x \\mod y$$$ is the remainder of $$$x$$$ dividing by $$$y$$$. In one step the array $$$b$$$ is built and then the array $$$a$$$ is replaced with $$$b$$$ (that is, the assignment $$$a$$$ := $$$b$$$ is taking place).For example, if $$$a = [16, 24, 10, 5]$$$ then $$$b = [\\gcd(16, 24)$$$, $$$\\gcd(24, 10)$$$, $$$\\gcd(10, 5)$$$, $$$\\gcd(5, 16)]$$$ $$$= [8, 2, 5, 1]$$$. Thus, after one step the array $$$a = [16, 24, 10, 5]$$$ will be equal to $$$[8, 2, 5, 1]$$$.For a given array $$$a$$$, find the minimum number of steps after which all values $$$a_i$$$ become equal (that is, $$$a_0 = a_1 = \\dots = a_{n - 1}$$$). If the original array $$$a$$$ consists of identical elements then consider the number of steps is equal to $$$0$$$.",
    "input_details": "The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$). Then $$$t$$$ test cases follow.Each test case contains two lines. The first line contains an integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$) — length of the sequence $$$a$$$. The second line contains $$$n$$$ integers $$$a_0, a_1, \\dots, a_{n - 1}$$$ ($$$1 \\le a_i \\le 10^6$$$).It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$.",
    "output_details": "Print $$$t$$$ numbers — answers for each test case.",
    "sample_input": "5\n4\n16 24 10 5\n4\n42 42 42 42\n3\n4 6 4\n5\n1 2 3 4 5\n6\n9 9 27 9 9 63",
    "sample_output": "3\n0\n2\n1\n1",
    "tags": [
      "binary search",
      "brute force",
      "data structures",
      "divide and conquer",
      "number theory",
      "two pointers",
      "*1900"
    ]
  },
  {
    "name": "Air Conditioners",
    "question_id": "air-conditioners",
    "question": "On a strip of land of length $$$n$$$ there are $$$k$$$ air conditioners: the $$$i$$$-th air conditioner is placed in cell $$$a_i$$$ ($$$1 \\le a_i \\le n$$$). Two or more air conditioners cannot be placed in the same cell (i.e. all $$$a_i$$$ are distinct).Each air conditioner is characterized by one parameter: temperature. The $$$i$$$-th air conditioner is set to the temperature $$$t_i$$$.    Example of strip of length $$$n=6$$$, where $$$k=2$$$, $$$a=[2,5]$$$ and $$$t=[14,16]$$$. For each cell $$$i$$$ ($$$1 \\le i \\le n$$$) find it's temperature, that can be calculated by the formula $$$$$$\\min_{1 \\le j \\le k}(t_j + |a_j - i|),$$$$$$where $$$|a_j - i|$$$ denotes absolute value of the difference $$$a_j - i$$$.In other words, the temperature in cell $$$i$$$ is equal to the minimum among the temperatures of air conditioners, increased by the distance from it to the cell $$$i$$$.Let's look at an example. Consider that $$$n=6, k=2$$$, the first air conditioner is placed in cell $$$a_1=2$$$ and is set to the temperature $$$t_1=14$$$ and the second air conditioner is placed in cell $$$a_2=5$$$ and is set to the temperature $$$t_2=16$$$. In that case temperatures in cells are:  temperature in cell $$$1$$$ is: $$$\\min(14 + |2 - 1|, 16 + |5 - 1|)=\\min(14 + 1, 16 + 4)=\\min(15, 20)=15$$$;  temperature in cell $$$2$$$ is: $$$\\min(14 + |2 - 2|, 16 + |5 - 2|)=\\min(14 + 0, 16 + 3)=\\min(14, 19)=14$$$;  temperature in cell $$$3$$$ is: $$$\\min(14 + |2 - 3|, 16 + |5 - 3|)=\\min(14 + 1, 16 + 2)=\\min(15, 18)=15$$$;  temperature in cell $$$4$$$ is: $$$\\min(14 + |2 - 4|, 16 + |5 - 4|)=\\min(14 + 2, 16 + 1)=\\min(16, 17)=16$$$;  temperature in cell $$$5$$$ is: $$$\\min(14 + |2 - 5|, 16 + |5 - 5|)=\\min(14 + 3, 16 + 0)=\\min(17, 16)=16$$$;  temperature in cell $$$6$$$ is: $$$\\min(14 + |2 - 6|, 16 + |5 - 6|)=\\min(14 + 4, 16 + 1)=\\min(18, 17)=17$$$. For each cell from $$$1$$$ to $$$n$$$ find the temperature in it.",
    "input_details": "The first line contains one integer $$$q$$$ ($$$1 \\le q \\le 10^4$$$) — the number of test cases in the input. Then test cases follow. Before each test case, there is an empty line.Each test case contains three lines. The first line contains two integers $$$n$$$ ($$$1 \\le n \\le 3 \\cdot 10^5$$$) and $$$k$$$ ($$$1 \\le k \\le n$$$) — the length of the strip of land and the number of air conditioners respectively.The second line contains $$$k$$$ integers $$$a_1, a_2, \\ldots, a_k$$$ ($$$1 \\le a_i \\le n$$$) — positions of air conditioners on the strip of land.The third line contains $$$k$$$ integers $$$t_1, t_2, \\ldots, t_k$$$ ($$$1 \\le t_i \\le 10^9$$$) — temperatures of air conditioners.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3 \\cdot 10^5$$$.",
    "output_details": "For each test case output $$$n$$$ integers separated by space: temperatures of air in cells.",
    "sample_input": "5\n\n6 2\n2 5\n14 16\n\n10 1\n7\n30\n\n5 5\n3 1 4 2 5\n3 1 4 2 5\n\n7 1\n1\n1000000000\n\n6 3\n6 1 3\n5 5 5",
    "sample_output": "15 14 15 16 16 17 \n36 35 34 33 32 31 30 31 32 33 \n1 2 3 4 5 \n1000000000 1000000001 1000000002 1000000003 1000000004 1000000005 1000000006 \n5 6 5 6 6 5",
    "tags": [
      "data structures",
      "dp",
      "implementation",
      "shortest paths",
      "sortings",
      "two pointers",
      "*1500"
    ]
  },
  {
    "name": "Co-growing Sequence",
    "question_id": "co-growing-sequence",
    "question": "A sequence of non-negative integers $$$a_1, a_2, \\dots, a_n$$$ is called growing if for all $$$i$$$ from $$$1$$$ to $$$n - 1$$$ all ones (of binary representation) in $$$a_i$$$ are in the places of ones (of binary representation) in $$$a_{i + 1}$$$ (in other words, $$$a_i \\:\\&\\: a_{i + 1} = a_i$$$, where $$$\\&$$$ denotes bitwise AND). If $$$n = 1$$$ then the sequence is considered growing as well.For example, the following four sequences are growing:   $$$[2, 3, 15, 175]$$$ — in binary it's $$$[10_2, 11_2, 1111_2, 10101111_2]$$$;  $$$[5]$$$ — in binary it's $$$[101_2]$$$;  $$$[1, 3, 7, 15]$$$ — in binary it's $$$[1_2, 11_2, 111_2, 1111_2]$$$;  $$$[0, 0, 0]$$$ — in binary it's $$$[0_2, 0_2, 0_2]$$$. The following three sequences are non-growing:   $$$[3, 4, 5]$$$ — in binary it's $$$[11_2, 100_2, 101_2]$$$;  $$$[5, 4, 3]$$$ — in binary it's $$$[101_2, 100_2, 011_2]$$$;  $$$[1, 2, 4, 8]$$$ — in binary it's $$$[0001_2, 0010_2, 0100_2, 1000_2]$$$. Consider two sequences of non-negative integers $$$x_1, x_2, \\dots, x_n$$$ and $$$y_1, y_2, \\dots, y_n$$$. Let's call this pair of sequences co-growing if the sequence $$$x_1 \\oplus y_1, x_2 \\oplus y_2, \\dots, x_n \\oplus y_n$$$ is growing where $$$\\oplus$$$ denotes bitwise XOR.You are given a sequence of integers $$$x_1, x_2, \\dots, x_n$$$. Find the lexicographically minimal sequence $$$y_1, y_2, \\dots, y_n$$$ such that sequences $$$x_i$$$ and $$$y_i$$$ are co-growing.The sequence $$$a_1, a_2, \\dots, a_n$$$ is lexicographically smaller than the sequence $$$b_1, b_2, \\dots, b_n$$$ if there exists $$$1 \\le k \\le n$$$ such that $$$a_i = b_i$$$ for any $$$1 \\le i < k$$$ but $$$a_k < b_k$$$.",
    "input_details": "The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$). Then $$$t$$$ test cases follow.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — length of the sequence $$$x_i$$$.The second line contains $$$n$$$ integers $$$x_1, x_2, \\dots, x_n$$$ ($$$0 \\le x_i < 2^{30}$$$) — elements of the sequence $$$x_i$$$.It is guaranteed that the sum of $$$n$$$ overall all test cases doesn't exceed $$$2 \\cdot 10^5$$$.",
    "output_details": "For each test case, print $$$n$$$ integers $$$y_1, y_2, \\dots, y_n$$$ ($$$0 \\le y_i < 2^{30}$$$) — lexicographically minimal sequence such that such that it's co-growing with given sequence $$$x_i$$$.",
    "sample_input": "5\n4\n1 3 7 15\n4\n1 2 4 8\n5\n1 2 3 4 5\n4\n11 13 15 1\n1\n0",
    "sample_output": "0 0 0 0 \n0 1 3 7 \n0 1 0 3 2 \n0 2 0 14 \n0",
    "tags": ["bitmasks", "constructive algorithms", "greedy", "*1300"]
  },
  {
    "name": "Pair Programming",
    "question_id": "pair-programming",
    "question": "Monocarp and Polycarp are learning new programming techniques. Now they decided to try pair programming.It's known that they have worked together on the same file for $$$n + m$$$ minutes. Every minute exactly one of them made one change to the file. Before they started, there were already $$$k$$$ lines written in the file.Every minute exactly one of them does one of two actions: adds a new line to the end of the file or changes one of its lines.Monocarp worked in total for $$$n$$$ minutes and performed the sequence of actions $$$[a_1, a_2, \\dots, a_n]$$$. If $$$a_i = 0$$$, then he adds a new line to the end of the file. If $$$a_i > 0$$$, then he changes the line with the number $$$a_i$$$. Monocarp performed actions strictly in this order: $$$a_1$$$, then $$$a_2$$$, ..., $$$a_n$$$.Polycarp worked in total for $$$m$$$ minutes and performed the sequence of actions $$$[b_1, b_2, \\dots, b_m]$$$. If $$$b_j = 0$$$, then he adds a new line to the end of the file. If $$$b_j > 0$$$, then he changes the line with the number $$$b_j$$$. Polycarp performed actions strictly in this order: $$$b_1$$$, then $$$b_2$$$, ..., $$$b_m$$$.Restore their common sequence of actions of length $$$n + m$$$ such that all actions would be correct — there should be no changes to lines that do not yet exist. Keep in mind that in the common sequence Monocarp's actions should form the subsequence $$$[a_1, a_2, \\dots, a_n]$$$ and Polycarp's — subsequence $$$[b_1, b_2, \\dots, b_m]$$$. They can replace each other at the computer any number of times.Let's look at an example. Suppose $$$k = 3$$$. Monocarp first changed the line with the number $$$2$$$ and then added a new line (thus, $$$n = 2, \\: a = [2, 0]$$$). Polycarp first added a new line and then changed the line with the number $$$5$$$ (thus, $$$m = 2, \\: b = [0, 5]$$$).Since the initial length of the file was $$$3$$$, in order for Polycarp to change line number $$$5$$$ two new lines must be added beforehand. Examples of correct sequences of changes, in this case, would be $$$[0, 2, 0, 5]$$$ and $$$[2, 0, 0, 5]$$$. Changes $$$[0, 0, 5, 2]$$$ (wrong order of actions) and $$$[0, 5, 2, 0]$$$ (line $$$5$$$ cannot be edited yet) are not correct.",
    "input_details": "The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 1000$$$). Then $$$t$$$ test cases follow. Before each test case, there is an empty line.Each test case contains three lines. The first line contains three integers $$$k$$$, $$$n$$$, $$$m$$$ ($$$0 \\le k \\le 100$$$, $$$1 \\le n, m \\le 100$$$) — the initial number of lines in file and lengths of Monocarp's and Polycarp's sequences of changes respectively.The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\le a_i \\le 300$$$).The third line contains $$$m$$$ integers $$$b_1, b_2, \\dots, b_m$$$ ($$$0 \\le b_j \\le 300$$$).",
    "output_details": "For each test case print any correct common sequence of Monocarp's and Polycarp's actions of length $$$n + m$$$ or -1 if such sequence doesn't exist.",
    "sample_input": "5\n\n3 2 2\n2 0\n0 5\n\n4 3 2\n2 0 5\n0 6\n\n0 2 2\n1 0\n2 3\n\n5 4 4\n6 0 8 0\n0 7 0 9\n\n5 4 1\n8 7 8 0\n0",
    "sample_output": "2 0 0 5 \n0 2 0 6 5 \n-1\n0 6 0 7 0 8 0 9\n-1",
    "tags": ["greedy", "two pointers", "*1100"]
  },
  {
    "name": "Alphabetical Strings",
    "question_id": "alphabetical-strings",
    "question": "A string $$$s$$$ of length $$$n$$$ ($$$1 \\le n \\le 26$$$) is called alphabetical if it can be obtained using the following algorithm:  first, write an empty string to $$$s$$$ (i.e. perform the assignment $$$s$$$ := \"\");  then perform the next step $$$n$$$ times;  at the $$$i$$$-th step take $$$i$$$-th lowercase letter of the Latin alphabet and write it either to the left of the string $$$s$$$ or to the right of the string $$$s$$$ (i.e. perform the assignment $$$s$$$ := $$$c+s$$$ or $$$s$$$ := $$$s+c$$$, where $$$c$$$ is the $$$i$$$-th letter of the Latin alphabet). In other words, iterate over the $$$n$$$ first letters of the Latin alphabet starting from 'a' and etc. Each time we prepend a letter to the left of the string $$$s$$$ or append a letter to the right of the string $$$s$$$. Strings that can be obtained in that way are alphabetical.For example, the following strings are alphabetical: \"a\", \"ba\", \"ab\", \"bac\" and \"ihfcbadeg\". The following strings are not alphabetical: \"z\", \"aa\", \"ca\", \"acb\", \"xyz\" and \"ddcba\".From the given string, determine if it is alphabetical.",
    "input_details": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. Then $$$t$$$ test cases follow.Each test case is written on a separate line that contains one string $$$s$$$. String $$$s$$$ consists of lowercase letters of the Latin alphabet and has a length between $$$1$$$ and $$$26$$$, inclusive.",
    "output_details": "Output $$$t$$$ lines, each of them must contain the answer to the corresponding test case. Output YES if the given string $$$s$$$ is alphabetical and NO otherwise.You can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive answer).",
    "sample_input": "11\na\nba\nab\nbac\nihfcbadeg\nz\naa\nca\nacb\nxyz\nddcba",
    "sample_output": "YES\nYES\nYES\nYES\nYES\nNO\nNO\nNO\nNO\nNO\nNO",
    "tags": ["greedy", "implementation", "strings", "*800"]
  },
  {
    "name": "Shortest Path with Obstacle",
    "question_id": "shortest-path-with-obstacle",
    "question": "There are three cells on an infinite 2-dimensional grid, labeled $$$A$$$, $$$B$$$, and $$$F$$$. Find the length of the shortest path from $$$A$$$ to $$$B$$$ if:   in one move you can go to any of the four adjacent cells sharing a side;  visiting the cell $$$F$$$ is forbidden (it is an obstacle). ",
    "input_details": "The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases in the input. Then $$$t$$$ test cases follow. Before each test case, there is an empty line.Each test case contains three lines. The first one contains two integers $$$x_A, y_A$$$ ($$$1 \\le x_A, y_A \\le 1000$$$) — coordinates of the start cell $$$A$$$. The second one contains two integers $$$x_B, y_B$$$ ($$$1 \\le x_B, y_B \\le 1000$$$) — coordinates of the finish cell $$$B$$$. The third one contains two integers $$$x_F, y_F$$$ ($$$1 \\le x_F, y_F \\le 1000$$$) — coordinates of the forbidden cell $$$F$$$. All cells are distinct.Coordinate $$$x$$$ corresponds to the column number and coordinate $$$y$$$ corresponds to the row number (see the pictures below).",
    "output_details": "Output $$$t$$$ lines. The $$$i$$$-th line should contain the answer for the $$$i$$$-th test case: the length of the shortest path from the cell $$$A$$$ to the cell $$$B$$$ if the cell $$$F$$$ is not allowed to be visited.",
    "sample_input": "7\n\n1 1\n3 3\n2 2\n\n2 5\n2 1\n2 3\n\n1000 42\n1000 1\n1000 1000\n\n1 10\n3 10\n2 10\n\n3 8\n7 8\n3 7\n\n2 1\n4 1\n1 1\n\n1 344\n1 10\n1 1",
    "sample_output": "4\n6\n41\n4\n4\n2\n334",
    "tags": ["implementation", "math", "*800"]
  },
  {
    "name": "AquaMoon and Stolen String",
    "question_id": "aqua-moon-and-stolen-string",
    "question": "AquaMoon had $$$n$$$ strings of length $$$m$$$ each. $$$n$$$ is an odd number.When AquaMoon was gone, Cirno tried to pair these $$$n$$$ strings together. After making $$$\\frac{n-1}{2}$$$ pairs, she found out that there was exactly one string without the pair!In her rage, she disrupted each pair of strings. For each pair, she selected some positions (at least $$$1$$$ and at most $$$m$$$) and swapped the letters in the two strings of this pair at the selected positions.For example, if $$$m = 6$$$ and two strings \"abcdef\" and \"xyzklm\" are in one pair and Cirno selected positions $$$2$$$, $$$3$$$ and $$$6$$$ she will swap 'b' with 'y', 'c' with 'z' and 'f' with 'm'. The resulting strings will be \"ayzdem\" and \"xbcklf\".Cirno then stole away the string without pair and shuffled all remaining strings in arbitrary order.AquaMoon found the remaining $$$n-1$$$ strings in complete disarray. Also, she remembers the initial $$$n$$$ strings. She wants to know which string was stolen, but she is not good at programming. Can you help her?",
    "input_details": "This problem is made as interactive. It means, that your solution will read the input, given by the interactor. But the interactor will give you the full input at the beginning and after that, you should print the answer. So you should solve the problem, like as you solve the usual, non-interactive problem because you won't have any interaction process. The only thing you should not forget is to flush the output buffer, after printing the answer. Otherwise, you can get an \"Idleness limit exceeded\" verdict. Refer to the interactive problems guide for the detailed information about flushing the output buffer.The input consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.The first line of each test case contains two integers $$$n$$$, $$$m$$$ ($$$1 \\leq n \\leq 10^5$$$, $$$1 \\leq m \\leq 10^5$$$) — the number of strings and the length of each string, respectively.The next $$$n$$$ lines each contain a string with length $$$m$$$, describing the original $$$n$$$ strings. All string consists of lowercase Latin letters.The next $$$n-1$$$ lines each contain a string with length $$$m$$$, describing the strings after Cirno exchanged and reordered them.It is guaranteed that $$$n$$$ is odd and that the sum of $$$n \\cdot m$$$ over all test cases does not exceed $$$10^5$$$.Hack format:The first line should contain a single integer $$$t$$$. After that $$$t$$$ test cases should follow in the following format:The first line should contain two integers $$$n$$$ and $$$m$$$.The following $$$n$$$ lines should contain $$$n$$$ strings of length $$$m$$$, describing the original strings.The following $$$\\frac{n-1}{2}$$$ lines should describe the pairs. They should contain, in the following order: the index of the first string $$$i$$$ ($$$1 \\leq i \\leq n$$$), the index of the second string $$$j$$$ ($$$1 \\leq j \\leq n$$$, $$$i \\neq j$$$), the number of exchanged positions $$$k$$$ ($$$1 \\leq k \\leq m$$$), and the list of $$$k$$$ positions that are exchanged ($$$k$$$ distinct indices from $$$1$$$ to $$$m$$$ in any order).The final line should contain a permutation of integers from $$$1$$$ to $$$n$$$, describing the way the strings should be reordered. The strings will be placed in the order indices placed in this permutation, the stolen string index will be ignored.",
    "output_details": "For each test case print a single line with the stolen string.",
    "sample_input": "3\n3 5\naaaaa\nbbbbb\nccccc\naaaaa\nbbbbb\n3 4\naaaa\nbbbb\ncccc\naabb\nbbaa\n5 6\nabcdef\nuuuuuu\nkekeke\nekekek\nxyzklm\nxbcklf\neueueu\nayzdem\nukukuk",
    "sample_output": "ccccc\ncccc\nkekeke",
    "tags": ["interactive", "math", "*1200"]
  },
  {
    "name": "AquaMoon and Two Arrays",
    "question_id": "aqua-moon-and-two-arrays",
    "question": "AquaMoon and Cirno are playing an interesting game with arrays. Cirno has prepared two arrays $$$a$$$ and $$$b$$$, both consist of $$$n$$$ non-negative integers. AquaMoon can perform the following operation an arbitrary number of times (possibly zero):  She chooses two indices $$$i$$$ and $$$j$$$ ($$$1 \\le i, j \\le n$$$), then decreases the $$$i$$$-th element of array $$$a$$$ by $$$1$$$, and increases the $$$j$$$-th element of array $$$a$$$ by $$$1$$$. The resulting values at $$$i$$$-th and $$$j$$$-th index of array $$$a$$$ are $$$a_i - 1$$$ and $$$a_j + 1$$$, respectively. Each element of array $$$a$$$ must be non-negative after each operation. If $$$i = j$$$ this operation doesn't change the array $$$a$$$. AquaMoon wants to make some operations to make arrays $$$a$$$ and $$$b$$$ equal. Two arrays $$$a$$$ and $$$b$$$ are considered equal if and only if $$$a_i = b_i$$$ for all $$$1 \\leq i \\leq n$$$.Help AquaMoon to find a sequence of operations that will solve her problem or find, that it is impossible to make arrays $$$a$$$ and $$$b$$$ equal.Please note, that you don't have to minimize the number of operations.",
    "input_details": "The input consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$).The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\leq a_i \\leq 100$$$). The sum of all $$$a_i$$$ does not exceed $$$100$$$.The third line of each test case contains $$$n$$$ integers $$$b_1, b_2, \\dots, b_n$$$ ($$$0 \\leq b_i \\leq 100$$$). The sum of all $$$b_i$$$ does not exceed $$$100$$$.",
    "output_details": "For each test case print \"-1\" on the only line if it is impossible to make two arrays equal with some sequence of operations.Otherwise, print an integer $$$m$$$ ($$$0 \\leq m \\leq 100$$$) in the first line — the number of operations. Then print $$$m$$$ lines, each line consists of two integers $$$i$$$ and $$$j$$$ — the indices you choose for the operation.It can be proven that if it is possible to make two arrays equal with some sequence of operations, there exists a sequence with $$$m \\leq 100$$$.If there are multiple possible solutions, you can print any.",
    "sample_input": "4\n4\n1 2 3 4\n3 1 2 4\n2\n1 3\n2 1\n1\n0\n0\n5\n4 3 2 1 0\n0 1 2 3 4",
    "sample_output": "2\n2 1\n3 1\n-1\n0\n6\n1 4\n1 4\n1 5\n1 5\n2 5\n2 5",
    "tags": ["brute force", "greedy", "*800"]
  },
  {
    "name": "AquaMoon and Potatoes",
    "question_id": "aqua-moon-and-potatoes",
    "question": "AquaMoon has three integer arrays $$$a$$$, $$$b$$$, $$$c$$$ of length $$$n$$$, where $$$1 \\leq a_i, b_i, c_i \\leq n$$$ for all $$$i$$$.In order to accelerate her potato farming, she organizes her farm in a manner based on these three arrays. She is now going to complete $$$m$$$ operations to count how many potatoes she can get. Each operation will have one of the two types:  AquaMoon reorganizes their farm and makes the $$$k$$$-th element of the array $$$a$$$ equal to $$$x$$$. In other words, perform the assignment $$$a_k := x$$$.  Given a positive integer $$$r$$$, AquaMoon receives a potato for each triplet $$$(i,j,k)$$$, such that $$$1\\le i<j<k\\le r$$$, and $$$b_{a_i}=a_j=c_{a_k}$$$. Count the number of such triplets. As AquaMoon is busy finding the library, help her complete all of their operations.",
    "input_details": "The first line contains two integers $$$n$$$, $$$m$$$ ($$$1\\le n\\le 2\\cdot10^5$$$, $$$1\\le m\\le 5\\cdot10^4$$$).The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots,a_n$$$ ($$$1\\le a_i\\le n$$$).The third line contains $$$n$$$ integers $$$b_1, b_2, \\dots,b_n$$$ ($$$1\\le b_i\\le n$$$).The fourth line contains $$$n$$$ integers $$$c_1, c_2, \\dots,c_n$$$ ($$$1\\le c_i\\le n$$$).The next $$$m$$$ lines describe operations, the $$$i$$$-th line describes the $$$i$$$-th operation in one of these two formats:  \"$$$1\\ k\\ x$$$\" ($$$1\\le k,x\\le n$$$), representing an operation of the first type.  \"$$$2\\ r$$$\" ($$$1\\le r\\le n$$$), representing an operation of the second type. It is guaranteed that there is at least one operation of the second type.",
    "output_details": "For each operation of the second type print the answer.",
    "sample_input": "5 4\n1 2 3 4 5\n2 3 4 5 1\n5 1 2 3 4\n2 5\n1 2 3\n2 4\n2 5",
    "sample_output": "3\n0\n2",
    "tags": ["brute force", "data structures", "dp", "*3500"]
  },
  {
    "name": " AquaMoon and Time Stop (hard version)",
    "question_id": "aqua-moon-and-time-stop-hard-version",
    "question": "Note that the differences between easy and hard versions are the constraints on $$$n$$$ and the time limit. You can make hacks only if both versions are solved.AquaMoon knew through foresight that some ghosts wanted to curse tourists on a pedestrian street. But unfortunately, this time, these ghosts were hiding in a barrier, and she couldn't enter this barrier in a short time and destroy them. Therefore, all that can be done is to save any unfortunate person on the street from the ghosts.The pedestrian street can be represented as a one-dimensional coordinate system. There is one person hanging out on the pedestrian street. At the time $$$0$$$ he is at coordinate $$$x$$$, moving with a speed of $$$1$$$ unit per second. In particular, at time $$$i$$$ the person will be at coordinate $$$x+i$$$.The ghosts are going to cast $$$n$$$ curses on the street. The $$$i$$$-th curse will last from time $$$tl_i-1+10^{-18}$$$ to time $$$tr_i+1-10^{-18}$$$ (exclusively) and will kill people with coordinates from $$$l_i-1+10^{-18}$$$ to $$$r_i+1-10^{-18}$$$ (exclusively). Formally that means, that the person, whose coordinate is between $$$(l_i-1+10^{-18},r_i+1-10^{-18})$$$ in the time range $$$(tl_i-1+10^{-18},tr_i+1-10^{-18})$$$ will die.To save the person on the street, AquaMoon can stop time at any moment $$$t$$$, and then move the person from his current coordinate $$$x$$$ to any coordinate $$$y$$$ ($$$t$$$, $$$x$$$ and $$$y$$$ are not necessarily integers). The movement costs AquaMoon $$$|x-y|$$$ energy. The movement is continuous, so if there exists some cursed area between points $$$x$$$ and $$$y$$$ at time $$$t$$$, the person will die too.AquaMoon wants to know what is the minimum amount of energy she needs to spend in order to save the person on the street from all $$$n$$$ curses. But she is not good at programming. As her friend, can you help her?",
    "input_details": "The first line contains a single integer $$$n$$$ ($$$1\\le n\\le 2 \\cdot 10^5$$$) — the number of curses.The next line contains a single integer $$$x$$$ ($$$1\\le x\\le 10^6$$$) — the initial coordinate of the person.The following $$$n$$$ lines contain four integers $$$tl_i$$$, $$$tr_i$$$, $$$l_i$$$, $$$r_i$$$ each ($$$1\\le tl_i\\le tr_i\\le 10^6$$$, $$$1\\le l_i\\le r_i\\le 10^6$$$).",
    "output_details": "Print a single integer — the minimum energy which AquaMoon needs to spent, rounded up to the nearest integer (in case there are two nearest integers you should round the answer to the highest of them).",
    "sample_input": "2\n1\n1 2 1 2\n2 3 2 3",
    "sample_output": "2",
    "tags": ["data structures", "dp", "*3500"]
  },
  {
    "name": " AquaMoon and Time Stop (easy version)",
    "question_id": "aqua-moon-and-time-stop-easy-version",
    "question": "Note that the differences between easy and hard versions are the constraints on $$$n$$$ and the time limit. You can make hacks only if both versions are solved.AquaMoon knew through foresight that some ghosts wanted to curse tourists on a pedestrian street. But unfortunately, this time, these ghosts were hiding in a barrier, and she couldn't enter this barrier in a short time and destroy them. Therefore, all that can be done is to save any unfortunate person on the street from the ghosts.The pedestrian street can be represented as a one-dimensional coordinate system. There is one person hanging out on the pedestrian street. At the time $$$0$$$ he is at coordinate $$$x$$$, moving with a speed of $$$1$$$ unit per second. In particular, at time $$$i$$$ the person will be at coordinate $$$x+i$$$.The ghosts are going to cast $$$n$$$ curses on the street. The $$$i$$$-th curse will last from time $$$tl_i-1+10^{-18}$$$ to time $$$tr_i+1-10^{-18}$$$ (exclusively) and will kill people with coordinates from $$$l_i-1+10^{-18}$$$ to $$$r_i+1-10^{-18}$$$ (exclusively). Formally that means, that the person, whose coordinate is between $$$(l_i-1+10^{-18},r_i+1-10^{-18})$$$ in the time range $$$(tl_i-1+10^{-18},tr_i+1-10^{-18})$$$ will die.To save the person on the street, AquaMoon can stop time at any moment $$$t$$$, and then move the person from his current coordinate $$$x$$$ to any coordinate $$$y$$$ ($$$t$$$, $$$x$$$ and $$$y$$$ are not necessarily integers). The movement costs AquaMoon $$$|x-y|$$$ energy. The movement is continuous, so if there exists some cursed area between points $$$x$$$ and $$$y$$$ at time $$$t$$$, the person will die too.AquaMoon wants to know what is the minimum amount of energy she needs to spend in order to save the person on the street from all $$$n$$$ curses. But she is not good at programming. As her friend, can you help her?",
    "input_details": "The first line contains a single integer $$$n$$$ ($$$1\\le n\\le 2000$$$) — the number of curses.The next line contains a single integer $$$x$$$ ($$$1\\le x\\le 10^6$$$) — the initial coordinate of the person.The following $$$n$$$ lines contain four integers $$$tl_i$$$, $$$tr_i$$$, $$$l_i$$$, $$$r_i$$$ each ($$$1\\le tl_i\\le tr_i\\le 10^6$$$, $$$1\\le l_i\\le r_i\\le 10^6$$$).",
    "output_details": "Print a single integer — the minimum energy which AquaMoon needs to spent, rounded up to the nearest integer (in case there are two nearest integers you should round the answer to the highest of them).",
    "sample_input": "2\n1\n1 2 1 2\n2 3 2 3",
    "sample_output": "2",
    "tags": ["data structures", "dp", "*3500"]
  },
  {
    "name": "AquaMoon and Wrong Coordinate",
    "question_id": "aqua-moon-and-wrong-coordinate",
    "question": "Cirno gives AquaMoon a problem. There are $$$m$$$ people numbered from $$$0$$$ to $$$m - 1$$$. They are standing on a coordinate axis in points with positive integer coordinates. They are facing right (i.e. in the direction of the coordinate increase). At this moment everyone will start running with the constant speed in the direction of coordinate increasing. The initial coordinate of the $$$i$$$-th person on the line is $$$x_i$$$, and the speed of the $$$i$$$-th person is $$$v_i$$$. So the coordinate of the $$$i$$$-th person at the moment $$$t$$$ will be $$$x_i + t \\cdot v_i$$$.Cirno captured the coordinates of $$$m$$$ people in $$$k$$$ consecutive integer moments from $$$0$$$ to $$$k - 1$$$. In every moment, the coordinates of $$$m$$$ people were recorded in arbitrary order.To make the problem more funny, Cirno modified one coordinate at the moment $$$y$$$ ($$$0 < y < k-1$$$) to a different integer.AquaMoon wants to find the moment $$$y$$$ and the original coordinate $$$p$$$ before the modification. Actually, she is not a programmer at all. So she wasn't able to solve it. Can you help her?",
    "input_details": "This problem is made as interactive. It means, that your solution will read the input, given by the interactor. But the interactor will give you the full input at the beginning and after that, you should print the answer. So you should solve the problem, like as you solve the usual, non-interactive problem because you won't have any interaction process. The only thing you should not forget is to flush the output buffer, after printing the answer. Otherwise, you can get an \"Idleness limit exceeded\" verdict. Refer to the interactive problems guide for the detailed information about flushing the output buffer.The first line contains two integers $$$m$$$ and $$$k$$$ ($$$5 \\leq m \\leq 1000$$$, $$$7 \\leq k \\leq 1000$$$) — the number of people and the number of recorded moments. The next $$$k$$$ lines contain captured positions. $$$i$$$-th of these lines contains $$$m$$$ integers between $$$1$$$ and $$$10^6$$$ (inclusive), representing positions captured by Cirno at the moment $$$i-1$$$.The input is guaranteed to be valid (i.e. only one integer was modified to a different value according to the problem statement). Also, it is guaranteed, that $$$1 \\le v_i \\le 1000$$$ for all $$$1 \\leq i \\leq m$$$.Hack format:The first line should contain two integers $$$m$$$ and $$$k$$$ ($$$5 \\leq m \\leq 1000$$$, $$$7 \\leq k \\leq 1000$$$) — the number of people and the number of moments. In the second line, there should be $$$m$$$ integers $$$x_0, x_1, \\dots,x_{m - 1}$$$ ($$$1 \\le x_i \\le 10^6$$$), where $$$x_i$$$ is the initial coordinate of the $$$i$$$-th person.In the third line, there should be $$$m$$$ integers $$$v_0, v_1, \\dots,v_{m - 1}$$$ ($$$1 \\le v_i \\le 1000$$$), where $$$v_i$$$ is the speed of the $$$i$$$-th person. It should be true that $$$x_i + (k-1) v_i \\leq 10^6$$$ for each $$$0 \\leq i < m$$$.In the next $$$k$$$ lines, each line should contain $$$m$$$ integers. $$$i$$$-th line should contain $$$m$$$ distinct integers $$$p_0, p_1, \\ldots, p_{m-1}$$$ ($$$0 \\leq p_j < m$$$). The meaning of these numbers: $$$j$$$-th integer in the input in the $$$i$$$-th moment is the coordinate of the $$$p_{j}$$$-th person.In the last line, there should be three integers $$$y$$$, $$$i$$$, $$$c$$$. Cirno modified the coordinate of the $$$i$$$-th person at the moment $$$y$$$ to $$$c$$$ ($$$1 \\leq y \\leq k-2$$$, $$$0 \\leq i \\leq m - 1$$$, $$$1 \\leq c \\leq 10^6$$$, $$$c \\neq x_i + y \\cdot v_i$$$).",
    "output_details": "Print a single line with two integers $$$y$$$, $$$p$$$ — the moment that contains the modified coordinate and the original coordinate.",
    "sample_input": "5 7\n6 9 9 6 9\n10 7 10 8 10\n11 11 11 10 8\n12 12 12 12 9\n14 13 12 10 13\n11 14 16 14 14\n12 15 18 15 15",
    "sample_output": "4 13",
    "tags": ["constructive algorithms", "interactive", "math", "*3000"]
  },
  {
    "name": "AquaMoon and Permutations",
    "question_id": "aqua-moon-and-permutations",
    "question": "Cirno has prepared $$$n$$$ arrays of length $$$n$$$ each. Each array is a permutation of $$$n$$$ integers from $$$1$$$ to $$$n$$$. These arrays are special: for all $$$1 \\leq i \\leq n$$$, if we take the $$$i$$$-th element of each array and form another array of length $$$n$$$ with these elements, the resultant array is also a permutation of $$$n$$$ integers from $$$1$$$ to $$$n$$$. In the other words, if you put these $$$n$$$ arrays under each other to form a matrix with $$$n$$$ rows and $$$n$$$ columns, this matrix is a Latin square.Afterwards, Cirno added additional $$$n$$$ arrays, each array is a permutation of $$$n$$$ integers from $$$1$$$ to $$$n$$$. For all $$$1 \\leq i \\leq n$$$, there exists at least one position $$$1 \\leq k \\leq n$$$, such that for the $$$i$$$-th array and the $$$(n + i)$$$-th array, the $$$k$$$-th element of both arrays is the same. Notice that the arrays indexed from $$$n + 1$$$ to $$$2n$$$ don't have to form a Latin square. Also, Cirno made sure that for all $$$2n$$$ arrays, no two arrays are completely equal, i. e. for all pair of indices $$$1 \\leq i < j \\leq 2n$$$, there exists at least one position $$$1 \\leq k \\leq n$$$, such that the $$$k$$$-th elements of the $$$i$$$-th and $$$j$$$-th array are different.Finally, Cirno arbitrarily changed the order of $$$2n$$$ arrays.AquaMoon calls a subset of all $$$2n$$$ arrays of size $$$n$$$ good if these arrays from a Latin square.AquaMoon wants to know how many good subsets exist. Because this number may be particularly large, find it modulo $$$998\\,244\\,353$$$. Also, she wants to find any good subset. Can you help her?",
    "input_details": "The input consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$5 \\leq n \\leq 500$$$).Then $$$2n$$$ lines followed. The $$$i$$$-th of these lines contains $$$n$$$ integers, representing the $$$i$$$-th array.It is guaranteed, that the sum of $$$n$$$ over all test cases does not exceed $$$500$$$.",
    "output_details": "For each test case print two lines.In the first line, print the number of good subsets by modulo $$$998\\,244\\,353$$$.In the second line, print $$$n$$$ indices from $$$1$$$ to $$$2n$$$ — indices of the $$$n$$$ arrays that form a good subset (you can print them in any order). If there are several possible answers — print any of them.",
    "sample_input": "3\n7\n1 2 3 4 5 6 7\n2 3 4 5 6 7 1\n3 4 5 6 7 1 2\n4 5 6 7 1 2 3\n5 6 7 1 2 3 4\n6 7 1 2 3 4 5\n7 1 2 3 4 5 6\n1 2 3 4 5 7 6\n1 3 4 5 6 7 2\n1 4 5 6 7 3 2\n1 5 6 7 4 2 3\n1 6 7 5 2 3 4\n1 7 6 2 3 4 5\n1 7 2 3 4 5 6\n5\n4 5 1 2 3\n3 5 2 4 1\n1 2 3 4 5\n5 2 4 1 3\n3 4 5 1 2\n2 3 4 5 1\n1 3 5 2 4\n4 1 3 5 2\n2 4 1 3 5\n5 1 2 3 4\n6\n2 3 4 5 6 1\n3 1 2 6 4 5\n6 1 2 3 4 5\n5 6 1 3 2 4\n4 3 6 5 2 1\n5 6 1 2 3 4\n4 5 6 1 2 3\n3 4 5 6 1 2\n1 2 3 4 5 6\n2 5 4 1 6 3\n3 2 5 4 1 6\n1 4 3 6 5 2",
    "sample_output": "1\n1 2 3 4 5 6 7\n2\n1 3 5 6 10\n4\n1 3 6 7 8 9",
    "tags": [
      "2-sat",
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "graph matchings",
      "graphs",
      "*2800"
    ]
  },
  {
    "name": "AquaMoon and Chess",
    "question_id": "aqua-moon-and-chess",
    "question": "Cirno gave AquaMoon a chessboard of size $$$1 \\times n$$$. Its cells are numbered with integers from $$$1$$$ to $$$n$$$ from left to right. In the beginning, some of the cells are occupied with at most one pawn, and other cells are unoccupied.In each operation, AquaMoon can choose a cell $$$i$$$ with a pawn, and do either of the following (if possible):   Move pawn from it to the $$$(i+2)$$$-th cell, if $$$i+2 \\leq n$$$ and the $$$(i+1)$$$-th cell is occupied and the $$$(i+2)$$$-th cell is unoccupied.  Move pawn from it to the $$$(i-2)$$$-th cell, if $$$i-2 \\geq 1$$$ and the $$$(i-1)$$$-th cell is occupied and the $$$(i-2)$$$-th cell is unoccupied. You are given an initial state of the chessboard. AquaMoon wants to count the number of states reachable from the initial state with some sequence of operations. But she is not good at programming. Can you help her? As the answer can be large find it modulo $$$998\\,244\\,353$$$.",
    "input_details": "The input consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10\\,000$$$) — the number of test cases.The first line contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 10^5$$$) — the size of the chessboard.The second line contains a string of $$$n$$$ characters, consists of characters \"0\" and \"1\". If the $$$i$$$-th character is \"1\", the $$$i$$$-th cell is initially occupied; otherwise, the $$$i$$$-th cell is initially unoccupied.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
    "output_details": "For each test case, print the number of states that reachable from the initial state with some sequence of operations modulo $$$998\\,244\\,353$$$.",
    "sample_input": "6\n4\n0110\n6\n011011\n5\n01010\n20\n10001111110110111000\n20\n00110110100110111101\n20\n11101111011000100010",
    "sample_output": "3\n6\n1\n1287\n1287\n715",
    "tags": ["combinatorics", "math", "*1900"]
  },
  {
    "name": "AquaMoon and Strange Sort",
    "question_id": "aqua-moon-and-strange-sort",
    "question": "AquaMoon has $$$n$$$ friends. They stand in a row from left to right, and the $$$i$$$-th friend from the left wears a T-shirt with a number $$$a_i$$$ written on it. Each friend has a direction (left or right). In the beginning, the direction of each friend is right.AquaMoon can make some operations on friends. On each operation, AquaMoon can choose two adjacent friends and swap their positions. After each operation, the direction of both chosen friends will also be flipped: left to right and vice versa.AquaMoon hopes that after some operations, the numbers written on the T-shirt of $$$n$$$ friends in the row, read from left to right, become non-decreasing. Also she wants, that all friends will have a direction of right at the end. Please find if it is possible.",
    "input_details": "The input consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 50$$$) — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 10^5$$$) — the number of Aquamoon's friends.The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq 10^5$$$) — the numbers, written on the T-shirts.It is guaranteed that the sum of $$$n$$$ for all test cases does not exceed $$$10^5$$$.",
    "output_details": "For each test case, if there exists a possible sequence of operations, print \"YES\" (without quotes); otherwise, print \"NO\" (without quotes).You can print each letter in any case (upper or lower).",
    "sample_input": "3\n4\n4 3 2 5\n4\n3 3 2 2\n5\n1 2 3 5 4",
    "sample_output": "YES\nYES\nNO",
    "tags": ["sortings", "*1500"]
  },
  {
    "name": "The Final Pursuit",
    "question_id": "the-final-pursuit",
    "question": "Finally, you have defeated Razor and now, you are the Most Wanted street racer. Sergeant Cross has sent the full police force after you in a deadly pursuit. Fortunately, you have found a hiding spot but you fear that Cross and his force will eventually find you. To increase your chances of survival, you want to tune and repaint your BMW M3 GTR.The car can be imagined as a permuted $$$n$$$-dimensional hypercube. A simple $$$n$$$-dimensional hypercube is an undirected unweighted graph built recursively as follows:   Take two simple $$$(n-1)$$$-dimensional hypercubes one having vertices numbered from $$$0$$$ to $$$2^{n-1}-1$$$ and the other having vertices numbered from $$$2^{n-1}$$$ to $$$2^{n}-1$$$. A simple $$$0$$$-dimensional Hypercube is just a single vertex.  Add an edge between the vertices $$$i$$$ and $$$i+2^{n-1}$$$ for each $$$0\\leq i < 2^{n-1}$$$. A permuted $$$n$$$-dimensional hypercube is formed by permuting the vertex numbers of a simple $$$n$$$-dimensional hypercube in any arbitrary manner.Examples of a simple and permuted $$$3$$$-dimensional hypercubes are given below:  Note that a permuted $$$n$$$-dimensional hypercube has the following properties:   There are exactly $$$2^n$$$ vertices.  There are exactly $$$n\\cdot 2^{n-1}$$$ edges.  Each vertex is connected to exactly $$$n$$$ other vertices.  There are no self-loops or duplicate edges. Let's denote the permutation used to generate the permuted $$$n$$$-dimensional hypercube, representing your car, from a simple $$$n$$$-dimensional hypercube by $$$P$$$. Before messing up the functionalities of the car, you want to find this permutation so that you can restore the car if anything goes wrong. But the job isn't done yet.You have $$$n$$$ different colours numbered from $$$0$$$ to $$$n-1$$$. You want to colour the vertices of this permuted $$$n$$$-dimensional hypercube in such a way that for each and every vertex $$$u$$$ satisfying $$$0\\leq u < 2^n$$$ and for each and every colour $$$c$$$ satisfying $$$0\\leq c < n$$$, there is at least one vertex $$$v$$$ adjacent to $$$u$$$ having a colour $$$c$$$. In other words, from each and every vertex, it must be possible to reach a vertex of any colour by just moving to an adjacent vertex. Given the permuted $$$n$$$-dimensional hypercube, find any valid permutation $$$P$$$ and colouring.",
    "input_details": "The first line of input contains a single integer $$$t$$$ ($$$1\\leq t\\leq 4096$$$) — the number of test cases.For each test case, the first line contains a single integer $$$n$$$ ($$$1\\leq n\\leq 16$$$).Each of the next $$$n\\cdot 2^{n-1}$$$ lines contain two integers $$$u$$$ and $$$v$$$ ($$$0\\leq u, v < 2^n$$$) denoting that there is an edge between the vertices numbered $$$u$$$ and $$$v$$$.It is guaranteed that the graph described in the input is a permuted $$$n$$$-dimensional hypercube.Additionally, it is guaranteed that the sum of $$$2^n$$$ over all test cases does not exceed $$$2^{16}=65\\,536$$$.",
    "output_details": "For each test case, print two lines.In the first line, output any permutation $$$P$$$ of length $$$2^n$$$ that can be used to transform a simple $$$n$$$-dimensional hypercube to the permuted $$$n$$$-dimensional hypercube given in the input. Two permuted hypercubes are considered the same if they have the same set of edges. If there are multiple answers, output any of them.In the second line, print the colouring. If there is no way to colour the vertices satisfying the conditions, output $$$-1$$$. Otherwise, output a single line containing $$$2^n$$$ space separated integers. The $$$i$$$-th integer must be the colour of the vertex numbered $$$(i-1)$$$ in the permuted $$$n$$$-dimensional hypercube. If there are multiple answers, output any of them.",
    "sample_input": "3\n1\n0 1\n2\n0 1\n1 2\n2 3\n3 0\n3\n0 1\n0 5\n0 7\n1 2\n1 4\n2 5\n2 6\n3 5\n3 6\n3 7\n4 6\n4 7",
    "sample_output": "0 1\n0 0\n0 1 3 2\n0 0 1 1\n5 3 0 7 2 6 1 4\n-1",
    "tags": [
      "bitmasks",
      "constructive algorithms",
      "divide and conquer",
      "graphs",
      "greedy",
      "math",
      "*2700"
    ]
  },
  {
    "name": " RPD and Rap Sheet (Hard Version)",
    "question_id": "rpd-and-rap-sheet-hard-version",
    "question": "This is the hard version of the problem. The only difference is that here $$$2\\leq k\\leq 100$$$. You can make hacks only if both the versions of the problem are solved.This is an interactive problem!Every decimal number has a base $$$k$$$ equivalent. The individual digits of a base $$$k$$$ number are called $$$k$$$-its. Let's define the $$$k$$$-itwise XOR of two $$$k$$$-its $$$a$$$ and $$$b$$$ as $$$(a + b)\\bmod k$$$.The $$$k$$$-itwise XOR of two base $$$k$$$ numbers is equal to the new number formed by taking the $$$k$$$-itwise XOR of their corresponding $$$k$$$-its. The $$$k$$$-itwise XOR of two decimal numbers $$$a$$$ and $$$b$$$ is denoted by $$$a\\oplus_{k} b$$$ and is equal to the decimal representation of the $$$k$$$-itwise XOR of the base $$$k$$$ representations of $$$a$$$ and $$$b$$$. All further numbers used in the statement below are in decimal unless specified.You have hacked the criminal database of Rockport Police Department (RPD), also known as the Rap Sheet. But in order to access it, you require a password. You don't know it, but you are quite sure that it lies between $$$0$$$ and $$$n-1$$$ inclusive. So, you have decided to guess it. Luckily, you can try at most $$$n$$$ times without being blocked by the system. But the system is adaptive. Each time you make an incorrect guess, it changes the password. Specifically, if the password before the guess was $$$x$$$, and you guess a different number $$$y$$$, then the system changes the password to a number $$$z$$$ such that $$$x\\oplus_{k} z=y$$$. Guess the password and break into the system.",
    "input_details": "The first line of input contains a single integer $$$t$$$ ($$$1\\leq t\\leq 10\\,000$$$) denoting the number of test cases. $$$t$$$ test cases follow.The first line of each test case contains two integers $$$n$$$ ($$$1\\leq n\\leq 2\\cdot 10^5$$$) and $$$k$$$ $$$(2\\leq k\\leq 100)$$$.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot 10^5$$$.",
    "output_details": "ctionFor each test case, first read two integers $$$n$$$ and $$$k$$$. Then you may ask up to $$$n$$$ queries.For each query, print a single integer $$$y$$$ ($$$0\\leq y\\leq 2\\cdot 10^7$$$). Let the current password be $$$x$$$. After that, read an integer $$$r$$$.If $$$x=y$$$, you will read $$$r=1$$$ and the test case is solved. You must then continue solving the remaining test cases.Else, you will read $$$r=0$$$. At this moment the password is changed to a number $$$z$$$ such that $$$x\\oplus_{k} z=y$$$.After printing a query, do not forget to output the end of line and flush the output. Otherwise, you will get the Idleness limit exceeded verdict.To do this, use:  fflush(stdout) or cout.flush() in C++;  System.out.flush() in Java;  flush(output) in Pascal;  stdout.flush() in Python;  see documentation for other languages. If you ask an invalid query or exceed $$$n$$$ queries, you will read $$$r=-1$$$ and you will receive the Wrong Answer verdict. Make sure to exit immediately to avoid unexpected verdicts.Note that the interactor is adaptive. That is, the original password is not fixed in the beginning and may depend on your queries. But it is guaranteed that at any moment there is at least one initial password such that all the answers to the queries are consistent.Hacks:To use hacks, use the following format of tests:The first line should contain a single integer $$$t$$$ ($$$1\\leq t\\leq 10\\,000$$$) — the number of test cases.The first and only line of each test case should contain two integers $$$n$$$ ($$$1\\leq n\\leq 2\\cdot 10^5$$$) and $$$k$$$ ($$$2\\leq k\\leq 100$$$) denoting the number of queries and the base respectively. The optimal original password is automatically decided by the adaptive interactor.You must ensure that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot 10^5$$$.",
    "sample_input": "2\n5 2\n\n0\n\n0\n\n1\n5 3\n\n0\n\n0\n\n1",
    "sample_output": "3\n\n4\n\n5\n\n\n1\n\n4\n\n6",
    "tags": [
      "brute force",
      "constructive algorithms",
      "interactive",
      "math",
      "*2200"
    ]
  },
  {
    "name": " RPD and Rap Sheet (Easy Version)",
    "question_id": "rpd-and-rap-sheet-easy-version",
    "question": "This is the easy version of the problem. The only difference is that here $$$k=2$$$. You can make hacks only if both the versions of the problem are solved.This is an interactive problem.Every decimal number has a base $$$k$$$ equivalent. The individual digits of a base $$$k$$$ number are called $$$k$$$-its. Let's define the $$$k$$$-itwise XOR of two $$$k$$$-its $$$a$$$ and $$$b$$$ as $$$(a + b)\\bmod k$$$.The $$$k$$$-itwise XOR of two base $$$k$$$ numbers is equal to the new number formed by taking the $$$k$$$-itwise XOR of their corresponding $$$k$$$-its. The $$$k$$$-itwise XOR of two decimal numbers $$$a$$$ and $$$b$$$ is denoted by $$$a\\oplus_{k} b$$$ and is equal to the decimal representation of the $$$k$$$-itwise XOR of the base $$$k$$$ representations of $$$a$$$ and $$$b$$$. All further numbers used in the statement below are in decimal unless specified. When $$$k = 2$$$ (it is always true in this version), the $$$k$$$-itwise XOR is the same as the bitwise XOR.You have hacked the criminal database of Rockport Police Department (RPD), also known as the Rap Sheet. But in order to access it, you require a password. You don't know it, but you are quite sure that it lies between $$$0$$$ and $$$n-1$$$ inclusive. So, you have decided to guess it. Luckily, you can try at most $$$n$$$ times without being blocked by the system. But the system is adaptive. Each time you make an incorrect guess, it changes the password. Specifically, if the password before the guess was $$$x$$$, and you guess a different number $$$y$$$, then the system changes the password to a number $$$z$$$ such that $$$x\\oplus_{k} z=y$$$. Guess the password and break into the system.",
    "input_details": "The first line of input contains a single integer $$$t$$$ ($$$1\\leq t\\leq 10\\,000$$$) denoting the number of test cases. $$$t$$$ test cases follow.The first line of each test case contains two integers $$$n$$$ ($$$1\\leq n\\leq 2\\cdot 10^5$$$) and $$$k$$$ ($$$k=2$$$).It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot 10^5$$$.",
    "output_details": "ctionFor each test case, first read two integers $$$n$$$ and $$$k$$$. Then you may ask up to $$$n$$$ queries.For each query, print a single integer $$$y$$$ ($$$0\\leq y\\leq 2\\cdot 10^7$$$). Let the current password be $$$x$$$. After that, read an integer $$$r$$$.If $$$x=y$$$, you will read $$$r=1$$$ and the test case is solved. You must then continue solving the remaining test cases.Else, you will read $$$r=0$$$. At this moment the password is changed to a number $$$z$$$ such that $$$x\\oplus_{k} z=y$$$.After printing a query, do not forget to output the end of line and flush the output. Otherwise, you will get the Idleness limit exceeded verdict.To do this, use:  fflush(stdout) or cout.flush() in C++;  System.out.flush() in Java;  flush(output) in Pascal;  stdout.flush() in Python;  see documentation for other languages. If you ask an invalid query or exceed $$$n$$$ queries, you will read $$$r=-1$$$ and you will receive the Wrong Answer verdict. Make sure to exit immediately to avoid unexpected verdicts.Note that the interactor is adaptive. That is, the original password is not fixed in the beginning and may depend on your queries. But it is guaranteed that at any moment there is at least one initial password such that all the answers to the queries are consistent.Hacks:To use hacks, use the following format of tests:The first line should contain a single integer $$$t$$$ ($$$1\\leq t\\leq 10\\,000$$$) — the number of test cases.The first and only line of each test case should contain two integers $$$n$$$ ($$$1\\leq n\\leq 2\\cdot 10^5$$$) and $$$k$$$ ($$$k=2$$$) denoting the number of queries and the base respectively. The optimal original password is automatically decided by the adaptive interactor.You must ensure that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot 10^5$$$.",
    "sample_input": "1\n5 2\n\n0\n\n0\n\n1",
    "sample_output": "3\n\n4\n\n5",
    "tags": [
      "bitmasks",
      "constructive algorithms",
      "interactive",
      "math",
      "*1700"
    ]
  },
  {
    "name": "Need for Pink Slips",
    "question_id": "need-for-pink-slips",
    "question": "After defeating a Blacklist Rival, you get a chance to draw $$$1$$$ reward slip out of $$$x$$$ hidden valid slips. Initially, $$$x=3$$$ and these hidden valid slips are Cash Slip, Impound Strike Release Marker and Pink Slip of Rival's Car. Initially, the probability of drawing these in a random guess are $$$c$$$, $$$m$$$, and $$$p$$$, respectively. There is also a volatility factor $$$v$$$. You can play any number of Rival Races as long as you don't draw a Pink Slip. Assume that you win each race and get a chance to draw a reward slip. In each draw, you draw one of the $$$x$$$ valid items with their respective probabilities. Suppose you draw a particular item and its probability of drawing before the draw was $$$a$$$. Then,  If the item was a Pink Slip, the quest is over, and you will not play any more races.  Otherwise,   If $$$a\\leq v$$$, the probability of the item drawn becomes $$$0$$$ and the item is no longer a valid item for all the further draws, reducing $$$x$$$ by $$$1$$$. Moreover, the reduced probability $$$a$$$ is distributed equally among the other remaining valid items.  If $$$a > v$$$, the probability of the item drawn reduces by $$$v$$$ and the reduced probability is distributed equally among the other valid items.  For example,  If $$$(c,m,p)=(0.2,0.1,0.7)$$$ and $$$v=0.1$$$, after drawing Cash, the new probabilities will be $$$(0.1,0.15,0.75)$$$.  If $$$(c,m,p)=(0.1,0.2,0.7)$$$ and $$$v=0.2$$$, after drawing Cash, the new probabilities will be $$$(Invalid,0.25,0.75)$$$.  If $$$(c,m,p)=(0.2,Invalid,0.8)$$$ and $$$v=0.1$$$, after drawing Cash, the new probabilities will be $$$(0.1,Invalid,0.9)$$$.  If $$$(c,m,p)=(0.1,Invalid,0.9)$$$ and $$$v=0.2$$$, after drawing Cash, the new probabilities will be $$$(Invalid,Invalid,1.0)$$$. You need the cars of Rivals. So, you need to find the expected number of races that you must play in order to draw a pink slip.",
    "input_details": "The first line of input contains a single integer $$$t$$$ ($$$1\\leq t\\leq 10$$$)  — the number of test cases.The first and the only line of each test case contains four real numbers $$$c$$$, $$$m$$$, $$$p$$$ and $$$v$$$ ($$$0 < c,m,p < 1$$$, $$$c+m+p=1$$$, $$$0.1\\leq v\\leq 0.9$$$).Additionally, it is guaranteed that each of $$$c$$$, $$$m$$$, $$$p$$$ and $$$v$$$ have at most $$$4$$$ decimal places.",
    "output_details": "For each test case, output a single line containing a single real number — the expected number of races that you must play in order to draw a Pink Slip.Your answer is considered correct if its absolute or relative error does not exceed $$$10^{-6}$$$.Formally, let your answer be $$$a$$$, and the jury's answer be $$$b$$$. Your answer is accepted if and only if $$$\\frac{|a - b|}{\\max{(1, |b|)}} \\le 10^{-6}$$$.",
    "sample_input": "4\n0.2 0.2 0.6 0.2\n0.4 0.2 0.4 0.8\n0.4998 0.4998 0.0004 0.1666\n0.3125 0.6561 0.0314 0.2048",
    "sample_output": "1.532000000000\n1.860000000000\n5.005050776521\n4.260163673896",
    "tags": [
      "bitmasks",
      "brute force",
      "dfs and similar",
      "implementation",
      "math",
      "probabilities",
      "*1900"
    ]
  },
  {
    "name": "Customising the Track",
    "question_id": "customising-the-track",
    "question": "Highway 201 is the most busy street in Rockport. Traffic cars cause a lot of hindrances to races, especially when there are a lot of them. The track which passes through this highway can be divided into $$$n$$$ sub-tracks. You are given an array $$$a$$$ where $$$a_i$$$ represents the number of traffic cars in the $$$i$$$-th sub-track. You define the inconvenience of the track as $$$\\sum\\limits_{i=1}^{n} \\sum\\limits_{j=i+1}^{n} \\lvert a_i-a_j\\rvert$$$, where $$$|x|$$$ is the absolute value of $$$x$$$. You can perform the following operation any (possibly zero) number of times: choose a traffic car and move it from its current sub-track to any other sub-track.Find the minimum inconvenience you can achieve.",
    "input_details": "The first line of input contains a single integer $$$t$$$ ($$$1\\leq t\\leq 10\\,000$$$) — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$1\\leq n\\leq 2\\cdot 10^5$$$).The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0\\leq a_i\\leq 10^9$$$).It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot 10^5$$$.",
    "output_details": "For each test case, print a single line containing a single integer: the minimum inconvenience you can achieve by applying the given operation any (possibly zero) number of times.",
    "sample_input": "3\n3\n1 2 3\n4\n0 1 1 0\n10\n8 3 6 11 5 2 1 7 10 4",
    "sample_output": "0\n4\n21",
    "tags": ["combinatorics", "greedy", "math", "*900"]
  },
  {
    "name": "Exciting Bets",
    "question_id": "exciting-bets",
    "question": "Welcome to Rockport City!It is time for your first ever race in the game against Ronnie. To make the race interesting, you have bet $$$a$$$ dollars and Ronnie has bet $$$b$$$ dollars. But the fans seem to be disappointed. The excitement of the fans is given by $$$gcd(a,b)$$$, where $$$gcd(x, y)$$$ denotes the greatest common divisor (GCD) of integers $$$x$$$ and $$$y$$$. To make the race more exciting, you can perform two types of operations:  Increase both $$$a$$$ and $$$b$$$ by $$$1$$$.  Decrease both $$$a$$$ and $$$b$$$ by $$$1$$$. This operation can only be performed if both $$$a$$$ and $$$b$$$ are greater than $$$0$$$. In one move, you can perform any one of these operations. You can perform arbitrary (possibly zero) number of moves. Determine the maximum excitement the fans can get and the minimum number of moves required to achieve it.Note that $$$gcd(x,0)=x$$$ for any $$$x \\ge 0$$$.",
    "input_details": "The first line of input contains a single integer $$$t$$$ ($$$1\\leq t\\leq 5\\cdot 10^3$$$) — the number of test cases.The first and the only line of each test case contains two integers $$$a$$$ and $$$b$$$ ($$$0\\leq a, b\\leq 10^{18}$$$).",
    "output_details": "For each test case, print a single line containing two integers. If the fans can get infinite excitement, print 0 0.Otherwise, the first integer must be the maximum excitement the fans can get, and the second integer must be the minimum number of moves required to achieve that excitement.",
    "sample_input": "4\n8 5\n1 2\n4 4\n3 9",
    "sample_output": "3 1\n1 0\n0 0\n6 3",
    "tags": ["greedy", "math", "number theory", "*900"]
  },
  {
    "name": " Abnormal Permutation Pairs (hard version)",
    "question_id": "abnormal-permutation-pairs-hard-version",
    "question": "This is the hard version of the problem. The only difference between the easy version and the hard version is the constraints on $$$n$$$. You can only make hacks if both versions are solved.A permutation of $$$1, 2, \\ldots, n$$$ is a sequence of $$$n$$$ integers, where each integer from $$$1$$$ to $$$n$$$ appears exactly once. For example, $$$[2,3,1,4]$$$ is a permutation of $$$1, 2, 3, 4$$$, but $$$[1,4,2,2]$$$ isn't because $$$2$$$ appears twice in it.Recall that the number of inversions in a permutation $$$a_1, a_2, \\ldots, a_n$$$ is the number of pairs of indices $$$(i, j)$$$ such that $$$i < j$$$ and $$$a_i > a_j$$$.Let $$$p$$$ and $$$q$$$ be two permutations of $$$1, 2, \\ldots, n$$$. Find the number of permutation pairs $$$(p,q)$$$ that satisfy the following conditions:  $$$p$$$ is lexicographically smaller than $$$q$$$.  the number of inversions in $$$p$$$ is greater than the number of inversions in $$$q$$$. Print the number of such pairs modulo $$$mod$$$. Note that $$$mod$$$ may not be a prime.",
    "input_details": "The only line contains two integers $$$n$$$ and $$$mod$$$ ($$$1\\le n\\le 500$$$, $$$1\\le mod\\le 10^9$$$).",
    "output_details": "Print one integer, which is the answer modulo $$$mod$$$.",
    "sample_input": "4 403458273",
    "sample_output": "17",
    "tags": ["combinatorics", "dp", "fft", "math", "*2700"]
  },
  {
    "name": " Abnormal Permutation Pairs (easy version)",
    "question_id": "abnormal-permutation-pairs-easy-version",
    "question": "This is the easy version of the problem. The only difference between the easy version and the hard version is the constraints on $$$n$$$. You can only make hacks if both versions are solved.A permutation of $$$1, 2, \\ldots, n$$$ is a sequence of $$$n$$$ integers, where each integer from $$$1$$$ to $$$n$$$ appears exactly once. For example, $$$[2,3,1,4]$$$ is a permutation of $$$1, 2, 3, 4$$$, but $$$[1,4,2,2]$$$ isn't because $$$2$$$ appears twice in it.Recall that the number of inversions in a permutation $$$a_1, a_2, \\ldots, a_n$$$ is the number of pairs of indices $$$(i, j)$$$ such that $$$i < j$$$ and $$$a_i > a_j$$$.Let $$$p$$$ and $$$q$$$ be two permutations of $$$1, 2, \\ldots, n$$$. Find the number of permutation pairs $$$(p,q)$$$ that satisfy the following conditions:  $$$p$$$ is lexicographically smaller than $$$q$$$.  the number of inversions in $$$p$$$ is greater than the number of inversions in $$$q$$$. Print the number of such pairs modulo $$$mod$$$. Note that $$$mod$$$ may not be a prime.",
    "input_details": "The only line contains two integers $$$n$$$ and $$$mod$$$ ($$$1\\le n\\le 50$$$, $$$1\\le mod\\le 10^9$$$).",
    "output_details": "Print one integer, which is the answer modulo $$$mod$$$.",
    "sample_input": "4 403458273",
    "sample_output": "17",
    "tags": ["combinatorics", "dp", "fft", "math", "*2400"]
  },
  {
    "name": "Priority Queue",
    "question_id": "priority-queue",
    "question": "You are given a sequence $$$A$$$, where its elements are either in the form + x or -, where $$$x$$$ is an integer.For such a sequence $$$S$$$ where its elements are either in the form + x or -, define $$$f(S)$$$ as follows:  iterate through $$$S$$$'s elements from the first one to the last one, and maintain a multiset $$$T$$$ as you iterate through it.  for each element, if it's in the form + x, add $$$x$$$ to $$$T$$$; otherwise, erase the smallest element from $$$T$$$ (if $$$T$$$ is empty, do nothing).  after iterating through all $$$S$$$'s elements, compute the sum of all elements in $$$T$$$. $$$f(S)$$$ is defined as the sum. The sequence $$$b$$$ is a subsequence of the sequence $$$a$$$ if $$$b$$$ can be derived from $$$a$$$ by removing zero or more elements without changing the order of the remaining elements. For all $$$A$$$'s subsequences $$$B$$$, compute the sum of $$$f(B)$$$, modulo $$$998\\,244\\,353$$$.",
    "input_details": "The first line contains an integer $$$n$$$ ($$$1\\leq n\\leq 500$$$) — the length of $$$A$$$.Each of the next $$$n$$$ lines begins with an operator + or -. If the operator is +, then it's followed by an integer $$$x$$$ ($$$1\\le x<998\\,244\\,353$$$). The $$$i$$$-th line of those $$$n$$$ lines describes the $$$i$$$-th element in $$$A$$$.",
    "output_details": "Print one integer, which is the answer to the problem, modulo $$$998\\,244\\,353$$$.",
    "sample_input": "4\n-\n+ 1\n+ 2\n-",
    "sample_output": "16",
    "tags": [
      "combinatorics",
      "dp",
      "implementation",
      "math",
      "ternary search",
      "*2200"
    ]
  },
  {
    "name": "Strange Function",
    "question_id": "strange-function",
    "question": "Let $$$f(i)$$$ denote the minimum positive integer $$$x$$$ such that $$$x$$$ is not a divisor of $$$i$$$.Compute $$$\\sum_{i=1}^n f(i)$$$ modulo $$$10^9+7$$$. In other words, compute $$$f(1)+f(2)+\\dots+f(n)$$$ modulo $$$10^9+7$$$.",
    "input_details": "The first line contains a single integer $$$t$$$ ($$$1\\leq t\\leq 10^4$$$), the number of test cases. Then $$$t$$$ cases follow.The only line of each test case contains a single integer $$$n$$$ ($$$1\\leq n\\leq 10^{16}$$$).",
    "output_details": "For each test case, output a single integer $$$ans$$$, where $$$ans=\\sum_{i=1}^n f(i)$$$ modulo $$$10^9+7$$$.",
    "sample_input": "6\n1\n2\n3\n4\n10\n10000000000000000",
    "sample_output": "2\n5\n7\n10\n26\n366580019",
    "tags": ["math", "number theory", "*1600"]
  },
  {
    "name": "Plus and Multiply",
    "question_id": "plus-and-multiply",
    "question": "There is an infinite set generated as follows:  $$$1$$$ is in this set.  If $$$x$$$ is in this set, $$$x \\cdot a$$$ and $$$x+b$$$ both are in this set. For example, when $$$a=3$$$ and $$$b=6$$$, the five smallest elements of the set are:  $$$1$$$,  $$$3$$$ ($$$1$$$ is in this set, so $$$1\\cdot a=3$$$ is in this set),  $$$7$$$ ($$$1$$$ is in this set, so $$$1+b=7$$$ is in this set),  $$$9$$$ ($$$3$$$ is in this set, so $$$3\\cdot a=9$$$ is in this set),  $$$13$$$ ($$$7$$$ is in this set, so $$$7+b=13$$$ is in this set). Given positive integers $$$a$$$, $$$b$$$, $$$n$$$, determine if $$$n$$$ is in this set.",
    "input_details": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1\\leq t\\leq 10^5$$$) — the number of test cases. The description of the test cases follows.The only line describing each test case contains three integers $$$n$$$, $$$a$$$, $$$b$$$ ($$$1\\leq n,a,b\\leq 10^9$$$) separated by a single space.",
    "output_details": "For each test case, print \"Yes\" if $$$n$$$ is in this set, and \"No\" otherwise. You can print each letter in any case.",
    "sample_input": "5\n24 3 5\n10 3 6\n2345 1 4\n19260817 394 485\n19260817 233 264",
    "sample_output": "Yes\nNo\nYes\nNo\nYes",
    "tags": ["constructive algorithms", "math", "number theory", "*1500"]
  },
  {
    "name": "Odd Set",
    "question_id": "odd-set",
    "question": "You are given a multiset (i. e. a set that can contain multiple equal integers) containing $$$2n$$$ integers. Determine if you can split it into exactly $$$n$$$ pairs (i. e. each element should be in exactly one pair) so that the sum of the two elements in each pair is odd (i. e. when divided by $$$2$$$, the remainder is $$$1$$$).",
    "input_details": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1\\leq t\\leq 100$$$) — the number of test cases. The description of the test cases follows.The first line of each test case contains an integer $$$n$$$ ($$$1\\leq n\\leq 100$$$).The second line of each test case contains $$$2n$$$ integers $$$a_1,a_2,\\dots, a_{2n}$$$ ($$$0\\leq a_i\\leq 100$$$) — the numbers in the set.",
    "output_details": "For each test case, print \"Yes\" if it can be split into exactly $$$n$$$ pairs so that the sum of the two elements in each pair is odd, and \"No\" otherwise. You can print each letter in any case.",
    "sample_input": "5\n2\n2 3 4 5\n3\n2 3 4 5 5 5\n1\n2 4\n1\n2 3\n4\n1 5 3 2 6 7 3 4",
    "sample_output": "Yes\nNo\nNo\nYes\nNo",
    "tags": ["math", "*800"]
  },
  {
    "name": "Pleasant Pairs",
    "question_id": "pleasant-pairs",
    "question": "You are given an array $$$a_1, a_2, \\dots, a_n$$$ consisting of $$$n$$$ distinct integers. Count the number of pairs of indices $$$(i, j)$$$ such that $$$i < j$$$ and $$$a_i \\cdot a_j = i + j$$$.",
    "input_details": "The first line contains one integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases. Then $$$t$$$ cases follow.The first line of each test case contains one integer $$$n$$$ ($$$2 \\leq n \\leq 10^5$$$) — the length of array $$$a$$$.The second line of each test case contains $$$n$$$ space separated integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 2 \\cdot n$$$) — the array $$$a$$$. It is guaranteed that all elements are distinct.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "output_details": "For each test case, output the number of pairs of indices $$$(i, j)$$$ such that $$$i < j$$$ and $$$a_i \\cdot a_j = i + j$$$.",
    "sample_input": "3\n2\n3 1\n3\n6 1 5\n5\n3 1 5 9 2",
    "sample_output": "1\n1\n3",
    "tags": ["brute force", "implementation", "math", "number theory", "*1200"]
  }
]
